{"Typealiases.html#/SQLiteConnection":{"name":"SQLiteConnection","abstract":"<p>A raw SQLite connection, suitable for the SQLite C API.</p>"},"Typealiases.html#/SQLiteStatement":{"name":"SQLiteStatement","abstract":"<p>A raw SQLite statement, suitable for the SQLite C API.</p>"},"Typealiases.html#/FTS5TokenCallback":{"name":"FTS5TokenCallback","abstract":"<p>A low-level SQLite function that lets FTS5Tokenizer notify tokens.</p>"},"Typealiases.html#/FTS5WrapperTokenCallback":{"name":"FTS5WrapperTokenCallback","abstract":"<p>A function that lets FTS5WrapperTokenizer notify tokens.</p>"},"Typealiases.html#/ValueReducer":{"name":"ValueReducer","abstract":"<p><code>ValueReducer</code> supports <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ValueObservation.html\">ValueObservation</a></code> that can observe from any"},"Structs/ValueObservation.html#/requiresWriteAccess":{"name":"requiresWriteAccess","abstract":"<p>Default is false. Set this property to true when the observation","parent_name":"ValueObservation"},"Structs/ValueObservation.html#/shared(in:scheduling:extent:)":{"name":"shared(in:scheduling:extent:)","abstract":"<p>Returns a shared value observation that shares a single underlying","parent_name":"ValueObservation"},"Structs/ValueObservation.html#/start(in:scheduling:onError:onChange:)":{"name":"start(in:scheduling:onError:onChange:)","abstract":"<p>Starts the value observation in the provided database reader (such as","parent_name":"ValueObservation"},"Structs/ValueObservation.html#/handleEvents(willStart:willFetch:willTrackRegion:databaseDidChange:didReceiveValue:didFail:didCancel:)":{"name":"handleEvents(willStart:willFetch:willTrackRegion:databaseDidChange:didReceiveValue:didFail:didCancel:)","abstract":"<p>Performs the specified closures when ValueObservation events occur.</p>","parent_name":"ValueObservation"},"Structs/ValueObservation.html#/print(_:to:)":{"name":"print(_:to:)","abstract":"<p>Prints log messages for all ValueObservation events.</p>","parent_name":"ValueObservation"},"Structs/ValueObservation.html#/trackingConstantRegion(_:)":{"name":"trackingConstantRegion(_:)","abstract":"<p>Creates an optimized <code>ValueObservation</code> that notifies the values","parent_name":"ValueObservation"},"Structs/ValueObservation.html#/tracking(region:fetch:)":{"name":"tracking(region:fetch:)","abstract":"<p>Creates a <code>ValueObservation</code> that notifies the values returned by the","parent_name":"ValueObservation"},"Structs/ValueObservation.html#/tracking(regions:fetch:)":{"name":"tracking(regions:fetch:)","abstract":"<p>Creates a <code>ValueObservation</code> that notifies the values returned by the","parent_name":"ValueObservation"},"Structs/ValueObservation.html#/tracking(_:)":{"name":"tracking(_:)","abstract":"<p>Creates a <code>ValueObservation</code> that notifies the values returned by the","parent_name":"ValueObservation"},"Structs/ValueObservation.html#/map(_:)":{"name":"map(_:)","abstract":"<p>Returns a ValueObservation which notifies the results of calling the","parent_name":"ValueObservation"},"Structs/ValueObservation.html#/removeDuplicates(by:)":{"name":"removeDuplicates(by:)","abstract":"<p>Returns a ValueObservation which only publishes elements that donâ€™t","parent_name":"ValueObservation"},"Structs/ValueObservation.html#/removeDuplicates()":{"name":"removeDuplicates()","abstract":"<p>Returns a ValueObservation which filters out consecutive equal values.</p>","parent_name":"ValueObservation"},"Structs/Inflections.html#/init()":{"name":"init()","parent_name":"Inflections"},"Structs/Inflections.html#/plural(_:options:_:)":{"name":"plural(_:options:_:)","abstract":"<p>Appends a pluralization rule.</p>","parent_name":"Inflections"},"Structs/Inflections.html#/singular(_:options:_:)":{"name":"singular(_:options:_:)","abstract":"<p>Appends a singularization rule.</p>","parent_name":"Inflections"},"Structs/Inflections.html#/uncountableWords(_:)":{"name":"uncountableWords(_:)","abstract":"<p>Appends uncountable words.</p>","parent_name":"Inflections"},"Structs/Inflections.html#/irregularSuffix(_:_:)":{"name":"irregularSuffix(_:_:)","abstract":"<p>Appends an irregular singular/plural pair.</p>","parent_name":"Inflections"},"Structs/Inflections.html#/pluralize(_:)":{"name":"pluralize(_:)","abstract":"<p>Returns a pluralized string.</p>","parent_name":"Inflections"},"Structs/Inflections.html#/singularize(_:)":{"name":"singularize(_:)","abstract":"<p>Returns a singularized string.</p>","parent_name":"Inflections"},"Structs/Inflections.html#/default":{"name":"default","abstract":"<p>The default inflections</p>","parent_name":"Inflections"},"Structs/PersistenceSuccess.html#/persistenceContainer":{"name":"persistenceContainer","abstract":"<p>The persistence container that was saved.</p>","parent_name":"PersistenceSuccess"},"Structs/InsertionSuccess.html#/rowID":{"name":"rowID","abstract":"<p>The rowid of the inserted record.</p>","parent_name":"InsertionSuccess"},"Structs/InsertionSuccess.html#/rowIDColumn":{"name":"rowIDColumn","abstract":"<p>The name of the eventual INTEGER PRIMARY KEY column.</p>","parent_name":"InsertionSuccess"},"Structs/InsertionSuccess.html#/persistenceContainer":{"name":"persistenceContainer","abstract":"<p>The persistence container that was inserted.</p>","parent_name":"InsertionSuccess"},"Structs/PersistenceConflictPolicy.html#/conflictResolutionForInsert":{"name":"conflictResolutionForInsert","abstract":"<p>The conflict resolution algorithm for insertions</p>","parent_name":"PersistenceConflictPolicy"},"Structs/PersistenceConflictPolicy.html#/conflictResolutionForUpdate":{"name":"conflictResolutionForUpdate","abstract":"<p>The conflict resolution algorithm for updates</p>","parent_name":"PersistenceConflictPolicy"},"Structs/PersistenceConflictPolicy.html#/init(insert:update:)":{"name":"init(insert:update:)","abstract":"<p>Creates a policy</p>","parent_name":"PersistenceConflictPolicy"},"Structs/IndexOptions.html#/ifNotExists":{"name":"ifNotExists","abstract":"<p>Only creates the index if it does not already exist.</p>","parent_name":"IndexOptions"},"Structs/IndexOptions.html#/unique":{"name":"unique","abstract":"<p>Creates a unique index.</p>","parent_name":"IndexOptions"},"Structs/TableOptions.html#/ifNotExists":{"name":"ifNotExists","abstract":"<p>Only creates the table if it does not already exist.</p>","parent_name":"TableOptions"},"Structs/TableOptions.html#/temporary":{"name":"temporary","abstract":"<p>Creates a temporary table.</p>","parent_name":"TableOptions"},"Structs/TableOptions.html#/withoutRowID":{"name":"withoutRowID","abstract":"<p>Creates a without rowid table. See <a href=\"https://www.sqlite.org/withoutrowid.html\">https://www.sqlite.org/withoutrowid.html</a></p>","parent_name":"TableOptions"},"Structs/TableOptions.html#/strict":{"name":"strict","abstract":"<p>Creates a strict table. See <a href=\"https://www.sqlite.org/stricttables.html\">https://www.sqlite.org/stricttables.html</a></p>","parent_name":"TableOptions"},"Structs/Table.html#/tableName":{"name":"tableName","abstract":"<p>The table name</p>","parent_name":"Table"},"Structs/Table.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Create a <code>Table</code></p>","parent_name":"Table"},"Structs/Table.html#/databaseRegion(_:)":{"name":"databaseRegion(_:)","parent_name":"Table"},"Structs/Table.html#/all()":{"name":"all()","abstract":"<p>Creates a request for all rows of the table.</p>","parent_name":"Table"},"Structs/Table.html#/none()":{"name":"none()","abstract":"<p>Creates a request which fetches no row.</p>","parent_name":"Table"},"Structs/Table.html#/select(_:)":{"name":"select(_:)","abstract":"<p>Creates a request which selects <em>selection</em>.</p>","parent_name":"Table"},"Structs/Table.html#/select(sql:arguments:)":{"name":"select(sql:arguments:)","abstract":"<p>Creates a request which selects <em>sql</em>.</p>","parent_name":"Table"},"Structs/Table.html#/select(literal:)":{"name":"select(literal:)","abstract":"<p>Creates a request which selects an SQL <em>literal</em>.</p>","parent_name":"Table"},"Structs/Table.html#/select(_:as:)":{"name":"select(_:as:)","abstract":"<p>Creates a request which selects <em>selection</em>, and fetches values of","parent_name":"Table"},"Structs/Table.html#/select(sql:arguments:as:)":{"name":"select(sql:arguments:as:)","abstract":"<p>Creates a request which selects <em>sql</em>, and fetches values of","parent_name":"Table"},"Structs/Table.html#/select(literal:as:)":{"name":"select(literal:as:)","abstract":"<p>Creates a request which selects an SQL <em>literal</em>, and fetches values of","parent_name":"Table"},"Structs/Table.html#/annotated(with:)":{"name":"annotated(with:)","abstract":"<p>Creates a request which appends <em>selection</em>.</p>","parent_name":"Table"},"Structs/Table.html#/filter(_:)":{"name":"filter(_:)","abstract":"<p>Creates a request with the provided <em>predicate</em>.</p>","parent_name":"Table"},"Structs/Table.html#/filter(key:)":{"name":"filter(key:)","abstract":"<p>Creates a request with the provided primary key <em>predicate</em>.</p>","parent_name":"Table"},"Structs/Table.html#/filter(keys:)":{"name":"filter(keys:)","abstract":"<p>Creates a request with the provided primary key <em>predicate</em>.</p>","parent_name":"Table"},"Structs/Table.html#/filter(sql:arguments:)":{"name":"filter(sql:arguments:)","abstract":"<p>Creates a request with the provided <em>predicate</em>.</p>","parent_name":"Table"},"Structs/Table.html#/filter(literal:)":{"name":"filter(literal:)","abstract":"<p>Creates a request with the provided <em>predicate</em> added to the","parent_name":"Table"},"Structs/Table.html#/order(_:)":{"name":"order(_:)","abstract":"<p>Creates a request sorted according to the","parent_name":"Table"},"Structs/Table.html#/orderByPrimaryKey()":{"name":"orderByPrimaryKey()","abstract":"<p>Creates a request sorted by primary key.</p>","parent_name":"Table"},"Structs/Table.html#/order(sql:arguments:)":{"name":"order(sql:arguments:)","abstract":"<p>Creates a request sorted according to <em>sql</em>.</p>","parent_name":"Table"},"Structs/Table.html#/order(literal:)":{"name":"order(literal:)","abstract":"<p>Creates a request sorted according to an SQL <em>literal</em>.</p>","parent_name":"Table"},"Structs/Table.html#/limit(_:offset:)":{"name":"limit(_:offset:)","abstract":"<p>Creates a request which fetches <em>limit</em> rows, starting at","parent_name":"Table"},"Structs/Table.html#/aliased(_:)":{"name":"aliased(_:)","abstract":"<p>Creates a request that allows you to define expressions that target","parent_name":"Table"},"Structs/Table.html#/with(_:)":{"name":"with(_:)","abstract":"<p>Returns a request which embeds the common table expression.</p>","parent_name":"Table"},"Structs/Table.html#/selectPrimaryKey(as:)":{"name":"selectPrimaryKey(as:)","abstract":"<p>Creates a request which selects the primary key.</p>","parent_name":"Table"},"Structs/Table.html#/fetchCount(_:)":{"name":"fetchCount(_:)","abstract":"<p>The number of rows.</p>","parent_name":"Table"},"Structs/Table.html#/fetchCursor(_:)":{"name":"fetchCursor(_:)","abstract":"<p>A cursor over all records fetched from the database.</p>","parent_name":"Table"},"Structs/Table.html#/fetchAll(_:)":{"name":"fetchAll(_:)","abstract":"<p>An array of all records fetched from the database.</p>","parent_name":"Table"},"Structs/Table.html#/fetchOne(_:)":{"name":"fetchOne(_:)","abstract":"<p>The first found record.</p>","parent_name":"Table"},"Structs/Table.html#/fetchSet(_:)":{"name":"fetchSet(_:)","abstract":"<p>A set of all records fetched from the database.</p>","parent_name":"Table"},"Structs/Table.html#/belongsTo(_:key:using:)":{"name":"belongsTo(_:key:using:)","abstract":"<p>Creates a &ldquo;Belongs To&rdquo; association between Self and the destination","parent_name":"Table"},"Structs/Table.html#/hasMany(_:key:using:)":{"name":"hasMany(_:key:using:)","abstract":"<p>Creates a &ldquo;Has many&rdquo; association between Self and the destination type,","parent_name":"Table"},"Structs/Table.html#/hasOne(_:key:using:)":{"name":"hasOne(_:key:using:)","abstract":"<p>Creates a &ldquo;Has one&rdquo; association between Self and the destination type,","parent_name":"Table"},"Structs/Table.html#/association(to:on:)":{"name":"association(to:on:)","abstract":"<p>Creates an association to a common table expression that you can join","parent_name":"Table"},"Structs/Table.html#/association(to:)":{"name":"association(to:)","abstract":"<p>Creates an association to a common table expression that you can join","parent_name":"Table"},"Structs/Table.html#/hasMany(_:through:using:key:)":{"name":"hasMany(_:through:using:key:)","abstract":"<p>Creates a &ldquo;Has Many Through&rdquo; association between Self and the","parent_name":"Table"},"Structs/Table.html#/hasOne(_:through:using:key:)":{"name":"hasOne(_:through:using:key:)","abstract":"<p>Creates a &ldquo;Has One Through&rdquo; association between Self and the","parent_name":"Table"},"Structs/Table.html#/including(all:)":{"name":"including(all:)","abstract":"<p>Creates a request that prefetches an association.</p>","parent_name":"Table"},"Structs/Table.html#/including(optional:)":{"name":"including(optional:)","abstract":"<p>Creates a request that includes an association. The columns of the","parent_name":"Table"},"Structs/Table.html#/including(required:)":{"name":"including(required:)","abstract":"<p>Creates a request that includes an association. The columns of the","parent_name":"Table"},"Structs/Table.html#/joining(optional:)":{"name":"joining(optional:)","abstract":"<p>Creates a request that includes an association. The columns of the","parent_name":"Table"},"Structs/Table.html#/joining(required:)":{"name":"joining(required:)","abstract":"<p>Creates a request that includes an association. The columns of the","parent_name":"Table"},"Structs/Table.html#/annotated(withOptional:)":{"name":"annotated(withOptional:)","abstract":"<p>Creates a request which appends <em>columns of an associated record</em> to","parent_name":"Table"},"Structs/Table.html#/annotated(withRequired:)":{"name":"annotated(withRequired:)","abstract":"<p>Creates a request which appends <em>columns of an associated record</em> to","parent_name":"Table"},"Structs/Table.html#/having(_:)":{"name":"having(_:)","abstract":"<p>Creates a request with the provided aggregate <em>predicate</em>.</p>","parent_name":"Table"},"Structs/Table.html#/deleteAll(_:)":{"name":"deleteAll(_:)","abstract":"<p>Deletes all rows, and returns the number of deleted rows.</p>","parent_name":"Table"},"Structs/Table.html#/exists(_:key:)":{"name":"exists(_:key:)","abstract":"<p>Returns whether a row exists for this primary key.</p>","parent_name":"Table"},"Structs/Table.html#/deleteAll(_:keys:)":{"name":"deleteAll(_:keys:)","abstract":"<p>Delete rows identified by their primary keys, and returns the number of","parent_name":"Table"},"Structs/Table.html#/deleteOne(_:key:)":{"name":"deleteOne(_:key:)","abstract":"<p>Delete a row, identified by its primary key, and returns whether a","parent_name":"Table"},"Structs/Table.html#/updateAll(_:onConflict:_:)":{"name":"updateAll(_:onConflict:_:)","abstract":"<p>Updates all rows, and returns the number of updated rows..</p>","parent_name":"Table"},"Structs/AllColumns.html#/init()":{"name":"init()","abstract":"<p>The <code>*</code> selection.</p>","parent_name":"AllColumns"},"Structs/AllColumns.html#/sqlSelection":{"name":"sqlSelection","parent_name":"AllColumns"},"Structs/PersistenceContainer.html#/subscript(_:)":{"name":"subscript(_:)","abstract":"<p>Accesses the value associated with the given column.</p>","parent_name":"PersistenceContainer"},"Structs/SQLExpression/AssociativeBinaryOperator.html#/add":{"name":"add","abstract":"<p>The <code>+</code> binary operator</p>","parent_name":"AssociativeBinaryOperator"},"Structs/SQLExpression/AssociativeBinaryOperator.html#/multiply":{"name":"multiply","abstract":"<p>The <code>*</code> binary operator</p>","parent_name":"AssociativeBinaryOperator"},"Structs/SQLExpression/AssociativeBinaryOperator.html#/and":{"name":"and","abstract":"<p>The <code>AND</code> binary operator</p>","parent_name":"AssociativeBinaryOperator"},"Structs/SQLExpression/AssociativeBinaryOperator.html#/or":{"name":"or","abstract":"<p>The <code>OR</code> binary operator</p>","parent_name":"AssociativeBinaryOperator"},"Structs/SQLExpression/AssociativeBinaryOperator.html#/concat":{"name":"concat","abstract":"<p>The <code>||</code> string concatenation operator</p>","parent_name":"AssociativeBinaryOperator"},"Structs/SQLExpression/AssociativeBinaryOperator.html":{"name":"AssociativeBinaryOperator","abstract":"<p><code>AssociativeBinaryOperator</code> is an associative binary operator,","parent_name":"SQLExpression"},"Structs/QueryInterfaceRequest.html#/sqlSubquery":{"name":"sqlSubquery","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/fetchCount(_:)":{"name":"fetchCount(_:)","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/makePreparedRequest(_:forSingleResult:)":{"name":"makePreparedRequest(_:forSingleResult:)","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/selectWhenConnected(_:)":{"name":"selectWhenConnected(_:)","abstract":"<p>Creates a request which selects <em>selection promise</em>.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/select(_:as:)":{"name":"select(_:as:)","abstract":"<p>Creates a request which selects <em>selection</em>, and fetches values of","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/select(sql:arguments:as:)":{"name":"select(sql:arguments:as:)","abstract":"<p>Creates a request which selects <em>sql</em>, and fetches values of","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/select(literal:as:)":{"name":"select(literal:as:)","abstract":"<p>Creates a request which selects an SQL <em>literal</em>, and fetches values of","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/selectPrimaryKey(as:)":{"name":"selectPrimaryKey(as:)","abstract":"<p>Creates a request which selects the primary key.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/annotatedWhenConnected(with:)":{"name":"annotatedWhenConnected(with:)","abstract":"<p>Creates a request which appends <em>selection promise</em>.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/filterWhenConnected(_:)":{"name":"filterWhenConnected(_:)","abstract":"<p>Creates a request with the provided <em>predicate promise</em> added to the","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/orderWhenConnected(_:)":{"name":"orderWhenConnected(_:)","abstract":"<p>Creates a request with the provided <em>orderings promise</em>.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/reversed()":{"name":"reversed()","abstract":"<p>Creates a request that reverses applied orderings.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/unordered()":{"name":"unordered()","abstract":"<p>Creates a request without any ordering.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/groupWhenConnected(_:)":{"name":"groupWhenConnected(_:)","abstract":"<p>Creates a request grouped according to <em>expressions promise</em>.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/havingWhenConnected(_:)":{"name":"havingWhenConnected(_:)","abstract":"<p>Creates a request with the provided <em>predicate promise</em> added to the","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/aliased(_:)":{"name":"aliased(_:)","abstract":"<p>Creates a request that allows you to define expressions that target","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/distinct()":{"name":"distinct()","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/limit(_:offset:)":{"name":"limit(_:offset:)","abstract":"<p>Creates a request which fetches <em>limit</em> rows, starting at <em>offset</em>.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/with(_:)":{"name":"with(_:)","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/asRequest(of:)":{"name":"asRequest(of:)","abstract":"<p>Creates a request bound to type RowDecoder.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/isEmpty(_:)":{"name":"isEmpty(_:)","abstract":"<p>Returns true if the request matches no row in the database.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/deleteAll(_:)":{"name":"deleteAll(_:)","abstract":"<p>Deletes matching rows, and returns the number of deleted rows.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/deleteAndFetchStatement(_:selection:)":{"name":"deleteAndFetchStatement(_:selection:)","abstract":"<p>Returns a <code>DELETE ... RETURNING ...</code> prepared statement.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/deleteAndFetchCursor(_:)":{"name":"deleteAndFetchCursor(_:)","abstract":"<p>Returns a cursor over a <code>DELETE ... RETURNING ...</code> statement.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/deleteAndFetchAll(_:)":{"name":"deleteAndFetchAll(_:)","abstract":"<p>Executes a <code>DELETE ... RETURNING ...</code> statement and returns the","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/deleteAndFetchSet(_:)":{"name":"deleteAndFetchSet(_:)","abstract":"<p>Executes a <code>DELETE ... RETURNING ...</code> statement and returns the","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/updateAll(_:onConflict:_:)":{"name":"updateAll(_:onConflict:_:)","abstract":"<p>Updates matching rows, and returns the number of updated rows.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/updateAndFetchStatement(_:onConflict:_:selection:)":{"name":"updateAndFetchStatement(_:onConflict:_:selection:)","abstract":"<p>Returns an <code>UPDATE ... RETURNING ...</code> prepared statement.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/updateAndFetchCursor(_:onConflict:_:)":{"name":"updateAndFetchCursor(_:onConflict:_:)","abstract":"<p>Returns a cursor over an <code>UPDATE ... RETURNING ...</code> statement.</p>","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/updateAndFetchAll(_:onConflict:_:)":{"name":"updateAndFetchAll(_:onConflict:_:)","abstract":"<p>Execute an <code>UPDATE ... RETURNING ...</code> statement and returns the","parent_name":"QueryInterfaceRequest"},"Structs/QueryInterfaceRequest.html#/updateAndFetchSet(_:onConflict:_:)":{"name":"updateAndFetchSet(_:onConflict:_:)","abstract":"<p>Execute an <code>UPDATE ... RETURNING ...</code> statement and returns the","parent_name":"QueryInterfaceRequest"},"Structs/CommonTableExpression.html#/tableName":{"name":"tableName","abstract":"<p>The table name of the common table expression.</p>","parent_name":"CommonTableExpression"},"Structs/CommonTableExpression.html#/init(recursive:named:columns:request:)":{"name":"init(recursive:named:columns:request:)","abstract":"<p>Creates a common table expression from a request.</p>","parent_name":"CommonTableExpression"},"Structs/CommonTableExpression.html#/init(recursive:named:columns:sql:arguments:)":{"name":"init(recursive:named:columns:sql:arguments:)","abstract":"<p>Creates a common table expression from an SQL string and","parent_name":"CommonTableExpression"},"Structs/CommonTableExpression.html#/init(recursive:named:columns:literal:)":{"name":"init(recursive:named:columns:literal:)","abstract":"<p>Creates a common table expression from an SQL <em>literal</em>.</p>","parent_name":"CommonTableExpression"},"Structs/CommonTableExpression.html#/all()":{"name":"all()","abstract":"<p>Creates a request for all rows of the common table expression.</p>","parent_name":"CommonTableExpression"},"Structs/CommonTableExpression.html#/contains(_:)":{"name":"contains(_:)","abstract":"<p>An SQL expression that checks the inclusion of an expression in a","parent_name":"CommonTableExpression"},"Structs/CommonTableExpression.html#/association(to:on:)":{"name":"association(to:on:)","abstract":"<p>Creates an association to a common table expression that you can join","parent_name":"CommonTableExpression"},"Structs/CommonTableExpression.html#/association(to:)":{"name":"association(to:)","abstract":"<p>Creates an association to a common table expression that you can join","parent_name":"CommonTableExpression"},"Structs/AssociationAggregate.html#/forKey(_:)":{"name":"forKey(_:)","abstract":"<p>Returns an aggregate that is selected in a column with the given name.</p>","parent_name":"AssociationAggregate"},"Structs/ForeignKey.html#/init(_:to:)":{"name":"init(_:to:)","abstract":"<p>Creates a ForeignKey intended to define a record association.</p>","parent_name":"ForeignKey"},"Structs/DatabaseMigrator/ForeignKeyChecks.html#/deferred":{"name":"deferred","abstract":"<p>The migration runs with disabled foreign keys, until foreign keys","parent_name":"ForeignKeyChecks"},"Structs/DatabaseMigrator/ForeignKeyChecks.html#/immediate":{"name":"immediate","abstract":"<p>The migration runs for foreign keys on.</p>","parent_name":"ForeignKeyChecks"},"Structs/DatabaseMigrator/ForeignKeyChecks.html":{"name":"ForeignKeyChecks","abstract":"<p>Controls how migrations handle foreign keys constraints.</p>","parent_name":"DatabaseMigrator"},"Structs/DatabaseMigrator.html#/eraseDatabaseOnSchemaChange":{"name":"eraseDatabaseOnSchemaChange","abstract":"<p>When the <code>eraseDatabaseOnSchemaChange</code> flag is true, the migrator will","parent_name":"DatabaseMigrator"},"Structs/DatabaseMigrator.html#/init()":{"name":"init()","abstract":"<p>A new migrator.</p>","parent_name":"DatabaseMigrator"},"Structs/DatabaseMigrator.html#/disablingDeferredForeignKeyChecks()":{"name":"disablingDeferredForeignKeyChecks()","abstract":"<p>Returns a migrator that will not perform deferred foreign key checks in","parent_name":"DatabaseMigrator"},"Structs/DatabaseMigrator.html#/registerMigration(_:foreignKeyChecks:migrate:)":{"name":"registerMigration(_:foreignKeyChecks:migrate:)","abstract":"<p>Registers a migration.</p>","parent_name":"DatabaseMigrator"},"Structs/DatabaseMigrator.html#/migrate(_:)":{"name":"migrate(_:)","abstract":"<p>Iterate migrations in the same order as they were registered. If a","parent_name":"DatabaseMigrator"},"Structs/DatabaseMigrator.html#/migrate(_:upTo:)":{"name":"migrate(_:upTo:)","abstract":"<p>Iterate migrations in the same order as they were registered, up to the","parent_name":"DatabaseMigrator"},"Structs/DatabaseMigrator.html#/asyncMigrate(_:completion:)":{"name":"asyncMigrate(_:completion:)","abstract":"<p>Iterate migrations in the same order as they were registered. If a","parent_name":"DatabaseMigrator"},"Structs/DatabaseMigrator.html#/migrations":{"name":"migrations","abstract":"<p>The list of registered migration identifiers, in the same order as they","parent_name":"DatabaseMigrator"},"Structs/DatabaseMigrator.html#/appliedMigrations(_:)":{"name":"appliedMigrations(_:)","abstract":"<p>Returns the identifiers of registered and applied migrations, in the","parent_name":"DatabaseMigrator"},"Structs/DatabaseMigrator.html#/appliedIdentifiers(_:)":{"name":"appliedIdentifiers(_:)","abstract":"<p>Returns the applied migration identifiers, even unregistered ones.</p>","parent_name":"DatabaseMigrator"},"Structs/DatabaseMigrator.html#/completedMigrations(_:)":{"name":"completedMigrations(_:)","abstract":"<p>Returns the identifiers of completed migrations, of which all previous","parent_name":"DatabaseMigrator"},"Structs/DatabaseMigrator.html#/hasCompletedMigrations(_:)":{"name":"hasCompletedMigrations(_:)","abstract":"<p>Returns true if all migrations are applied.</p>","parent_name":"DatabaseMigrator"},"Structs/DatabaseMigrator.html#/hasBeenSuperseded(_:)":{"name":"hasBeenSuperseded(_:)","abstract":"<p>Returns whether database contains unknown migration","parent_name":"DatabaseMigrator"},"Structs/FTS5TokenFlags.html#/rawValue":{"name":"rawValue","parent_name":"FTS5TokenFlags"},"Structs/FTS5TokenFlags.html#/init(rawValue:)":{"name":"init(rawValue:)","parent_name":"FTS5TokenFlags"},"Structs/FTS5TokenFlags.html#/colocated":{"name":"colocated","abstract":"<p>FTS5_TOKEN_COLOCATED</p>","parent_name":"FTS5TokenFlags"},"Structs/FTS5TokenizerDescriptor.html#/components":{"name":"components","abstract":"<p>The tokenizer components</p>","parent_name":"FTS5TokenizerDescriptor"},"Structs/FTS5TokenizerDescriptor.html#/init(components:)":{"name":"init(components:)","abstract":"<p>Creates an FTS5 tokenizer descriptor.</p>","parent_name":"FTS5TokenizerDescriptor"},"Structs/FTS5TokenizerDescriptor.html#/ascii(separators:tokenCharacters:)":{"name":"ascii(separators:tokenCharacters:)","abstract":"<p>The &ldquo;ascii&rdquo; tokenizer</p>","parent_name":"FTS5TokenizerDescriptor"},"Structs/FTS5TokenizerDescriptor.html#/porter(wrapping:)":{"name":"porter(wrapping:)","abstract":"<p>See <a href=\"https://www.sqlite.org/fts5.html#porter_tokenizer\">https://www.sqlite.org/fts5.html#porter_tokenizer</a></p>","parent_name":"FTS5TokenizerDescriptor"},"Structs/FTS5TokenizerDescriptor.html#/unicode61(diacritics:separators:tokenCharacters:)":{"name":"unicode61(diacritics:separators:tokenCharacters:)","abstract":"<p>An &ldquo;unicode61&rdquo; tokenizer</p>","parent_name":"FTS5TokenizerDescriptor"},"Structs/FTS5Tokenization.html#/rawValue":{"name":"rawValue","parent_name":"FTS5Tokenization"},"Structs/FTS5Tokenization.html#/init(rawValue:)":{"name":"init(rawValue:)","parent_name":"FTS5Tokenization"},"Structs/FTS5Tokenization.html#/query":{"name":"query","abstract":"<p>FTS5_TOKENIZE_QUERY</p>","parent_name":"FTS5Tokenization"},"Structs/FTS5Tokenization.html#/prefix":{"name":"prefix","abstract":"<p>FTS5_TOKENIZE_PREFIX</p>","parent_name":"FTS5Tokenization"},"Structs/FTS5Tokenization.html#/document":{"name":"document","abstract":"<p>FTS5_TOKENIZE_DOCUMENT</p>","parent_name":"FTS5Tokenization"},"Structs/FTS5Tokenization.html#/aux":{"name":"aux","abstract":"<p>FTS5_TOKENIZE_AUX</p>","parent_name":"FTS5Tokenization"},"Structs/FTS5Pattern.html#/rawPattern":{"name":"rawPattern","abstract":"<p>The raw pattern string. Guaranteed to be a valid FTS5 pattern.</p>","parent_name":"FTS5Pattern"},"Structs/FTS5Pattern.html#/init(matchingAnyTokenIn:)":{"name":"init(matchingAnyTokenIn:)","abstract":"<p>Creates a pattern that matches any token found in the input string;","parent_name":"FTS5Pattern"},"Structs/FTS5Pattern.html#/init(matchingAllTokensIn:)":{"name":"init(matchingAllTokensIn:)","abstract":"<p>Creates a pattern that matches all tokens found in the input string;","parent_name":"FTS5Pattern"},"Structs/FTS5Pattern.html#/init(matchingAllPrefixesIn:)":{"name":"init(matchingAllPrefixesIn:)","abstract":"<p>Creates a pattern that matches all token prefixes found in the input","parent_name":"FTS5Pattern"},"Structs/FTS5Pattern.html#/init(matchingPhrase:)":{"name":"init(matchingPhrase:)","abstract":"<p>Creates a pattern that matches a contiguous string; returns nil if no","parent_name":"FTS5Pattern"},"Structs/FTS5Pattern.html#/init(matchingPrefixPhrase:)":{"name":"init(matchingPrefixPhrase:)","abstract":"<p>Creates a pattern that matches the prefix of an indexed document;","parent_name":"FTS5Pattern"},"Structs/FTS5Pattern.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"FTS5Pattern"},"Structs/FTS5Pattern.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an FTS5Pattern initialized from <em>dbValue</em>, if it","parent_name":"FTS5Pattern"},"Structs/Column.html#/rowID":{"name":"rowID","abstract":"<p>The hidden rowID column</p>","parent_name":"Column"},"Structs/Column.html#/name":{"name":"name","abstract":"<p>The name of the column</p>","parent_name":"Column"},"Structs/Column.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates a column given its name.</p>","parent_name":"Column"},"Structs/Column.html#/rank":{"name":"rank","abstract":"<p>The FTS5 rank column</p>","parent_name":"Column"},"Structs/FTS5/Diacritics.html#/keep":{"name":"keep","abstract":"<p>Do not remove diacritics from Latin script characters. This","parent_name":"Diacritics"},"Structs/FTS5/Diacritics.html#/removeLegacy":{"name":"removeLegacy","abstract":"<p>Remove diacritics from Latin script characters. This","parent_name":"Diacritics"},"Structs/FTS5/Diacritics.html#/remove":{"name":"remove","abstract":"<p>Remove diacritics from Latin script characters. This","parent_name":"Diacritics"},"Structs/FTS5/Diacritics.html":{"name":"Diacritics","abstract":"<p>Options for Latin script characters. Matches the raw &ldquo;remove_diacritics&rdquo;","parent_name":"FTS5"},"Structs/FTS5.html#/init()":{"name":"init()","abstract":"<p>Creates a FTS5 module suitable for the Database","parent_name":"FTS5"},"Structs/FTS5.html#/moduleName":{"name":"moduleName","abstract":"<p>The virtual table module name</p>","parent_name":"FTS5"},"Structs/FTS5.html#/makeTableDefinition(configuration:)":{"name":"makeTableDefinition(configuration:)","abstract":"<p>Reserved; part of the VirtualTableModule protocol.</p>","parent_name":"FTS5"},"Structs/FTS5.html#/moduleArguments(for:in:)":{"name":"moduleArguments(for:in:)","abstract":"<p>Don&rsquo;t use this method.</p>","parent_name":"FTS5"},"Structs/FTS5.html#/database(_:didCreate:using:)":{"name":"database(_:didCreate:using:)","abstract":"<p>Reserved; part of the VirtualTableModule protocol.</p>","parent_name":"FTS5"},"Structs/FTS4.html#/init()":{"name":"init()","abstract":"<p>Creates a FTS4 module suitable for the Database","parent_name":"FTS4"},"Structs/FTS4.html#/moduleName":{"name":"moduleName","abstract":"<p>The virtual table module name</p>","parent_name":"FTS4"},"Structs/FTS4.html#/makeTableDefinition(configuration:)":{"name":"makeTableDefinition(configuration:)","abstract":"<p>Reserved; part of the VirtualTableModule protocol.</p>","parent_name":"FTS4"},"Structs/FTS4.html#/moduleArguments(for:in:)":{"name":"moduleArguments(for:in:)","abstract":"<p>Reserved; part of the VirtualTableModule protocol.</p>","parent_name":"FTS4"},"Structs/FTS4.html#/database(_:didCreate:using:)":{"name":"database(_:didCreate:using:)","abstract":"<p>Reserved; part of the VirtualTableModule protocol.</p>","parent_name":"FTS4"},"Structs/FTS3TokenizerDescriptor.html#/simple":{"name":"simple","abstract":"<p>The &ldquo;simple&rdquo; tokenizer.</p>","parent_name":"FTS3TokenizerDescriptor"},"Structs/FTS3TokenizerDescriptor.html#/porter":{"name":"porter","abstract":"<p>The &ldquo;porter&rdquo; tokenizer.</p>","parent_name":"FTS3TokenizerDescriptor"},"Structs/FTS3TokenizerDescriptor.html#/unicode61(diacritics:separators:tokenCharacters:)":{"name":"unicode61(diacritics:separators:tokenCharacters:)","abstract":"<p>The &ldquo;unicode61&rdquo; tokenizer.</p>","parent_name":"FTS3TokenizerDescriptor"},"Structs/FTS3Pattern.html#/rawPattern":{"name":"rawPattern","abstract":"<p>The raw pattern string. Guaranteed to be a valid FTS3/4 pattern.</p>","parent_name":"FTS3Pattern"},"Structs/FTS3Pattern.html#/init(rawPattern:)":{"name":"init(rawPattern:)","abstract":"<p>Creates a pattern from a raw pattern string; throws DatabaseError on","parent_name":"FTS3Pattern"},"Structs/FTS3Pattern.html#/init(matchingAnyTokenIn:)":{"name":"init(matchingAnyTokenIn:)","abstract":"<p>Creates a pattern that matches any token found in the input string;","parent_name":"FTS3Pattern"},"Structs/FTS3Pattern.html#/init(matchingAllTokensIn:)":{"name":"init(matchingAllTokensIn:)","abstract":"<p>Creates a pattern that matches all tokens found in the input string;","parent_name":"FTS3Pattern"},"Structs/FTS3Pattern.html#/init(matchingAllPrefixesIn:)":{"name":"init(matchingAllPrefixesIn:)","abstract":"<p>Creates a pattern that matches all token prefixes found in the input","parent_name":"FTS3Pattern"},"Structs/FTS3Pattern.html#/init(matchingPhrase:)":{"name":"init(matchingPhrase:)","abstract":"<p>Creates a pattern that matches a contiguous string; returns nil if no","parent_name":"FTS3Pattern"},"Structs/FTS3Pattern.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"FTS3Pattern"},"Structs/FTS3Pattern.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an FTS3Pattern initialized from <em>dbValue</em>, if it contains","parent_name":"FTS3Pattern"},"Structs/FTS3/Diacritics.html#/keep":{"name":"keep","abstract":"<p>Do not remove diacritics from Latin script characters. This","parent_name":"Diacritics"},"Structs/FTS3/Diacritics.html#/removeLegacy":{"name":"removeLegacy","abstract":"<p>Remove diacritics from Latin script characters. This","parent_name":"Diacritics"},"Structs/FTS3/Diacritics.html#/remove":{"name":"remove","abstract":"<p>Remove diacritics from Latin script characters. This","parent_name":"Diacritics"},"Structs/FTS3/Diacritics.html":{"name":"Diacritics","abstract":"<p>Options for Latin script characters. Matches the raw &ldquo;remove_diacritics&rdquo;","parent_name":"FTS3"},"Structs/FTS3.html#/init()":{"name":"init()","abstract":"<p>Creates a FTS3 module suitable for the Database","parent_name":"FTS3"},"Structs/FTS3.html#/tokenize(_:withTokenizer:)":{"name":"tokenize(_:withTokenizer:)","abstract":"<p>Returns an array of tokens found in the string argument.</p>","parent_name":"FTS3"},"Structs/FTS3.html#/moduleName":{"name":"moduleName","abstract":"<p>The virtual table module name</p>","parent_name":"FTS3"},"Structs/FTS3.html#/makeTableDefinition(configuration:)":{"name":"makeTableDefinition(configuration:)","abstract":"<p>Reserved; part of the VirtualTableModule protocol.</p>","parent_name":"FTS3"},"Structs/FTS3.html#/moduleArguments(for:in:)":{"name":"moduleArguments(for:in:)","abstract":"<p>Reserved; part of the VirtualTableModule protocol.</p>","parent_name":"FTS3"},"Structs/FTS3.html#/database(_:didCreate:using:)":{"name":"database(_:didCreate:using:)","abstract":"<p>Reserved; part of the VirtualTableModule protocol.</p>","parent_name":"FTS3"},"Structs/DatabasePreUpdateEvent/Kind.html#/insert":{"name":"insert","abstract":"<p>SQLITE_INSERT</p>","parent_name":"Kind"},"Structs/DatabasePreUpdateEvent/Kind.html#/delete":{"name":"delete","abstract":"<p>SQLITE_DELETE</p>","parent_name":"Kind"},"Structs/DatabasePreUpdateEvent/Kind.html#/update":{"name":"update","abstract":"<p>SQLITE_UPDATE</p>","parent_name":"Kind"},"Structs/DatabasePreUpdateEvent/Kind.html":{"name":"Kind","abstract":"<p>An event kind</p>","parent_name":"DatabasePreUpdateEvent"},"Structs/DatabasePreUpdateEvent.html#/kind":{"name":"kind","abstract":"<p>The event kind</p>","parent_name":"DatabasePreUpdateEvent"},"Structs/DatabasePreUpdateEvent.html#/databaseName":{"name":"databaseName","abstract":"<p>The database name</p>","parent_name":"DatabasePreUpdateEvent"},"Structs/DatabasePreUpdateEvent.html#/tableName":{"name":"tableName","abstract":"<p>The table name</p>","parent_name":"DatabasePreUpdateEvent"},"Structs/DatabasePreUpdateEvent.html#/count":{"name":"count","abstract":"<p>The number of columns in the row that is being inserted, updated, or deleted.</p>","parent_name":"DatabasePreUpdateEvent"},"Structs/DatabasePreUpdateEvent.html#/depth":{"name":"depth","abstract":"<p>1  for inserts, updates, or deletes invoked by top-level triggers;","parent_name":"DatabasePreUpdateEvent"},"Structs/DatabasePreUpdateEvent.html#/initialRowID":{"name":"initialRowID","abstract":"<p>The initial rowID of the row being changed for .Update and .Delete changes,","parent_name":"DatabasePreUpdateEvent"},"Structs/DatabasePreUpdateEvent.html#/finalRowID":{"name":"finalRowID","abstract":"<p>The final rowID of the row being changed for .Update and .Insert changes,","parent_name":"DatabasePreUpdateEvent"},"Structs/DatabasePreUpdateEvent.html#/initialDatabaseValues":{"name":"initialDatabaseValues","abstract":"<p>The initial database values in the row.</p>","parent_name":"DatabasePreUpdateEvent"},"Structs/DatabasePreUpdateEvent.html#/initialDatabaseValue(atIndex:)":{"name":"initialDatabaseValue(atIndex:)","abstract":"<p>Returns the initial <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/DatabaseValue.html\">DatabaseValue</a></code> at given index.</p>","parent_name":"DatabasePreUpdateEvent"},"Structs/DatabasePreUpdateEvent.html#/finalDatabaseValues":{"name":"finalDatabaseValues","abstract":"<p>The final database values in the row.</p>","parent_name":"DatabasePreUpdateEvent"},"Structs/DatabasePreUpdateEvent.html#/finalDatabaseValue(atIndex:)":{"name":"finalDatabaseValue(atIndex:)","abstract":"<p>Returns the final <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/DatabaseValue.html\">DatabaseValue</a></code> at given index.</p>","parent_name":"DatabasePreUpdateEvent"},"Structs/DatabasePreUpdateEvent.html#/copy()":{"name":"copy()","abstract":"<p>Returns an event that can be stored:</p>","parent_name":"DatabasePreUpdateEvent"},"Structs/DatabaseEvent/Kind.html#/insert":{"name":"insert","abstract":"<p>SQLITE_INSERT</p>","parent_name":"Kind"},"Structs/DatabaseEvent/Kind.html#/delete":{"name":"delete","abstract":"<p>SQLITE_DELETE</p>","parent_name":"Kind"},"Structs/DatabaseEvent/Kind.html#/update":{"name":"update","abstract":"<p>SQLITE_UPDATE</p>","parent_name":"Kind"},"Structs/DatabaseEvent/Kind.html":{"name":"Kind","abstract":"<p>An event kind</p>","parent_name":"DatabaseEvent"},"Structs/DatabaseEvent.html#/kind":{"name":"kind","abstract":"<p>The event kind</p>","parent_name":"DatabaseEvent"},"Structs/DatabaseEvent.html#/databaseName":{"name":"databaseName","abstract":"<p>The database name</p>","parent_name":"DatabaseEvent"},"Structs/DatabaseEvent.html#/tableName":{"name":"tableName","abstract":"<p>The table name</p>","parent_name":"DatabaseEvent"},"Structs/DatabaseEvent.html#/rowID":{"name":"rowID","abstract":"<p>The rowID of the changed row.</p>","parent_name":"DatabaseEvent"},"Structs/DatabaseEvent.html#/copy()":{"name":"copy()","abstract":"<p>Returns an event that can be stored:</p>","parent_name":"DatabaseEvent"},"Structs/DatabaseDateComponents/Format.html#/YMD":{"name":"YMD","abstract":"<p>The format &ldquo;yyyy-MM-dd&rdquo;.</p>","parent_name":"Format"},"Structs/DatabaseDateComponents/Format.html#/YMD_HM":{"name":"YMD_HM","abstract":"<p>The format &ldquo;yyyy-MM-dd HH:mm&rdquo;.</p>","parent_name":"Format"},"Structs/DatabaseDateComponents/Format.html#/YMD_HMS":{"name":"YMD_HMS","abstract":"<p>The format &ldquo;yyyy-MM-dd HH:mm:ss&rdquo;.</p>","parent_name":"Format"},"Structs/DatabaseDateComponents/Format.html#/YMD_HMSS":{"name":"YMD_HMSS","abstract":"<p>The format &ldquo;yyyy-MM-dd HH:mm:ss.SSS&rdquo;.</p>","parent_name":"Format"},"Structs/DatabaseDateComponents/Format.html#/HM":{"name":"HM","abstract":"<p>The format &ldquo;HH:mm&rdquo;.</p>","parent_name":"Format"},"Structs/DatabaseDateComponents/Format.html#/HMS":{"name":"HMS","abstract":"<p>The format &ldquo;HH:mm:ss&rdquo;.</p>","parent_name":"Format"},"Structs/DatabaseDateComponents/Format.html#/HMSS":{"name":"HMSS","abstract":"<p>The format &ldquo;HH:mm:ss.SSS&rdquo;.</p>","parent_name":"Format"},"Structs/DatabaseDateComponents/Format.html":{"name":"Format","abstract":"<p>The available formats for reading and storing date components.</p>","parent_name":"DatabaseDateComponents"},"Structs/DatabaseDateComponents.html#/dateComponents":{"name":"dateComponents","abstract":"<p>The date components</p>","parent_name":"DatabaseDateComponents"},"Structs/DatabaseDateComponents.html#/format":{"name":"format","abstract":"<p>The database format</p>","parent_name":"DatabaseDateComponents"},"Structs/DatabaseDateComponents.html#/init(_:format:)":{"name":"init(_:format:)","abstract":"<p>Creates a DatabaseDateComponents from a DateComponents and a format.</p>","parent_name":"DatabaseDateComponents"},"Structs/DatabaseDateComponents.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"DatabaseDateComponents"},"Structs/DatabaseDateComponents.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"DatabaseDateComponents"},"Structs/DatabaseDateComponents.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns a DatabaseDateComponents if <em>dbValue</em> contains a","parent_name":"DatabaseDateComponents"},"Structs/DatabaseDateComponents.html#/init(from:)":{"name":"init(from:)","abstract":"<p>Creates a new instance by decoding from the given decoder.</p>","parent_name":"DatabaseDateComponents"},"Structs/DatabaseDateComponents.html#/encode(to:)":{"name":"encode(to:)","abstract":"<p>Encodes this value into the given encoder.</p>","parent_name":"DatabaseDateComponents"},"Structs/StatementArguments.html#/isEmpty":{"name":"isEmpty","parent_name":"StatementArguments"},"Structs/StatementArguments.html#/init()":{"name":"init()","abstract":"<p>Creates empty StatementArguments.</p>","parent_name":"StatementArguments"},"Structs/StatementArguments.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates statement arguments from a sequence of optional values.</p>","parent_name":"StatementArguments"},"Structs/StatementArguments.html#/append(contentsOf:)":{"name":"append(contentsOf:)","abstract":"<p>Extends statement arguments with other arguments.</p>","parent_name":"StatementArguments"},"Structs/StatementArguments.html#/+(_:_:)":{"name":"+(_:_:)","abstract":"<p>Creates a new StatementArguments by extending the left-hand size","parent_name":"StatementArguments"},"Structs/StatementArguments.html#/&+(_:_:)":{"name":"&+(_:_:)","abstract":"<p>Creates a new StatementArguments by extending the left-hand size","parent_name":"StatementArguments"},"Structs/StatementArguments.html#/+=(_:_:)":{"name":"+=(_:_:)","abstract":"<p>Extends the left-hand size arguments with the right-hand side arguments.</p>","parent_name":"StatementArguments"},"Structs/StatementArguments.html#/init(arrayLiteral:)":{"name":"init(arrayLiteral:)","abstract":"<p>Returns a StatementArguments from an array literal:</p>","parent_name":"StatementArguments"},"Structs/StatementArguments.html#/init(dictionaryLiteral:)":{"name":"init(dictionaryLiteral:)","abstract":"<p>Returns a StatementArguments from a dictionary literal:</p>","parent_name":"StatementArguments"},"Structs/SQLRequest.html#/adapter":{"name":"adapter","abstract":"<p>The request adapter</p>","parent_name":"SQLRequest"},"Structs/SQLRequest.html#/init(sql:arguments:adapter:cached:)":{"name":"init(sql:arguments:adapter:cached:)","abstract":"<p>Creates a request from an SQL string, optional arguments, and","parent_name":"SQLRequest"},"Structs/SQLRequest.html#/init(literal:adapter:cached:)":{"name":"init(literal:adapter:cached:)","abstract":"<p>Creates a request from an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/SQL.html\">SQL</a></code> literal, and optional row adapter.</p>","parent_name":"SQLRequest"},"Structs/SQLRequest.html#/sqlSubquery":{"name":"sqlSubquery","parent_name":"SQLRequest"},"Structs/SQLRequest.html#/fetchCount(_:)":{"name":"fetchCount(_:)","parent_name":"SQLRequest"},"Structs/SQLRequest.html#/makePreparedRequest(_:forSingleResult:)":{"name":"makePreparedRequest(_:forSingleResult:)","parent_name":"SQLRequest"},"Structs/SQLRequest.html#/init(unicodeScalarLiteral:)":{"name":"init(unicodeScalarLiteral:)","abstract":"<p>:nodoc</p>","parent_name":"SQLRequest"},"Structs/SQL.html#/init(sql:arguments:)":{"name":"init(sql:arguments:)","abstract":"<p>Creates an <code>SQL</code> literal from a plain SQL string, and","parent_name":"SQL"},"Structs/SQL.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates an <code>SQL</code> literal from an SQL expression.</p>","parent_name":"SQL"},"Structs/SQL.html#/isEmpty":{"name":"isEmpty","abstract":"<p>Returns true if this literal generates an empty SQL string</p>","parent_name":"SQL"},"Structs/SQL.html#/build(_:)":{"name":"build(_:)","abstract":"<p>Turn a <code>SQL</code> literal into raw SQL and arguments.</p>","parent_name":"SQL"},"Structs/SQL.html#/+(_:_:)":{"name":"+(_:_:)","abstract":"<p>Returns the <code>SQL</code> literal produced by the concatenation of two literals.</p>","parent_name":"SQL"},"Structs/SQL.html#/+=(_:_:)":{"name":"+=(_:_:)","abstract":"<p>Appends an <code>SQL</code> literal to the receiver.</p>","parent_name":"SQL"},"Structs/SQL.html#/append(literal:)":{"name":"append(literal:)","abstract":"<p>Appends an <code>SQL</code> literal to the receiver.</p>","parent_name":"SQL"},"Structs/SQL.html#/append(sql:arguments:)":{"name":"append(sql:arguments:)","abstract":"<p>Appends a plain SQL string to the receiver, and eventual arguments.</p>","parent_name":"SQL"},"Structs/SQL.html#/sqlExpression":{"name":"sqlExpression","abstract":"<p>Creates a literal SQL expression.</p>","parent_name":"SQL"},"Structs/SQL.html#/sqlSelection":{"name":"sqlSelection","abstract":"<p>Creates a literal SQL expression.</p>","parent_name":"SQL"},"Structs/SQL.html#/sqlOrdering":{"name":"sqlOrdering","abstract":"<p>Creates a literal SQL ordering.</p>","parent_name":"SQL"},"Structs/SQL.html#/init(unicodeScalarLiteral:)":{"name":"init(unicodeScalarLiteral:)","abstract":"<p>:nodoc</p>","parent_name":"SQL"},"Structs/RenameColumnAdapter.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates a <code>RenameColumnAdapter</code> adapter that renames columns according to the","parent_name":"RenameColumnAdapter"},"Structs/ScopeAdapter.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates an adapter that preserves row contents and add scoped rows.</p>","parent_name":"ScopeAdapter"},"Structs/ScopeAdapter.html#/init(base:scopes:)":{"name":"init(base:scopes:)","abstract":"<p>Creates an adapter based on the base adapter, and add scoped rows.</p>","parent_name":"ScopeAdapter"},"Structs/RangeRowAdapter.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates a RangeRowAdapter that only exposes a range of columns.</p>","parent_name":"RangeRowAdapter"},"Structs/SuffixRowAdapter.html#/init(fromIndex:)":{"name":"init(fromIndex:)","abstract":"<p>Creates a SuffixRowAdapter that hides all columns before the","parent_name":"SuffixRowAdapter"},"Structs/ColumnMapping.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates a ColumnMapping with a dictionary from mapped column names to","parent_name":"ColumnMapping"},"Structs/EmptyRowAdapter.html#/init()":{"name":"init()","abstract":"<p>Creates an EmptyRowAdapter</p>","parent_name":"EmptyRowAdapter"},"Structs/AnyFetchRequest.html#/asRequest(of:)":{"name":"asRequest(of:)","abstract":"<p>Creates a request bound to type RowDecoder.</p>","parent_name":"AnyFetchRequest"},"Structs/AnyFetchRequest.html#/sqlSubquery":{"name":"sqlSubquery","parent_name":"AnyFetchRequest"},"Structs/AnyFetchRequest.html#/fetchCount(_:)":{"name":"fetchCount(_:)","parent_name":"AnyFetchRequest"},"Structs/AnyFetchRequest.html#/makePreparedRequest(_:forSingleResult:)":{"name":"makePreparedRequest(_:forSingleResult:)","parent_name":"AnyFetchRequest"},"Structs/AnyFetchRequest.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates a request that wraps and forwards operations to <code>request</code>.</p>","parent_name":"AnyFetchRequest"},"Structs/AdaptedFetchRequest.html#/RowDecoder":{"name":"RowDecoder","parent_name":"AdaptedFetchRequest"},"Structs/AdaptedFetchRequest.html#/sqlSubquery":{"name":"sqlSubquery","parent_name":"AdaptedFetchRequest"},"Structs/AdaptedFetchRequest.html#/fetchCount(_:)":{"name":"fetchCount(_:)","parent_name":"AdaptedFetchRequest"},"Structs/AdaptedFetchRequest.html#/makePreparedRequest(_:forSingleResult:)":{"name":"makePreparedRequest(_:forSingleResult:)","parent_name":"AdaptedFetchRequest"},"Structs/PreparedRequest.html#/statement":{"name":"statement","abstract":"<p>A prepared statement</p>","parent_name":"PreparedRequest"},"Structs/PreparedRequest.html#/adapter":{"name":"adapter","abstract":"<p>An eventual adapter for rows fetched by the select statement</p>","parent_name":"PreparedRequest"},"Structs/DatabaseValue/Storage.html#/null":{"name":"null","abstract":"<p>The NULL storage class.</p>","parent_name":"Storage"},"Structs/DatabaseValue/Storage.html#/int64(_:)":{"name":"int64(_:)","abstract":"<p>The INTEGER storage class, wrapping an Int64.</p>","parent_name":"Storage"},"Structs/DatabaseValue/Storage.html#/double(_:)":{"name":"double(_:)","abstract":"<p>The REAL storage class, wrapping a Double.</p>","parent_name":"Storage"},"Structs/DatabaseValue/Storage.html#/string(_:)":{"name":"string(_:)","abstract":"<p>The TEXT storage class, wrapping a String.</p>","parent_name":"Storage"},"Structs/DatabaseValue/Storage.html#/blob(_:)":{"name":"blob(_:)","abstract":"<p>The BLOB storage class, wrapping Data.</p>","parent_name":"Storage"},"Structs/DatabaseValue/Storage.html#/value":{"name":"value","abstract":"<p>Returns Int64, Double, String, Data or nil.</p>","parent_name":"Storage"},"Structs/DatabaseValue/Storage.html#/==(_:_:)":{"name":"==(_:_:)","abstract":"<p>Return true if the storages are identical.</p>","parent_name":"Storage"},"Structs/DatabaseValue.html#/storage":{"name":"storage","abstract":"<p>The SQLite storage</p>","parent_name":"DatabaseValue"},"Structs/DatabaseValue.html#/null":{"name":"null","abstract":"<p>The NULL DatabaseValue.</p>","parent_name":"DatabaseValue"},"Structs/DatabaseValue/Storage.html":{"name":"Storage","abstract":"<p>An SQLite storage (NULL, INTEGER, REAL, TEXT, BLOB).</p>","parent_name":"DatabaseValue"},"Structs/DatabaseValue.html#/init(value:)":{"name":"init(value:)","abstract":"<p>Creates a DatabaseValue from Any.</p>","parent_name":"DatabaseValue"},"Structs/DatabaseValue.html#/isNull":{"name":"isNull","abstract":"<p>Returns true if databaseValue is NULL.</p>","parent_name":"DatabaseValue"},"Structs/DatabaseValue.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"DatabaseValue"},"Structs/DatabaseValue.html#/==(_:_:)":{"name":"==(_:_:)","abstract":"<p>Returns whether two DatabaseValues are equal.</p>","parent_name":"DatabaseValue"},"Structs/DatabaseValue.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns self</p>","parent_name":"DatabaseValue"},"Structs/DatabaseValue.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns the database value</p>","parent_name":"DatabaseValue"},"Structs/DatabaseValue.html#/sqlExpression":{"name":"sqlExpression","parent_name":"DatabaseValue"},"Structs/DatabaseRegionObservation.html#/init(tracking:)":{"name":"init(tracking:)","abstract":"<p>Creates a DatabaseRegionObservation which observes <em>regions</em>, and","parent_name":"DatabaseRegionObservation"},"Structs/DatabaseRegionObservation.html#/start(in:onError:onChange:)":{"name":"start(in:onError:onChange:)","abstract":"<p>Starts the observation in the provided database writer (such as","parent_name":"DatabaseRegionObservation"},"Structs/AnyDatabaseRegionConvertible.html#/init(_:)":{"name":"init(_:)","parent_name":"AnyDatabaseRegionConvertible"},"Structs/DatabaseRegion.html#/isEmpty":{"name":"isEmpty","abstract":"<p>Returns whether the region is empty.</p>","parent_name":"DatabaseRegion"},"Structs/DatabaseRegion.html#/isFullDatabase":{"name":"isFullDatabase","abstract":"<p>Returns whether the region covers the full database: all columns and all","parent_name":"DatabaseRegion"},"Structs/DatabaseRegion.html#/fullDatabase":{"name":"fullDatabase","abstract":"<p>The region that covers the full database: all columns and all rows","parent_name":"DatabaseRegion"},"Structs/DatabaseRegion.html#/init()":{"name":"init()","abstract":"<p>Creates an empty database region.</p>","parent_name":"DatabaseRegion"},"Structs/DatabaseRegion.html#/union(_:)":{"name":"union(_:)","abstract":"<p>Returns the union of this region and the given one.</p>","parent_name":"DatabaseRegion"},"Structs/DatabaseRegion.html#/formUnion(_:)":{"name":"formUnion(_:)","abstract":"<p>Inserts the given region into this region</p>","parent_name":"DatabaseRegion"},"Structs/DatabaseRegion.html#/isModified(byEventsOfKind:)":{"name":"isModified(byEventsOfKind:)","abstract":"<p>Returns whether the content in the region would be impacted if the","parent_name":"DatabaseRegion"},"Structs/DatabaseRegion.html#/isModified(by:)":{"name":"isModified(by:)","abstract":"<p>Returns whether the content in the region is impacted by this event.</p>","parent_name":"DatabaseRegion"},"Structs/DatabaseError.html#/resultCode":{"name":"resultCode","abstract":"<p>The SQLite error code (see","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/extendedResultCode":{"name":"extendedResultCode","abstract":"<p>The SQLite extended error code (see","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/message":{"name":"message","abstract":"<p>The SQLite error message.</p>","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/sql":{"name":"sql","abstract":"<p>The SQL query that yielded the error (if relevant).</p>","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/arguments":{"name":"arguments","abstract":"<p>The query arguments that yielded the error (if relevant).</p>","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/init(resultCode:message:sql:arguments:publicStatementArguments:)":{"name":"init(resultCode:message:sql:arguments:publicStatementArguments:)","abstract":"<p>Creates a DatabaseError.</p>","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_OK":{"name":"SQLITE_OK","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_ERROR":{"name":"SQLITE_ERROR","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_INTERNAL":{"name":"SQLITE_INTERNAL","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_PERM":{"name":"SQLITE_PERM","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_ABORT":{"name":"SQLITE_ABORT","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_BUSY":{"name":"SQLITE_BUSY","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_LOCKED":{"name":"SQLITE_LOCKED","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_NOMEM":{"name":"SQLITE_NOMEM","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_READONLY":{"name":"SQLITE_READONLY","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_INTERRUPT":{"name":"SQLITE_INTERRUPT","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR":{"name":"SQLITE_IOERR","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CORRUPT":{"name":"SQLITE_CORRUPT","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_NOTFOUND":{"name":"SQLITE_NOTFOUND","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_FULL":{"name":"SQLITE_FULL","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CANTOPEN":{"name":"SQLITE_CANTOPEN","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_PROTOCOL":{"name":"SQLITE_PROTOCOL","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_EMPTY":{"name":"SQLITE_EMPTY","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_SCHEMA":{"name":"SQLITE_SCHEMA","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_TOOBIG":{"name":"SQLITE_TOOBIG","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CONSTRAINT":{"name":"SQLITE_CONSTRAINT","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_MISMATCH":{"name":"SQLITE_MISMATCH","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_MISUSE":{"name":"SQLITE_MISUSE","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_NOLFS":{"name":"SQLITE_NOLFS","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_AUTH":{"name":"SQLITE_AUTH","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_FORMAT":{"name":"SQLITE_FORMAT","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_RANGE":{"name":"SQLITE_RANGE","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_NOTADB":{"name":"SQLITE_NOTADB","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_NOTICE":{"name":"SQLITE_NOTICE","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_WARNING":{"name":"SQLITE_WARNING","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_ROW":{"name":"SQLITE_ROW","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_DONE":{"name":"SQLITE_DONE","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_ERROR_MISSING_COLLSEQ":{"name":"SQLITE_ERROR_MISSING_COLLSEQ","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_ERROR_RETRY":{"name":"SQLITE_ERROR_RETRY","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_ERROR_SNAPSHOT":{"name":"SQLITE_ERROR_SNAPSHOT","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_READ":{"name":"SQLITE_IOERR_READ","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_SHORT_READ":{"name":"SQLITE_IOERR_SHORT_READ","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_WRITE":{"name":"SQLITE_IOERR_WRITE","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_FSYNC":{"name":"SQLITE_IOERR_FSYNC","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_DIR_FSYNC":{"name":"SQLITE_IOERR_DIR_FSYNC","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_TRUNCATE":{"name":"SQLITE_IOERR_TRUNCATE","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_FSTAT":{"name":"SQLITE_IOERR_FSTAT","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_UNLOCK":{"name":"SQLITE_IOERR_UNLOCK","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_RDLOCK":{"name":"SQLITE_IOERR_RDLOCK","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_DELETE":{"name":"SQLITE_IOERR_DELETE","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_BLOCKED":{"name":"SQLITE_IOERR_BLOCKED","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_NOMEM":{"name":"SQLITE_IOERR_NOMEM","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_ACCESS":{"name":"SQLITE_IOERR_ACCESS","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_CHECKRESERVEDLOCK":{"name":"SQLITE_IOERR_CHECKRESERVEDLOCK","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_LOCK":{"name":"SQLITE_IOERR_LOCK","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_CLOSE":{"name":"SQLITE_IOERR_CLOSE","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_DIR_CLOSE":{"name":"SQLITE_IOERR_DIR_CLOSE","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_SHMOPEN":{"name":"SQLITE_IOERR_SHMOPEN","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_SHMSIZE":{"name":"SQLITE_IOERR_SHMSIZE","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_SHMLOCK":{"name":"SQLITE_IOERR_SHMLOCK","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_SHMMAP":{"name":"SQLITE_IOERR_SHMMAP","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_SEEK":{"name":"SQLITE_IOERR_SEEK","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_DELETE_NOENT":{"name":"SQLITE_IOERR_DELETE_NOENT","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_MMAP":{"name":"SQLITE_IOERR_MMAP","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_GETTEMPPATH":{"name":"SQLITE_IOERR_GETTEMPPATH","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_CONVPATH":{"name":"SQLITE_IOERR_CONVPATH","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_VNODE":{"name":"SQLITE_IOERR_VNODE","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_AUTH":{"name":"SQLITE_IOERR_AUTH","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_BEGIN_ATOMIC":{"name":"SQLITE_IOERR_BEGIN_ATOMIC","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_COMMIT_ATOMIC":{"name":"SQLITE_IOERR_COMMIT_ATOMIC","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_ROLLBACK_ATOMIC":{"name":"SQLITE_IOERR_ROLLBACK_ATOMIC","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_DATA":{"name":"SQLITE_IOERR_DATA","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_IOERR_CORRUPTFS":{"name":"SQLITE_IOERR_CORRUPTFS","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_LOCKED_SHAREDCACHE":{"name":"SQLITE_LOCKED_SHAREDCACHE","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_LOCKED_VTAB":{"name":"SQLITE_LOCKED_VTAB","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_BUSY_RECOVERY":{"name":"SQLITE_BUSY_RECOVERY","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_BUSY_SNAPSHOT":{"name":"SQLITE_BUSY_SNAPSHOT","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_BUSY_TIMEOUT":{"name":"SQLITE_BUSY_TIMEOUT","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CANTOPEN_NOTEMPDIR":{"name":"SQLITE_CANTOPEN_NOTEMPDIR","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CANTOPEN_ISDIR":{"name":"SQLITE_CANTOPEN_ISDIR","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CANTOPEN_FULLPATH":{"name":"SQLITE_CANTOPEN_FULLPATH","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CANTOPEN_CONVPATH":{"name":"SQLITE_CANTOPEN_CONVPATH","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CANTOPEN_DIRTYWAL":{"name":"SQLITE_CANTOPEN_DIRTYWAL","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CANTOPEN_SYMLINK":{"name":"SQLITE_CANTOPEN_SYMLINK","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CORRUPT_VTAB":{"name":"SQLITE_CORRUPT_VTAB","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CORRUPT_SEQUENCE":{"name":"SQLITE_CORRUPT_SEQUENCE","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CORRUPT_INDEX":{"name":"SQLITE_CORRUPT_INDEX","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_READONLY_RECOVERY":{"name":"SQLITE_READONLY_RECOVERY","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_READONLY_CANTLOCK":{"name":"SQLITE_READONLY_CANTLOCK","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_READONLY_ROLLBACK":{"name":"SQLITE_READONLY_ROLLBACK","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_READONLY_DBMOVED":{"name":"SQLITE_READONLY_DBMOVED","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_READONLY_CANTINIT":{"name":"SQLITE_READONLY_CANTINIT","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_READONLY_DIRECTORY":{"name":"SQLITE_READONLY_DIRECTORY","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_ABORT_ROLLBACK":{"name":"SQLITE_ABORT_ROLLBACK","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CONSTRAINT_CHECK":{"name":"SQLITE_CONSTRAINT_CHECK","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CONSTRAINT_COMMITHOOK":{"name":"SQLITE_CONSTRAINT_COMMITHOOK","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CONSTRAINT_FOREIGNKEY":{"name":"SQLITE_CONSTRAINT_FOREIGNKEY","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CONSTRAINT_FUNCTION":{"name":"SQLITE_CONSTRAINT_FUNCTION","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CONSTRAINT_NOTNULL":{"name":"SQLITE_CONSTRAINT_NOTNULL","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CONSTRAINT_PRIMARYKEY":{"name":"SQLITE_CONSTRAINT_PRIMARYKEY","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CONSTRAINT_TRIGGER":{"name":"SQLITE_CONSTRAINT_TRIGGER","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CONSTRAINT_UNIQUE":{"name":"SQLITE_CONSTRAINT_UNIQUE","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CONSTRAINT_VTAB":{"name":"SQLITE_CONSTRAINT_VTAB","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CONSTRAINT_ROWID":{"name":"SQLITE_CONSTRAINT_ROWID","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CONSTRAINT_PINNED":{"name":"SQLITE_CONSTRAINT_PINNED","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_CONSTRAINT_DATATYPE":{"name":"SQLITE_CONSTRAINT_DATATYPE","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_NOTICE_RECOVER_WAL":{"name":"SQLITE_NOTICE_RECOVER_WAL","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_NOTICE_RECOVER_ROLLBACK":{"name":"SQLITE_NOTICE_RECOVER_ROLLBACK","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_WARNING_AUTOINDEX":{"name":"SQLITE_WARNING_AUTOINDEX","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_AUTH_USER":{"name":"SQLITE_AUTH_USER","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_OK_LOAD_PERMANENTLY":{"name":"SQLITE_OK_LOAD_PERMANENTLY","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/SQLITE_OK_SYMLINK":{"name":"SQLITE_OK_SYMLINK","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/isInterruptionError":{"name":"isInterruptionError","abstract":"<p>Returns true if the error has code <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/DatabaseError.html#/SQLITE_ABORT\">SQLITE_ABORT</a></code> or <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/DatabaseError.html#/SQLITE_INTERRUPT\">SQLITE_INTERRUPT</a></code>.</p>","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/description":{"name":"description","abstract":"<p>The error description.</p>","parent_name":"DatabaseError"},"Structs/DatabaseError.html#/expandedDescription":{"name":"expandedDescription","abstract":"<p>The error description, where bound parameters, if present, are visible.</p>","parent_name":"DatabaseError"},"Structs/ResultCode.html#/rawValue":{"name":"rawValue","abstract":"<p>The raw SQLite result code</p>","parent_name":"ResultCode"},"Structs/ResultCode.html#/init(rawValue:)":{"name":"init(rawValue:)","abstract":"<p>Creates a <code>ResultCode</code> from a raw SQLite result code.</p>","parent_name":"ResultCode"},"Structs/ResultCode.html#/primaryResultCode":{"name":"primaryResultCode","abstract":"<p>A result code limited to the least significant 8 bits of the receiver.","parent_name":"ResultCode"},"Structs/ResultCode.html#/~=(_:_:)":{"name":"~=(_:_:)","abstract":"<p>Returns true if the code on the left matches the code on the right.</p>","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_OK":{"name":"SQLITE_OK","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_ERROR":{"name":"SQLITE_ERROR","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_INTERNAL":{"name":"SQLITE_INTERNAL","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_PERM":{"name":"SQLITE_PERM","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_ABORT":{"name":"SQLITE_ABORT","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_BUSY":{"name":"SQLITE_BUSY","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_LOCKED":{"name":"SQLITE_LOCKED","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_NOMEM":{"name":"SQLITE_NOMEM","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_READONLY":{"name":"SQLITE_READONLY","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_INTERRUPT":{"name":"SQLITE_INTERRUPT","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR":{"name":"SQLITE_IOERR","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CORRUPT":{"name":"SQLITE_CORRUPT","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_NOTFOUND":{"name":"SQLITE_NOTFOUND","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_FULL":{"name":"SQLITE_FULL","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CANTOPEN":{"name":"SQLITE_CANTOPEN","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_PROTOCOL":{"name":"SQLITE_PROTOCOL","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_EMPTY":{"name":"SQLITE_EMPTY","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_SCHEMA":{"name":"SQLITE_SCHEMA","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_TOOBIG":{"name":"SQLITE_TOOBIG","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CONSTRAINT":{"name":"SQLITE_CONSTRAINT","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_MISMATCH":{"name":"SQLITE_MISMATCH","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_MISUSE":{"name":"SQLITE_MISUSE","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_NOLFS":{"name":"SQLITE_NOLFS","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_AUTH":{"name":"SQLITE_AUTH","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_FORMAT":{"name":"SQLITE_FORMAT","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_RANGE":{"name":"SQLITE_RANGE","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_NOTADB":{"name":"SQLITE_NOTADB","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_NOTICE":{"name":"SQLITE_NOTICE","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_WARNING":{"name":"SQLITE_WARNING","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_ROW":{"name":"SQLITE_ROW","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_DONE":{"name":"SQLITE_DONE","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_ERROR_MISSING_COLLSEQ":{"name":"SQLITE_ERROR_MISSING_COLLSEQ","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_ERROR_RETRY":{"name":"SQLITE_ERROR_RETRY","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_ERROR_SNAPSHOT":{"name":"SQLITE_ERROR_SNAPSHOT","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_READ":{"name":"SQLITE_IOERR_READ","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_SHORT_READ":{"name":"SQLITE_IOERR_SHORT_READ","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_WRITE":{"name":"SQLITE_IOERR_WRITE","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_FSYNC":{"name":"SQLITE_IOERR_FSYNC","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_DIR_FSYNC":{"name":"SQLITE_IOERR_DIR_FSYNC","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_TRUNCATE":{"name":"SQLITE_IOERR_TRUNCATE","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_FSTAT":{"name":"SQLITE_IOERR_FSTAT","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_UNLOCK":{"name":"SQLITE_IOERR_UNLOCK","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_RDLOCK":{"name":"SQLITE_IOERR_RDLOCK","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_DELETE":{"name":"SQLITE_IOERR_DELETE","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_BLOCKED":{"name":"SQLITE_IOERR_BLOCKED","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_NOMEM":{"name":"SQLITE_IOERR_NOMEM","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_ACCESS":{"name":"SQLITE_IOERR_ACCESS","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_CHECKRESERVEDLOCK":{"name":"SQLITE_IOERR_CHECKRESERVEDLOCK","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_LOCK":{"name":"SQLITE_IOERR_LOCK","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_CLOSE":{"name":"SQLITE_IOERR_CLOSE","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_DIR_CLOSE":{"name":"SQLITE_IOERR_DIR_CLOSE","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_SHMOPEN":{"name":"SQLITE_IOERR_SHMOPEN","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_SHMSIZE":{"name":"SQLITE_IOERR_SHMSIZE","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_SHMLOCK":{"name":"SQLITE_IOERR_SHMLOCK","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_SHMMAP":{"name":"SQLITE_IOERR_SHMMAP","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_SEEK":{"name":"SQLITE_IOERR_SEEK","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_DELETE_NOENT":{"name":"SQLITE_IOERR_DELETE_NOENT","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_MMAP":{"name":"SQLITE_IOERR_MMAP","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_GETTEMPPATH":{"name":"SQLITE_IOERR_GETTEMPPATH","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_CONVPATH":{"name":"SQLITE_IOERR_CONVPATH","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_VNODE":{"name":"SQLITE_IOERR_VNODE","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_AUTH":{"name":"SQLITE_IOERR_AUTH","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_BEGIN_ATOMIC":{"name":"SQLITE_IOERR_BEGIN_ATOMIC","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_COMMIT_ATOMIC":{"name":"SQLITE_IOERR_COMMIT_ATOMIC","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_ROLLBACK_ATOMIC":{"name":"SQLITE_IOERR_ROLLBACK_ATOMIC","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_DATA":{"name":"SQLITE_IOERR_DATA","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_IOERR_CORRUPTFS":{"name":"SQLITE_IOERR_CORRUPTFS","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_LOCKED_SHAREDCACHE":{"name":"SQLITE_LOCKED_SHAREDCACHE","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_LOCKED_VTAB":{"name":"SQLITE_LOCKED_VTAB","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_BUSY_RECOVERY":{"name":"SQLITE_BUSY_RECOVERY","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_BUSY_SNAPSHOT":{"name":"SQLITE_BUSY_SNAPSHOT","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_BUSY_TIMEOUT":{"name":"SQLITE_BUSY_TIMEOUT","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CANTOPEN_NOTEMPDIR":{"name":"SQLITE_CANTOPEN_NOTEMPDIR","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CANTOPEN_ISDIR":{"name":"SQLITE_CANTOPEN_ISDIR","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CANTOPEN_FULLPATH":{"name":"SQLITE_CANTOPEN_FULLPATH","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CANTOPEN_CONVPATH":{"name":"SQLITE_CANTOPEN_CONVPATH","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CANTOPEN_DIRTYWAL":{"name":"SQLITE_CANTOPEN_DIRTYWAL","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CANTOPEN_SYMLINK":{"name":"SQLITE_CANTOPEN_SYMLINK","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CORRUPT_VTAB":{"name":"SQLITE_CORRUPT_VTAB","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CORRUPT_SEQUENCE":{"name":"SQLITE_CORRUPT_SEQUENCE","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CORRUPT_INDEX":{"name":"SQLITE_CORRUPT_INDEX","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_READONLY_RECOVERY":{"name":"SQLITE_READONLY_RECOVERY","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_READONLY_CANTLOCK":{"name":"SQLITE_READONLY_CANTLOCK","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_READONLY_ROLLBACK":{"name":"SQLITE_READONLY_ROLLBACK","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_READONLY_DBMOVED":{"name":"SQLITE_READONLY_DBMOVED","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_READONLY_CANTINIT":{"name":"SQLITE_READONLY_CANTINIT","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_READONLY_DIRECTORY":{"name":"SQLITE_READONLY_DIRECTORY","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_ABORT_ROLLBACK":{"name":"SQLITE_ABORT_ROLLBACK","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CONSTRAINT_CHECK":{"name":"SQLITE_CONSTRAINT_CHECK","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CONSTRAINT_COMMITHOOK":{"name":"SQLITE_CONSTRAINT_COMMITHOOK","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CONSTRAINT_FOREIGNKEY":{"name":"SQLITE_CONSTRAINT_FOREIGNKEY","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CONSTRAINT_FUNCTION":{"name":"SQLITE_CONSTRAINT_FUNCTION","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CONSTRAINT_NOTNULL":{"name":"SQLITE_CONSTRAINT_NOTNULL","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CONSTRAINT_PRIMARYKEY":{"name":"SQLITE_CONSTRAINT_PRIMARYKEY","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CONSTRAINT_TRIGGER":{"name":"SQLITE_CONSTRAINT_TRIGGER","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CONSTRAINT_UNIQUE":{"name":"SQLITE_CONSTRAINT_UNIQUE","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CONSTRAINT_VTAB":{"name":"SQLITE_CONSTRAINT_VTAB","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CONSTRAINT_ROWID":{"name":"SQLITE_CONSTRAINT_ROWID","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CONSTRAINT_PINNED":{"name":"SQLITE_CONSTRAINT_PINNED","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_CONSTRAINT_DATATYPE":{"name":"SQLITE_CONSTRAINT_DATATYPE","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_NOTICE_RECOVER_WAL":{"name":"SQLITE_NOTICE_RECOVER_WAL","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_NOTICE_RECOVER_ROLLBACK":{"name":"SQLITE_NOTICE_RECOVER_ROLLBACK","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_WARNING_AUTOINDEX":{"name":"SQLITE_WARNING_AUTOINDEX","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_AUTH_USER":{"name":"SQLITE_AUTH_USER","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_OK_LOAD_PERMANENTLY":{"name":"SQLITE_OK_LOAD_PERMANENTLY","parent_name":"ResultCode"},"Structs/ResultCode.html#/SQLITE_OK_SYMLINK":{"name":"SQLITE_OK_SYMLINK","parent_name":"ResultCode"},"Structs/DatabaseBackupProgress.html#/remainingPageCount":{"name":"remainingPageCount","abstract":"<p>Total page count is defined by the <code>sqlite3_backup_remaining</code> function</p>","parent_name":"DatabaseBackupProgress"},"Structs/DatabaseBackupProgress.html#/totalPageCount":{"name":"totalPageCount","abstract":"<p>Total page count is defined by the <code>sqlite3_backup_pagecount</code> function</p>","parent_name":"DatabaseBackupProgress"},"Structs/DatabaseBackupProgress.html#/completedPageCount":{"name":"completedPageCount","abstract":"<p>Completed page count is defined as <code>sqlite3_backup_pagecount() - sqlite3_backup_remaining()</code></p>","parent_name":"DatabaseBackupProgress"},"Structs/DatabaseBackupProgress.html#/isCompleted":{"name":"isCompleted","abstract":"<p>This property is true if and only if <code>sqlite3_backup_step()</code> returns","parent_name":"DatabaseBackupProgress"},"Structs/ForeignKeyInfo.html#/id":{"name":"id","abstract":"<p>The first column in the output of the <code>foreign_key_list</code> pragma</p>","parent_name":"ForeignKeyInfo"},"Structs/ForeignKeyInfo.html#/destinationTable":{"name":"destinationTable","abstract":"<p>The name of the destination table</p>","parent_name":"ForeignKeyInfo"},"Structs/ForeignKeyInfo.html#/mapping":{"name":"mapping","abstract":"<p>The column to column mapping</p>","parent_name":"ForeignKeyInfo"},"Structs/ForeignKeyInfo.html#/originColumns":{"name":"originColumns","abstract":"<p>The origin columns</p>","parent_name":"ForeignKeyInfo"},"Structs/ForeignKeyInfo.html#/destinationColumns":{"name":"destinationColumns","abstract":"<p>The destination columns</p>","parent_name":"ForeignKeyInfo"},"Structs/PrimaryKeyInfo.html#/columns":{"name":"columns","abstract":"<p>The columns in the primary key; this array is never empty.</p>","parent_name":"PrimaryKeyInfo"},"Structs/PrimaryKeyInfo.html#/rowIDColumn":{"name":"rowIDColumn","abstract":"<p>When not nil, the name of the column that contains the INTEGER PRIMARY KEY.</p>","parent_name":"PrimaryKeyInfo"},"Structs/PrimaryKeyInfo.html#/isRowID":{"name":"isRowID","abstract":"<p>When true, the primary key is the rowid:</p>","parent_name":"PrimaryKeyInfo"},"Structs/ForeignKeyViolation.html#/originTable":{"name":"originTable","abstract":"<p>The name of the table that contains the <code>REFERENCES</code> clause</p>","parent_name":"ForeignKeyViolation"},"Structs/ForeignKeyViolation.html#/originRowID":{"name":"originRowID","abstract":"<p>The rowid of the row that contains the invalid <code>REFERENCES</code> clause, or","parent_name":"ForeignKeyViolation"},"Structs/ForeignKeyViolation.html#/destinationTable":{"name":"destinationTable","abstract":"<p>The name of the table that is referred to.</p>","parent_name":"ForeignKeyViolation"},"Structs/ForeignKeyViolation.html#/foreignKeyId":{"name":"foreignKeyId","abstract":"<p>The id of the specific foreign key constraint that failed. This id","parent_name":"ForeignKeyViolation"},"Structs/ForeignKeyViolation.html#/init(row:)":{"name":"init(row:)","parent_name":"ForeignKeyViolation"},"Structs/ForeignKeyViolation.html#/description":{"name":"description","parent_name":"ForeignKeyViolation"},"Structs/ForeignKeyViolation.html#/failureDescription(_:)":{"name":"failureDescription(_:)","abstract":"<p>Returns a precise description of the foreign key violation.</p>","parent_name":"ForeignKeyViolation"},"Structs/ForeignKeyViolation.html#/databaseError(_:)":{"name":"databaseError(_:)","abstract":"<p>Returns a DatabaseError of extended code <code>SQLITE_CONSTRAINT_FOREIGNKEY</code></p>","parent_name":"ForeignKeyViolation"},"Structs/IndexInfo/Origin.html#/rawValue":{"name":"rawValue","parent_name":"Origin"},"Structs/IndexInfo/Origin.html#/init(rawValue:)":{"name":"init(rawValue:)","parent_name":"Origin"},"Structs/IndexInfo/Origin.html#/createIndex":{"name":"createIndex","abstract":"<p>An index created from a CREATE INDEX statement.</p>","parent_name":"Origin"},"Structs/IndexInfo/Origin.html#/uniqueConstraint":{"name":"uniqueConstraint","abstract":"<p>An index created by a UNIQUE constraint.</p>","parent_name":"Origin"},"Structs/IndexInfo/Origin.html#/primaryKeyConstraint":{"name":"primaryKeyConstraint","abstract":"<p>An index created by a PRIMARY KEY constraint.</p>","parent_name":"Origin"},"Structs/IndexInfo/Origin.html":{"name":"Origin","abstract":"<p>The origin of an index.</p>","parent_name":"IndexInfo"},"Structs/IndexInfo.html#/name":{"name":"name","abstract":"<p>The name of the index</p>","parent_name":"IndexInfo"},"Structs/IndexInfo.html#/columns":{"name":"columns","abstract":"<p>The indexed columns</p>","parent_name":"IndexInfo"},"Structs/IndexInfo.html#/isUnique":{"name":"isUnique","abstract":"<p>True if the index is unique</p>","parent_name":"IndexInfo"},"Structs/IndexInfo.html#/origin":{"name":"origin","abstract":"<p>The origin of the index</p>","parent_name":"IndexInfo"},"Structs/ColumnInfo.html#/name":{"name":"name","abstract":"<p>The column name</p>","parent_name":"ColumnInfo"},"Structs/ColumnInfo.html#/type":{"name":"type","abstract":"<p>The column data type</p>","parent_name":"ColumnInfo"},"Structs/ColumnInfo.html#/isNotNull":{"name":"isNotNull","abstract":"<p>True if and only if the column is constrained to be not null.</p>","parent_name":"ColumnInfo"},"Structs/ColumnInfo.html#/defaultValueSQL":{"name":"defaultValueSQL","abstract":"<p>The SQL snippet that defines the default value, if any.</p>","parent_name":"ColumnInfo"},"Structs/ColumnInfo.html#/primaryKeyIndex":{"name":"primaryKeyIndex","abstract":"<p>For columns that are part of the primary key, this is the one-based","parent_name":"ColumnInfo"},"Structs/Configuration.html#/foreignKeysEnabled":{"name":"foreignKeysEnabled","abstract":"<p>If true (the default), support for foreign keys is enabled.","parent_name":"Configuration"},"Structs/Configuration.html#/readonly":{"name":"readonly","abstract":"<p>If true, database modifications are disallowed.</p>","parent_name":"Configuration"},"Structs/Configuration.html#/label":{"name":"label","abstract":"<p>The configuration label.</p>","parent_name":"Configuration"},"Structs/Configuration.html#/acceptsDoubleQuotedStringLiterals":{"name":"acceptsDoubleQuotedStringLiterals","abstract":"<p>If false, SQLite from version 3.29.0 will not interpret a double-quoted","parent_name":"Configuration"},"Structs/Configuration.html#/observesSuspensionNotifications":{"name":"observesSuspensionNotifications","abstract":"<p>When true, the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Database.html#/suspendNotification\">Database.suspendNotification</a></code> and","parent_name":"Configuration"},"Structs/Configuration.html#/publicStatementArguments":{"name":"publicStatementArguments","abstract":"<p>If false (the default), statement arguments are not visible in the","parent_name":"Configuration"},"Structs/Configuration.html#/prepareDatabase(_:)":{"name":"prepareDatabase(_:)","abstract":"<p>The function argument is run when an SQLite connection is opened,","parent_name":"Configuration"},"Structs/Configuration.html#/defaultTransactionKind":{"name":"defaultTransactionKind","abstract":"<p>The default kind of transaction.</p>","parent_name":"Configuration"},"Structs/Configuration.html#/allowsUnsafeTransactions":{"name":"allowsUnsafeTransactions","abstract":"<p>If false, it is a programmer error to leave a transaction opened at the","parent_name":"Configuration"},"Structs/Configuration.html#/busyMode":{"name":"busyMode","abstract":"<p>The behavior in case of SQLITE_BUSY error. See <a href=\"https://www.sqlite.org/rescode.html#busy\">https://www.sqlite.org/rescode.html#busy</a></p>","parent_name":"Configuration"},"Structs/Configuration.html#/maximumReaderCount":{"name":"maximumReaderCount","abstract":"<p>The maximum number of concurrent readers (applies to database","parent_name":"Configuration"},"Structs/Configuration.html#/qos":{"name":"qos","abstract":"<p>The quality of service class for the work performed by the database.</p>","parent_name":"Configuration"},"Structs/Configuration.html#/targetQueue":{"name":"targetQueue","abstract":"<p>A target queue for database accesses.</p>","parent_name":"Configuration"},"Structs/Configuration.html#/writeTargetQueue":{"name":"writeTargetQueue","abstract":"<p>The target queue for database connections which are not read-only.</p>","parent_name":"Configuration"},"Structs/Configuration.html#/automaticMemoryManagement":{"name":"automaticMemoryManagement","abstract":"<p>Sets whether GRDB will release memory when entering the background or","parent_name":"Configuration"},"Structs/Configuration.html#/init()":{"name":"init()","abstract":"<p>Creates a factory configuration</p>","parent_name":"Configuration"},"Structs/Configuration.html":{"name":"Configuration","abstract":"<p>Configuration for a DatabaseQueue or DatabasePool.</p>"},"Structs/ColumnInfo.html":{"name":"ColumnInfo","abstract":"<p>A column of a database table.</p>"},"Structs/IndexInfo.html":{"name":"IndexInfo","abstract":"<p>An index on a database table.</p>"},"Structs/ForeignKeyViolation.html":{"name":"ForeignKeyViolation","abstract":"<p>A foreign key violation produced by PRAGMA foreign_key_check</p>"},"Structs/PrimaryKeyInfo.html":{"name":"PrimaryKeyInfo","abstract":"<p>Primary keys are returned from the Database.primaryKey(_:) method.</p>"},"Structs/ForeignKeyInfo.html":{"name":"ForeignKeyInfo","abstract":"<p>You get foreign keys from table names, with the"},"Structs/DatabaseBackupProgress.html":{"name":"DatabaseBackupProgress","abstract":"<p>An instance of <code>DatabaseBackupProgress</code> is passed to a callback of the"},"Structs/ResultCode.html":{"name":"ResultCode","abstract":"<p>An SQLite result code.</p>"},"Structs/DatabaseError.html":{"name":"DatabaseError","abstract":"<p>DatabaseError wraps an SQLite error.</p>"},"Structs/DatabaseRegion.html":{"name":"DatabaseRegion","abstract":"<p>DatabaseRegion defines a region in the database. DatabaseRegion is dedicated"},"Structs/AnyDatabaseRegionConvertible.html":{"name":"AnyDatabaseRegionConvertible","abstract":"<p>A type-erased DatabaseRegionConvertible</p>"},"Structs/DatabaseRegionObservation.html":{"name":"DatabaseRegionObservation","abstract":"<p>DatabaseRegionObservation tracks changes in the results of database"},"Structs/DatabaseValue.html":{"name":"DatabaseValue","abstract":"<p>DatabaseValue is the intermediate type between SQLite and your values.</p>"},"Structs/PreparedRequest.html":{"name":"PreparedRequest","abstract":"<p>A PreparedRequest is a request that is ready to be executed.</p>"},"Structs/AdaptedFetchRequest.html":{"name":"AdaptedFetchRequest","abstract":"<p>An adapted request.</p>"},"Structs/AnyFetchRequest.html":{"name":"AnyFetchRequest","abstract":"<p>A type-erased FetchRequest.</p>"},"Structs.html#/RowIndex":{"name":"RowIndex","abstract":"<p>Indexes to (ColumnName, DatabaseValue) pairs in a database row.</p>"},"Structs/EmptyRowAdapter.html":{"name":"EmptyRowAdapter","abstract":"<p>EmptyRowAdapter is a row adapter that hides all columns.</p>"},"Structs/ColumnMapping.html":{"name":"ColumnMapping","abstract":"<p>ColumnMapping is a row adapter that maps column names.</p>"},"Structs/SuffixRowAdapter.html":{"name":"SuffixRowAdapter","abstract":"<p>SuffixRowAdapter is a row adapter that hides the first columns in a row.</p>"},"Structs/RangeRowAdapter.html":{"name":"RangeRowAdapter","abstract":"<p>RangeRowAdapter is a row adapter that only exposes a range of columns.</p>"},"Structs/ScopeAdapter.html":{"name":"ScopeAdapter","abstract":"<p><code>ScopeAdapter</code> is a row adapter that lets you define scopes on rows.</p>"},"Structs/RenameColumnAdapter.html":{"name":"RenameColumnAdapter","abstract":"<p><code>RenameColumnAdapter</code> is a row adapter that renames columns.</p>"},"Structs/SQL.html":{"name":"SQL","abstract":"<p><code>SQL</code> helps you build SQL literal with"},"Structs/SQLRequest.html":{"name":"SQLRequest","abstract":"<p>A FetchRequest built from raw SQL.</p>"},"Structs/StatementArguments.html":{"name":"StatementArguments","abstract":"<p>StatementArguments provide values to argument placeholders in raw"},"Structs/DatabaseDateComponents.html":{"name":"DatabaseDateComponents","abstract":"<p>DatabaseDateComponents reads and stores DateComponents in the database.</p>"},"Structs/DatabaseEvent.html":{"name":"DatabaseEvent","abstract":"<p>A database event, notified to TransactionObserver.</p>"},"Structs/DatabasePreUpdateEvent.html":{"name":"DatabasePreUpdateEvent"},"Structs/FTS3.html":{"name":"FTS3","abstract":"<p>FTS3 lets you define &ldquo;fts3&rdquo; virtual tables.</p>"},"Structs/FTS3Pattern.html":{"name":"FTS3Pattern","abstract":"<p>A full text pattern that can query FTS3 and FTS4 virtual tables.</p>"},"Structs/FTS3TokenizerDescriptor.html":{"name":"FTS3TokenizerDescriptor","abstract":"<p>An FTS3 tokenizer, suitable for FTS3 and FTS4 table definitions:</p>"},"Structs/FTS4.html":{"name":"FTS4","abstract":"<p>FTS4 lets you define &ldquo;fts4&rdquo; virtual tables.</p>"},"Structs/FTS5.html":{"name":"FTS5","abstract":"<p>FTS5 lets you define &ldquo;fts5&rdquo; virtual tables.</p>"},"Structs/Column.html":{"name":"Column","abstract":"<p>A column in a database table.</p>"},"Structs/FTS5Pattern.html":{"name":"FTS5Pattern","abstract":"<p>A full text pattern that can query FTS5 virtual tables.</p>"},"Structs/FTS5Tokenization.html":{"name":"FTS5Tokenization","abstract":"<p>The reason why FTS5 is requesting tokenization.</p>"},"Structs/FTS5TokenizerDescriptor.html":{"name":"FTS5TokenizerDescriptor","abstract":"<p>An FTS5 tokenizer, suitable for FTS5 table definitions:</p>"},"Structs/FTS5TokenFlags.html":{"name":"FTS5TokenFlags","abstract":"<p>Flags that tell SQLite how to register a token.</p>"},"Structs/DatabaseMigrator.html":{"name":"DatabaseMigrator","abstract":"<p>A DatabaseMigrator registers and applies database migrations.</p>"},"Structs/ForeignKey.html":{"name":"ForeignKey","abstract":"<p>A ForeignKey helps building associations when GRDB can&rsquo;t infer a foreign"},"Structs/AssociationAggregate.html":{"name":"AssociationAggregate","abstract":"<p>An AssociationAggregate is able to compute aggregated values from a"},"Structs.html#/BelongsToAssociation":{"name":"BelongsToAssociation","abstract":"<p>The BelongsTo association sets up a one-to-one connection from a record"},"Structs.html#/HasManyAssociation":{"name":"HasManyAssociation","abstract":"<p>The HasMany association indicates a one-to-many connection between two"},"Structs.html#/HasManyThroughAssociation":{"name":"HasManyThroughAssociation","abstract":"<p>The <strong>HasManyThrough</strong> association is often used to set up a many-to-many"},"Structs.html#/HasOneAssociation":{"name":"HasOneAssociation","abstract":"<p>The HasOne association indicates a one-to-one connection between two"},"Structs.html#/HasOneThroughAssociation":{"name":"HasOneThroughAssociation","abstract":"<p>A <strong>HasOneThrough</strong> association sets up a one-to-one connection with"},"Structs.html#/JoinAssociation":{"name":"JoinAssociation","abstract":"<p>The Join association is used to join common table expression to regular"},"Structs/CommonTableExpression.html":{"name":"CommonTableExpression","abstract":"<p>A <a href=\"https://sqlite.org/lang_with.html\">common table expression</a> that can be"},"Structs/QueryInterfaceRequest.html":{"name":"QueryInterfaceRequest","abstract":"<p>QueryInterfaceRequest is a request that generates SQL for you.</p>"},"Structs.html#/ColumnAssignment":{"name":"ColumnAssignment","abstract":"<p>A ColumnAssignment can update rows in the database.</p>"},"Structs/SQLExpression.html":{"name":"SQLExpression","abstract":"<p>SQLExpression is the type that represents an SQL expression, as"},"Structs.html#/SQLOrdering":{"name":"SQLOrdering","abstract":"<p>The type that can be used as an SQL ordering term, as described at"},"Structs/PersistenceContainer.html":{"name":"PersistenceContainer","abstract":"<p>Use persistence containers in the <code>encode(to:)</code> method of your"},"Structs.html#/SQLSelection":{"name":"SQLSelection","abstract":"<p>The type that can be selected, as described at"},"Structs/AllColumns.html":{"name":"AllColumns","abstract":"<p>AllColumns is the <code>*</code> in <code>SELECT *</code>.</p>"},"Structs.html#/SQLSubquery":{"name":"SQLSubquery","abstract":"<p>The type that can be embedded as a subquery.</p>"},"Structs/Table.html":{"name":"Table","abstract":"<p><code>Table</code> can build query interface requests.</p>"},"Structs/TableOptions.html":{"name":"TableOptions","abstract":"<p>Table creation options</p>"},"Structs/IndexOptions.html":{"name":"IndexOptions","abstract":"<p>Table creation options</p>"},"Structs.html#/VirtualTableConfiguration":{"name":"VirtualTableConfiguration"},"Structs/PersistenceConflictPolicy.html":{"name":"PersistenceConflictPolicy","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/MutablePersistableRecord.html\">MutablePersistableRecord</a></code> protocol uses this type in order to handle"},"Structs/InsertionSuccess.html":{"name":"InsertionSuccess","abstract":"<p>The result of a successful record insertion.</p>"},"Structs/PersistenceSuccess.html":{"name":"PersistenceSuccess","abstract":"<p>The result of a successful record persistence (insert or update).</p>"},"Structs/Inflections.html":{"name":"Inflections","abstract":"<p><a href=\"http://github.com/groue/GRDB.swift#what-are-experimental-features\"><strong>Experimental</strong></a></p>"},"Structs/ValueObservation.html":{"name":"ValueObservation","abstract":"<p>ValueObservation tracks changes in the results of database requests, and"},"Protocols/DatabaseCancellable.html#/cancel()":{"name":"cancel()","abstract":"<p>Cancel the activity.</p>","parent_name":"DatabaseCancellable"},"Protocols/PersistableRecord.html#/willInsert(_:)":{"name":"willInsert(_:)","abstract":"<p>Persistence callback called before the record is inserted.</p>","parent_name":"PersistableRecord"},"Protocols/PersistableRecord.html#/didInsert(_:)":{"name":"didInsert(_:)","abstract":"<p>Persistence callback called upon successful insertion.</p>","parent_name":"PersistableRecord"},"Protocols/PersistableRecord.html#/insert(_:onConflict:)":{"name":"insert(_:onConflict:)","abstract":"<p>Executes an <code>INSERT</code> statement.</p>","parent_name":"PersistableRecord"},"Protocols/PersistableRecord.html#/insertAndFetch(_:onConflict:as:)":{"name":"insertAndFetch(_:onConflict:as:)","abstract":"<p>Executes an <code>INSERT ... RETURNING ...</code> statement, and returns a new","parent_name":"PersistableRecord"},"Protocols/PersistableRecord.html#/insertAndFetch(_:onConflict:selection:fetch:)":{"name":"insertAndFetch(_:onConflict:selection:fetch:)","abstract":"<p>Executes an <code>INSERT ... RETURNING ...</code> statement, and returns the","parent_name":"PersistableRecord"},"Protocols/PersistableRecord.html#/save(_:onConflict:)":{"name":"save(_:onConflict:)","abstract":"<p>Executes an <code>INSERT</code> or <code>UPDATE</code> statement.</p>","parent_name":"PersistableRecord"},"Protocols/PersistableRecord.html#/saveAndFetch(_:onConflict:as:)":{"name":"saveAndFetch(_:onConflict:as:)","abstract":"<p>Executes an <code>INSERT ... RETURNING ...</code> or <code>UPDATE ... RETURNING ...</code>","parent_name":"PersistableRecord"},"Protocols/PersistableRecord.html#/saveAndFetch(_:onConflict:selection:fetch:)":{"name":"saveAndFetch(_:onConflict:selection:fetch:)","abstract":"<p>Executes an <code>INSERT ... RETURNING ...</code> or <code>UPDATE ... RETURNING ...</code>","parent_name":"PersistableRecord"},"Protocols/PersistableRecord.html#/upsert(_:)":{"name":"upsert(_:)","abstract":"<p>Executes an <code>INSERT ... ON CONFLICT DO UPDATE</code> statement.</p>","parent_name":"PersistableRecord"},"Protocols/PersistableRecord.html#/upsertAndFetch(_:onConflict:doUpdate:)":{"name":"upsertAndFetch(_:onConflict:doUpdate:)","abstract":"<p>Executes an <code>INSERT ... ON CONFLICT DO UPDATE ... RETURNING ...</code>","parent_name":"PersistableRecord"},"Protocols/PersistableRecord.html#/upsertAndFetch(_:as:onConflict:doUpdate:)":{"name":"upsertAndFetch(_:as:onConflict:doUpdate:)","abstract":"<p>Executes an <code>INSERT ... ON CONFLICT DO UPDATE ... RETURNING ...</code>","parent_name":"PersistableRecord"},"Protocols/MutablePersistableRecord.html#/persistenceConflictPolicy":{"name":"persistenceConflictPolicy","abstract":"<p>The policy that handles SQLite conflicts when records are inserted","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/willInsert(_:)":{"name":"willInsert(_:)","abstract":"<p>Persistence callback called before the record is inserted.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/aroundInsert(_:insert:)":{"name":"aroundInsert(_:insert:)","abstract":"<p>Persistence callback called around the record insertion.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/didInsert(_:)":{"name":"didInsert(_:)","abstract":"<p>Persistence callback called upon successful insertion.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/willUpdate(_:columns:)":{"name":"willUpdate(_:columns:)","abstract":"<p>Persistence callback called before the record is updated.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/aroundUpdate(_:columns:update:)":{"name":"aroundUpdate(_:columns:update:)","abstract":"<p>Persistence callback called around the record update.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/didUpdate(_:)":{"name":"didUpdate(_:)","abstract":"<p>Persistence callback called upon successful update.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/willSave(_:)":{"name":"willSave(_:)","abstract":"<p>Persistence callback called before the record is updated or inserted.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/aroundSave(_:save:)":{"name":"aroundSave(_:save:)","abstract":"<p>Persistence callback called around the record update or insertion.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/didSave(_:)":{"name":"didSave(_:)","abstract":"<p>Persistence callback called upon successful update or insertion.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/willDelete(_:)":{"name":"willDelete(_:)","abstract":"<p>Persistence callback called before the record is deleted.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/aroundDelete(_:delete:)":{"name":"aroundDelete(_:delete:)","abstract":"<p>Persistence callback called around the destruction of the record.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/didDelete(deleted:)":{"name":"didDelete(deleted:)","abstract":"<p>Persistence callback called upon successful deletion.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/delete(_:)":{"name":"delete(_:)","abstract":"<p>Executes a DELETE statement.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/insert(_:onConflict:)":{"name":"insert(_:onConflict:)","abstract":"<p>Executes an <code>INSERT</code> statement.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/inserted(_:onConflict:)":{"name":"inserted(_:onConflict:)","abstract":"<p>Executes an <code>INSERT</code> statement, and returns the inserted record.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/insertAndFetch(_:onConflict:)":{"name":"insertAndFetch(_:onConflict:)","abstract":"<p>Executes an <code>INSERT ... RETURNING ...</code> statement, and returns the","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/insertAndFetch(_:onConflict:as:)":{"name":"insertAndFetch(_:onConflict:as:)","abstract":"<p>Executes an <code>INSERT ... RETURNING ...</code> statement, and returns a new","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/insertAndFetch(_:onConflict:selection:fetch:)":{"name":"insertAndFetch(_:onConflict:selection:fetch:)","abstract":"<p>Executes an <code>INSERT ... RETURNING ...</code> statement, and returns the","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/save(_:onConflict:)":{"name":"save(_:onConflict:)","abstract":"<p>Executes an <code>INSERT</code> or <code>UPDATE</code> statement.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/saved(_:onConflict:)":{"name":"saved(_:onConflict:)","abstract":"<p>Executes an <code>INSERT</code> or <code>UPDATE</code> statement, and returns the","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/saveAndFetch(_:onConflict:)":{"name":"saveAndFetch(_:onConflict:)","abstract":"<p>Executes an <code>INSERT ... RETURNING ...</code> or <code>UPDATE ... RETURNING ...</code>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/saveAndFetch(_:onConflict:as:)":{"name":"saveAndFetch(_:onConflict:as:)","abstract":"<p>Executes an <code>INSERT ... RETURNING ...</code> or <code>UPDATE ... RETURNING ...</code>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/saveAndFetch(_:onConflict:selection:fetch:)":{"name":"saveAndFetch(_:onConflict:selection:fetch:)","abstract":"<p>Executes an <code>INSERT ... RETURNING ...</code> or <code>UPDATE ... RETURNING ...</code>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/update(_:onConflict:columns:)":{"name":"update(_:onConflict:columns:)","abstract":"<p>Executes an <code>UPDATE</code> statement on the provided columns.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/update(_:onConflict:)":{"name":"update(_:onConflict:)","abstract":"<p>Executes an <code>UPDATE</code> statement on all columns.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/updateChanges(_:onConflict:from:)":{"name":"updateChanges(_:onConflict:from:)","abstract":"<p>If the record has any difference from the other record, executes an","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/updateChanges(_:onConflict:modify:)":{"name":"updateChanges(_:onConflict:modify:)","abstract":"<p>Modifies the record according to the provided <code>modify</code> closure, and","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/updateAndFetch(_:onConflict:)":{"name":"updateAndFetch(_:onConflict:)","abstract":"<p>Executes an <code>UPDATE ... RETURNING ...</code> statement, and returns the","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/updateAndFetch(_:onConflict:as:)":{"name":"updateAndFetch(_:onConflict:as:)","abstract":"<p>Executes an <code>UPDATE ... RETURNING ...</code> statement on all columns, and","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/updateChangesAndFetch(_:onConflict:modify:)":{"name":"updateChangesAndFetch(_:onConflict:modify:)","abstract":"<p>Modifies the record according to the provided <code>modify</code> closure, and","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/updateChangesAndFetch(_:onConflict:as:modify:)":{"name":"updateChangesAndFetch(_:onConflict:as:modify:)","abstract":"<p>Modifies the record according to the provided <code>modify</code> closure, and","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/updateAndFetch(_:onConflict:columns:selection:fetch:)":{"name":"updateAndFetch(_:onConflict:columns:selection:fetch:)","abstract":"<p>Executes an <code>UPDATE ... RETURNING ...</code> statement on the provided","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/updateAndFetch(_:onConflict:selection:fetch:)":{"name":"updateAndFetch(_:onConflict:selection:fetch:)","abstract":"<p>Executes an <code>UPDATE ... RETURNING ...</code> statement on all columns, and","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/updateChangesAndFetch(_:onConflict:selection:fetch:modify:)":{"name":"updateChangesAndFetch(_:onConflict:selection:fetch:modify:)","abstract":"<p>Modifies the record according to the provided <code>modify</code> closure, and","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/upsert(_:)":{"name":"upsert(_:)","abstract":"<p>Executes an <code>INSERT ... ON CONFLICT DO UPDATE</code> statement.</p>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/upsertAndFetch(_:onConflict:doUpdate:)":{"name":"upsertAndFetch(_:onConflict:doUpdate:)","abstract":"<p>Executes an <code>INSERT ... ON CONFLICT DO UPDATE ... RETURNING ...</code>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/upsertAndFetch(_:as:onConflict:doUpdate:)":{"name":"upsertAndFetch(_:as:onConflict:doUpdate:)","abstract":"<p>Executes an <code>INSERT ... ON CONFLICT DO UPDATE ... RETURNING ...</code>","parent_name":"MutablePersistableRecord"},"Protocols/MutablePersistableRecord.html#/exists(_:)":{"name":"exists(_:)","abstract":"<p>Returns true if and only if the primary key matches a row in","parent_name":"MutablePersistableRecord"},"Protocols/FetchableRecord.html#/init(row:)":{"name":"init(row:)","abstract":"<p>Creates a record from <code>row</code>.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/databaseDecodingUserInfo":{"name":"databaseDecodingUserInfo","abstract":"<p>When the FetchableRecord type also adopts the standard Decodable","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/databaseJSONDecoder(for:)":{"name":"databaseJSONDecoder(for:)","abstract":"<p>When the FetchableRecord type also adopts the standard Decodable","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/databaseDateDecodingStrategy":{"name":"databaseDateDecodingStrategy","abstract":"<p>When the FetchableRecord type also adopts the standard Decodable","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/databaseColumnDecodingStrategy":{"name":"databaseColumnDecodingStrategy","abstract":"<p>When the FetchableRecord type also adopts the standard Decodable","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchCursor(_:)":{"name":"fetchCursor(_:)","abstract":"<p>A cursor over all records fetched from the database.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchAll(_:)":{"name":"fetchAll(_:)","abstract":"<p>An array of all records fetched from the database.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchOne(_:)":{"name":"fetchOne(_:)","abstract":"<p>The first found record.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchSet(_:)":{"name":"fetchSet(_:)","abstract":"<p>A set of all records fetched from the database.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchCursor(_:keys:)":{"name":"fetchCursor(_:keys:)","abstract":"<p>Returns a cursor over records, given their primary keys.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchAll(_:keys:)":{"name":"fetchAll(_:keys:)","abstract":"<p>Returns an array of records, given their primary keys.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchOne(_:key:)":{"name":"fetchOne(_:key:)","abstract":"<p>Returns a single record given its primary key.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchSet(_:keys:)":{"name":"fetchSet(_:keys:)","abstract":"<p>Returns a set of records, given their primary keys.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchCursor(_:arguments:adapter:)":{"name":"fetchCursor(_:arguments:adapter:)","abstract":"<p>A cursor over records fetched from a prepared statement.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchAll(_:arguments:adapter:)":{"name":"fetchAll(_:arguments:adapter:)","abstract":"<p>Returns an array of records fetched from a prepared statement.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchOne(_:arguments:adapter:)":{"name":"fetchOne(_:arguments:adapter:)","abstract":"<p>Returns a single record fetched from a prepared statement.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchSet(_:arguments:adapter:)":{"name":"fetchSet(_:arguments:adapter:)","abstract":"<p>Returns a set of records fetched from a prepared statement.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchCursor(_:sql:arguments:adapter:)":{"name":"fetchCursor(_:sql:arguments:adapter:)","abstract":"<p>Returns a cursor over records fetched from an SQL query.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchAll(_:sql:arguments:adapter:)":{"name":"fetchAll(_:sql:arguments:adapter:)","abstract":"<p>Returns an array of records fetched from an SQL query.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchOne(_:sql:arguments:adapter:)":{"name":"fetchOne(_:sql:arguments:adapter:)","abstract":"<p>Returns a single record fetched from an SQL query.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchSet(_:sql:arguments:adapter:)":{"name":"fetchSet(_:sql:arguments:adapter:)","abstract":"<p>Returns a set of records fetched from an SQL query.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchCursor(_:_:)":{"name":"fetchCursor(_:_:)","abstract":"<p>Returns a cursor over records fetched from a fetch request.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchAll(_:_:)":{"name":"fetchAll(_:_:)","abstract":"<p>Returns an array of records fetched from a fetch request.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchOne(_:_:)":{"name":"fetchOne(_:_:)","abstract":"<p>Returns a single record fetched from a fetch request.</p>","parent_name":"FetchableRecord"},"Protocols/FetchableRecord.html#/fetchSet(_:_:)":{"name":"fetchSet(_:_:)","abstract":"<p>Returns a set of records fetched from a fetch request.</p>","parent_name":"FetchableRecord"},"Protocols/EncodableRecord.html#/encode(to:)":{"name":"encode(to:)","abstract":"<p>Encodes the record into database values.</p>","parent_name":"EncodableRecord"},"Protocols/EncodableRecord.html#/databaseEncodingUserInfo":{"name":"databaseEncodingUserInfo","abstract":"<p>When the EncodableRecord type also adopts the standard Encodable","parent_name":"EncodableRecord"},"Protocols/EncodableRecord.html#/databaseJSONEncoder(for:)":{"name":"databaseJSONEncoder(for:)","abstract":"<p>When the EncodableRecord type also adopts the standard Encodable","parent_name":"EncodableRecord"},"Protocols/EncodableRecord.html#/databaseDateEncodingStrategy":{"name":"databaseDateEncodingStrategy","abstract":"<p>When the EncodableRecord type also adopts the standard Encodable","parent_name":"EncodableRecord"},"Protocols/EncodableRecord.html#/databaseUUIDEncodingStrategy":{"name":"databaseUUIDEncodingStrategy","abstract":"<p>When the EncodableRecord type also adopts the standard Encodable","parent_name":"EncodableRecord"},"Protocols/EncodableRecord.html#/databaseColumnEncodingStrategy":{"name":"databaseColumnEncodingStrategy","abstract":"<p>When the EncodableRecord type also adopts the standard Encodable","parent_name":"EncodableRecord"},"Protocols/EncodableRecord.html#/databaseDictionary":{"name":"databaseDictionary","abstract":"<p>A dictionary whose keys are the columns encoded in the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/EncodableRecord.html#/encode(to:)\">encode(to:)</a></code> method.</p>","parent_name":"EncodableRecord"},"Protocols/EncodableRecord.html#/databaseEquals(_:)":{"name":"databaseEquals(_:)","abstract":"<p>Returns a boolean indicating whether this record and the other record","parent_name":"EncodableRecord"},"Protocols/EncodableRecord.html#/databaseChanges(from:)":{"name":"databaseChanges(from:)","abstract":"<p>A dictionary of values changed from the other record.</p>","parent_name":"EncodableRecord"},"Protocols/VirtualTableModule.html#/TableDefinition":{"name":"TableDefinition","abstract":"<p>The type of the closure argument in the","parent_name":"VirtualTableModule"},"Protocols/VirtualTableModule.html#/moduleName":{"name":"moduleName","abstract":"<p>The name of the module.</p>","parent_name":"VirtualTableModule"},"Protocols/VirtualTableModule.html#/makeTableDefinition(configuration:)":{"name":"makeTableDefinition(configuration:)","abstract":"<p>Returns a table definition that is passed as the closure argument in the","parent_name":"VirtualTableModule"},"Protocols/VirtualTableModule.html#/moduleArguments(for:in:)":{"name":"moduleArguments(for:in:)","abstract":"<p>Returns the module arguments for the <code>CREATE VIRTUAL TABLE</code> query.</p>","parent_name":"VirtualTableModule"},"Protocols/VirtualTableModule.html#/database(_:didCreate:using:)":{"name":"database(_:didCreate:using:)","abstract":"<p>Execute any relevant database statement after the virtual table has","parent_name":"VirtualTableModule"},"Protocols/SQLSubqueryable.html#/sqlSubquery":{"name":"sqlSubquery","parent_name":"SQLSubqueryable"},"Protocols/SQLSubqueryable.html#/sqlExpression":{"name":"sqlExpression","abstract":"<p>Returns a subquery expression.</p>","parent_name":"SQLSubqueryable"},"Protocols/SQLSubqueryable.html#/contains(_:)":{"name":"contains(_:)","abstract":"<p>Returns an expression that checks the inclusion of the expression in","parent_name":"SQLSubqueryable"},"Protocols/SQLSubqueryable.html#/exists()":{"name":"exists()","abstract":"<p>Returns an expression that is true if and only if the subquery would","parent_name":"SQLSubqueryable"},"Protocols/SQLSpecificExpressible.html#/sqlSelection":{"name":"sqlSelection","parent_name":"SQLSpecificExpressible"},"Protocols/SQLSpecificExpressible.html#/sqlOrdering":{"name":"sqlOrdering","parent_name":"SQLSpecificExpressible"},"Protocols/SQLSpecificExpressible.html#/asc":{"name":"asc","abstract":"<p>Returns a value that can be used as an argument to QueryInterfaceRequest.order()</p>","parent_name":"SQLSpecificExpressible"},"Protocols/SQLSpecificExpressible.html#/desc":{"name":"desc","abstract":"<p>Returns a value that can be used as an argument to QueryInterfaceRequest.order()</p>","parent_name":"SQLSpecificExpressible"},"Protocols/SQLSpecificExpressible.html#/ascNullsLast":{"name":"ascNullsLast","abstract":"<p>Returns a value that can be used as an argument to QueryInterfaceRequest.order()</p>","parent_name":"SQLSpecificExpressible"},"Protocols/SQLSpecificExpressible.html#/descNullsFirst":{"name":"descNullsFirst","abstract":"<p>Returns a value that can be used as an argument to QueryInterfaceRequest.order()</p>","parent_name":"SQLSpecificExpressible"},"Protocols/SQLSpecificExpressible.html#/forKey(_:)":{"name":"forKey(_:)","abstract":"<p>Returns an aliased column.</p>","parent_name":"SQLSpecificExpressible"},"Protocols/SQLSpecificExpressible.html#/collating(_:)":{"name":"collating(_:)","abstract":"<p>Returns a collated expression.</p>","parent_name":"SQLSpecificExpressible"},"Protocols/SQLSpecificExpressible.html#/like(_:escape:)":{"name":"like(_:escape:)","abstract":"<p>An SQL expression with the <code>LIKE</code> SQL operator.</p>","parent_name":"SQLSpecificExpressible"},"Protocols/DerivableRequest.html#/distinct()":{"name":"distinct()","abstract":"<p>Creates a request which returns distinct rows.</p>","parent_name":"DerivableRequest"},"Protocols/DerivableRequest.html#/with(_:)":{"name":"with(_:)","abstract":"<p>Returns a request which embeds the common table expression.</p>","parent_name":"DerivableRequest"},"Protocols/DerivableRequest.html#/annotated(with:)":{"name":"annotated(with:)","abstract":"<p>Creates a request which appends <em>aggregates</em> to the current selection.</p>","parent_name":"DerivableRequest"},"Protocols/DerivableRequest.html#/having(_:)":{"name":"having(_:)","abstract":"<p>Creates a request which appends the provided aggregate <em>predicate</em> to","parent_name":"DerivableRequest"},"Protocols/JoinableRequest.html#/including(all:)":{"name":"including(all:)","abstract":"<p>Creates a request that prefetches an association.</p>","parent_name":"JoinableRequest"},"Protocols/JoinableRequest.html#/including(optional:)":{"name":"including(optional:)","abstract":"<p>Creates a request that includes an association. The columns of the","parent_name":"JoinableRequest"},"Protocols/JoinableRequest.html#/including(required:)":{"name":"including(required:)","abstract":"<p>Creates a request that includes an association. The columns of the","parent_name":"JoinableRequest"},"Protocols/JoinableRequest.html#/joining(optional:)":{"name":"joining(optional:)","abstract":"<p>Creates a request that joins an association. The columns of the","parent_name":"JoinableRequest"},"Protocols/JoinableRequest.html#/joining(required:)":{"name":"joining(required:)","abstract":"<p>Creates a request that joins an association. The columns of the","parent_name":"JoinableRequest"},"Protocols/JoinableRequest.html#/annotated(withOptional:)":{"name":"annotated(withOptional:)","abstract":"<p>Creates a request which appends <em>columns of an associated record</em> to","parent_name":"JoinableRequest"},"Protocols/JoinableRequest.html#/annotated(withRequired:)":{"name":"annotated(withRequired:)","abstract":"<p>Creates a request which appends <em>columns of an associated record</em> to","parent_name":"JoinableRequest"},"Protocols/OrderedRequest.html#/orderWhenConnected(_:)":{"name":"orderWhenConnected(_:)","abstract":"<p>Creates a request with the provided <em>orderings promise</em>.</p>","parent_name":"OrderedRequest"},"Protocols/OrderedRequest.html#/reversed()":{"name":"reversed()","abstract":"<p>Creates a request that reverses applied orderings.</p>","parent_name":"OrderedRequest"},"Protocols/OrderedRequest.html#/unordered()":{"name":"unordered()","abstract":"<p>Creates a request without any ordering.</p>","parent_name":"OrderedRequest"},"Protocols/OrderedRequest.html#/order(_:)":{"name":"order(_:)","abstract":"<p>Creates a request with the provided <em>orderings</em>.</p>","parent_name":"OrderedRequest"},"Protocols/OrderedRequest.html#/order(sql:arguments:)":{"name":"order(sql:arguments:)","abstract":"<p>Creates a request sorted according to <em>sql</em>.</p>","parent_name":"OrderedRequest"},"Protocols/OrderedRequest.html#/order(literal:)":{"name":"order(literal:)","abstract":"<p>Creates a request sorted according to an SQL <em>literal</em>.</p>","parent_name":"OrderedRequest"},"Protocols/AggregatingRequest.html#/groupWhenConnected(_:)":{"name":"groupWhenConnected(_:)","abstract":"<p>Creates a request grouped according to <em>expressions promise</em>.</p>","parent_name":"AggregatingRequest"},"Protocols/AggregatingRequest.html#/havingWhenConnected(_:)":{"name":"havingWhenConnected(_:)","abstract":"<p>Creates a request with the provided <em>predicate promise</em> added to the","parent_name":"AggregatingRequest"},"Protocols/AggregatingRequest.html#/group(_:)":{"name":"group(_:)","abstract":"<p>Creates a request grouped according to <em>expressions</em>.</p>","parent_name":"AggregatingRequest"},"Protocols/AggregatingRequest.html#/group(sql:arguments:)":{"name":"group(sql:arguments:)","abstract":"<p>Creates a request with a new grouping.</p>","parent_name":"AggregatingRequest"},"Protocols/AggregatingRequest.html#/group(literal:)":{"name":"group(literal:)","abstract":"<p>Creates a request with a new grouping.</p>","parent_name":"AggregatingRequest"},"Protocols/AggregatingRequest.html#/having(_:)":{"name":"having(_:)","abstract":"<p>Creates a request with the provided <em>predicate</em> added to the","parent_name":"AggregatingRequest"},"Protocols/AggregatingRequest.html#/having(sql:arguments:)":{"name":"having(sql:arguments:)","abstract":"<p>Creates a request with the provided <em>sql</em> added to the","parent_name":"AggregatingRequest"},"Protocols/AggregatingRequest.html#/having(literal:)":{"name":"having(literal:)","abstract":"<p>Creates a request with the provided SQL <em>literal</em> added to the","parent_name":"AggregatingRequest"},"Protocols/FilteredRequest.html#/filterWhenConnected(_:)":{"name":"filterWhenConnected(_:)","abstract":"<p>Creates a request with the provided <em>predicate promise</em> added to the","parent_name":"FilteredRequest"},"Protocols/FilteredRequest.html#/filter(_:)":{"name":"filter(_:)","abstract":"<p>Creates a request with the provided <em>predicate</em> added to the","parent_name":"FilteredRequest"},"Protocols/FilteredRequest.html#/filter(sql:arguments:)":{"name":"filter(sql:arguments:)","abstract":"<p>Creates a request with the provided <em>predicate</em> added to the","parent_name":"FilteredRequest"},"Protocols/FilteredRequest.html#/filter(literal:)":{"name":"filter(literal:)","abstract":"<p>Creates a request with the provided <em>predicate</em> added to the","parent_name":"FilteredRequest"},"Protocols/FilteredRequest.html#/none()":{"name":"none()","abstract":"<p>Creates a request that matches nothing.</p>","parent_name":"FilteredRequest"},"Protocols/SelectionRequest.html#/selectWhenConnected(_:)":{"name":"selectWhenConnected(_:)","abstract":"<p>Creates a request which selects <em>selection promise</em>.</p>","parent_name":"SelectionRequest"},"Protocols/SelectionRequest.html#/annotatedWhenConnected(with:)":{"name":"annotatedWhenConnected(with:)","abstract":"<p>Creates a request which appends <em>selection promise</em>.</p>","parent_name":"SelectionRequest"},"Protocols/SelectionRequest.html#/select(_:)":{"name":"select(_:)","abstract":"<p>Creates a request which selects <em>selection</em>.</p>","parent_name":"SelectionRequest"},"Protocols/SelectionRequest.html#/select(sql:arguments:)":{"name":"select(sql:arguments:)","abstract":"<p>Creates a request which selects <em>sql</em>.</p>","parent_name":"SelectionRequest"},"Protocols/SelectionRequest.html#/select(literal:)":{"name":"select(literal:)","abstract":"<p>Creates a request which selects an SQL <em>literal</em>.</p>","parent_name":"SelectionRequest"},"Protocols/SelectionRequest.html#/annotated(with:)":{"name":"annotated(with:)","abstract":"<p>Creates a request which appends <em>selection</em>.</p>","parent_name":"SelectionRequest"},"Protocols/TypedRequest.html#/RowDecoder":{"name":"RowDecoder","abstract":"<p>The type that can decode database rows.</p>","parent_name":"TypedRequest"},"Protocols/AssociationToMany.html#/forKey(_:)":{"name":"forKey(_:)","parent_name":"AssociationToMany"},"Protocols/AssociationToMany.html#/count":{"name":"count","abstract":"<p>The number of associated records.</p>","parent_name":"AssociationToMany"},"Protocols/AssociationToMany.html#/isEmpty":{"name":"isEmpty","abstract":"<p>Creates an aggregate that is true if there exists no associated records.</p>","parent_name":"AssociationToMany"},"Protocols/AssociationToMany.html#/average(_:)":{"name":"average(_:)","abstract":"<p>Creates an aggregate which evaluate to the average value of the given","parent_name":"AssociationToMany"},"Protocols/AssociationToMany.html#/max(_:)":{"name":"max(_:)","abstract":"<p>Creates an aggregate which evaluate to the maximum value of the given","parent_name":"AssociationToMany"},"Protocols/AssociationToMany.html#/min(_:)":{"name":"min(_:)","abstract":"<p>Creates an aggregate which evaluate to the minimum value of the given","parent_name":"AssociationToMany"},"Protocols/AssociationToMany.html#/sum(_:)":{"name":"sum(_:)","abstract":"<p>Creates an aggregate which evaluate to the sum of the given expression","parent_name":"AssociationToMany"},"Protocols/AssociationToMany.html#/total(_:)":{"name":"total(_:)","abstract":"<p>Creates an aggregate which evaluate to the sum of the given expression","parent_name":"AssociationToMany"},"Protocols/AssociationToOne.html#/forKey(_:)":{"name":"forKey(_:)","parent_name":"AssociationToOne"},"Protocols/Association.html#/OriginRowDecoder":{"name":"OriginRowDecoder","abstract":"<p>The record type at the origin of the association.</p>","parent_name":"Association"},"Protocols/Association.html#/forKey(_:)":{"name":"forKey(_:)","abstract":"<p>Creates an association with the given key.</p>","parent_name":"Association"},"Protocols/Association.html#/aliased(_:)":{"name":"aliased(_:)","abstract":"<p>Creates an association that allows you to define expressions that target","parent_name":"Association"},"Protocols/Association.html#/selectWhenConnected(_:)":{"name":"selectWhenConnected(_:)","abstract":"<p>Creates an association which selects <em>selection</em>.</p>","parent_name":"Association"},"Protocols/Association.html#/annotatedWhenConnected(with:)":{"name":"annotatedWhenConnected(with:)","abstract":"<p>Creates an association which appends <em>selection</em>.</p>","parent_name":"Association"},"Protocols/Association.html#/filterWhenConnected(_:)":{"name":"filterWhenConnected(_:)","abstract":"<p>Creates an association with the provided <em>predicate promise</em> added to","parent_name":"Association"},"Protocols/Association.html#/orderWhenConnected(_:)":{"name":"orderWhenConnected(_:)","abstract":"<p>Creates an association with the provided <em>orderings promise</em>.</p>","parent_name":"Association"},"Protocols/Association.html#/reversed()":{"name":"reversed()","abstract":"<p>Creates an association that reverses applied orderings.</p>","parent_name":"Association"},"Protocols/Association.html#/unordered()":{"name":"unordered()","abstract":"<p>Creates an association without any ordering.</p>","parent_name":"Association"},"Protocols/Association.html#/databaseTableName":{"name":"databaseTableName","parent_name":"Association"},"Protocols/Association.html#/groupWhenConnected(_:)":{"name":"groupWhenConnected(_:)","abstract":"<p>Creates an association grouped according to <em>expressions promise</em>.</p>","parent_name":"Association"},"Protocols/Association.html#/havingWhenConnected(_:)":{"name":"havingWhenConnected(_:)","abstract":"<p>Creates an association with the provided <em>predicate promise</em> added to","parent_name":"Association"},"Protocols/Association.html#/distinct()":{"name":"distinct()","abstract":"<p>Creates an association for returns distinct rows.</p>","parent_name":"Association"},"Protocols/Association.html#/with(_:)":{"name":"with(_:)","abstract":"<p>Returns an association that embeds the common table expression.</p>","parent_name":"Association"},"Protocols/ColumnExpression.html#/name":{"name":"name","abstract":"<p>The unqualified name of a database column.</p>","parent_name":"ColumnExpression"},"Protocols/ColumnExpression.html#/match(_:)":{"name":"match(_:)","abstract":"<p>A matching SQL expression with the <code>MATCH</code> SQL operator.</p>","parent_name":"ColumnExpression"},"Protocols/ColumnExpression.html#/set(to:)":{"name":"set(to:)","abstract":"<p>Creates an assignment to a value.</p>","parent_name":"ColumnExpression"},"Protocols/ColumnExpression.html#/noOverwrite":{"name":"noOverwrite","abstract":"<p>Returns an assignment that does not modify this column.</p>","parent_name":"ColumnExpression"},"Protocols/ColumnExpression.html#/sqlExpression":{"name":"sqlExpression","parent_name":"ColumnExpression"},"Protocols/ColumnExpression.html#/detached":{"name":"detached","abstract":"<p>Returns a &ldquo;detached column&rdquo;, which is never qualified with any table","parent_name":"ColumnExpression"},"Protocols/ColumnExpression.html#/rowID":{"name":"rowID","abstract":"<p>The hidden rowID column</p>","parent_name":"ColumnExpression"},"Protocols/TableRecord.html#/databaseTableName":{"name":"databaseTableName","abstract":"<p>The name of the database table used to build requests.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/databaseSelection":{"name":"databaseSelection","abstract":"<p>The default request selection.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/matching(_:)":{"name":"matching(_:)","abstract":"<p>Returns a QueryInterfaceRequest with a matching predicate.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/belongsTo(_:key:using:)":{"name":"belongsTo(_:key:using:)","abstract":"<p>Creates a &ldquo;Belongs To&rdquo; association between Self and the destination","parent_name":"TableRecord"},"Protocols/TableRecord.html#/hasMany(_:key:using:)":{"name":"hasMany(_:key:using:)","abstract":"<p>Creates a &ldquo;Has many&rdquo; association between Self and the destination type,","parent_name":"TableRecord"},"Protocols/TableRecord.html#/hasOne(_:key:using:)":{"name":"hasOne(_:key:using:)","abstract":"<p>Creates a &ldquo;Has one&rdquo; association between Self and the destination type,","parent_name":"TableRecord"},"Protocols/TableRecord.html#/association(to:on:)":{"name":"association(to:on:)","abstract":"<p>Creates an association to a common table expression that you can join","parent_name":"TableRecord"},"Protocols/TableRecord.html#/association(to:)":{"name":"association(to:)","abstract":"<p>Creates an association to a common table expression that you can join","parent_name":"TableRecord"},"Protocols/TableRecord.html#/hasMany(_:through:using:key:)":{"name":"hasMany(_:through:using:key:)","abstract":"<p>Creates a &ldquo;Has Many Through&rdquo; association between Self and the","parent_name":"TableRecord"},"Protocols/TableRecord.html#/hasOne(_:through:using:key:)":{"name":"hasOne(_:through:using:key:)","abstract":"<p>Creates a &ldquo;Has One Through&rdquo; association between Self and the","parent_name":"TableRecord"},"Protocols/TableRecord.html#/request(for:)":{"name":"request(for:)","abstract":"<p>Creates a request that fetches the associated record(s).</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/including(all:)":{"name":"including(all:)","abstract":"<p>Creates a request that prefetches an association.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/including(optional:)":{"name":"including(optional:)","abstract":"<p>Creates a request that includes an association. The columns of the","parent_name":"TableRecord"},"Protocols/TableRecord.html#/including(required:)":{"name":"including(required:)","abstract":"<p>Creates a request that includes an association. The columns of the","parent_name":"TableRecord"},"Protocols/TableRecord.html#/joining(optional:)":{"name":"joining(optional:)","abstract":"<p>Creates a request that includes an association. The columns of the","parent_name":"TableRecord"},"Protocols/TableRecord.html#/joining(required:)":{"name":"joining(required:)","abstract":"<p>Creates a request that includes an association. The columns of the","parent_name":"TableRecord"},"Protocols/TableRecord.html#/annotated(withOptional:)":{"name":"annotated(withOptional:)","abstract":"<p>Creates a request which appends <em>columns of an associated record</em> to","parent_name":"TableRecord"},"Protocols/TableRecord.html#/annotated(withRequired:)":{"name":"annotated(withRequired:)","abstract":"<p>Creates a request which appends <em>columns of an associated record</em> to","parent_name":"TableRecord"},"Protocols/TableRecord.html#/annotated(with:)":{"name":"annotated(with:)","abstract":"<p>Creates a request with <em>aggregates</em> appended to the selection.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/having(_:)":{"name":"having(_:)","abstract":"<p>Creates a request with the provided aggregate <em>predicate</em>.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/all()":{"name":"all()","abstract":"<p>Creates a request which fetches all records.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/none()":{"name":"none()","abstract":"<p>Creates a request which fetches no record.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/select(_:)":{"name":"select(_:)","abstract":"<p>Creates a request which selects <em>selection</em>.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/select(sql:arguments:)":{"name":"select(sql:arguments:)","abstract":"<p>Creates a request which selects <em>sql</em>.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/select(literal:)":{"name":"select(literal:)","abstract":"<p>Creates a request which selects an SQL <em>literal</em>.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/select(_:as:)":{"name":"select(_:as:)","abstract":"<p>Creates a request which selects <em>selection</em>, and fetches values of","parent_name":"TableRecord"},"Protocols/TableRecord.html#/select(sql:arguments:as:)":{"name":"select(sql:arguments:as:)","abstract":"<p>Creates a request which selects <em>sql</em>, and fetches values of","parent_name":"TableRecord"},"Protocols/TableRecord.html#/select(literal:as:)":{"name":"select(literal:as:)","abstract":"<p>Creates a request which selects an SQL <em>literal</em>, and fetches values of","parent_name":"TableRecord"},"Protocols/TableRecord.html#/selectPrimaryKey(as:)":{"name":"selectPrimaryKey(as:)","abstract":"<p>Creates a request which selects the primary key.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/filter(_:)":{"name":"filter(_:)","abstract":"<p>Creates a request with the provided <em>predicate</em>.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/filter(key:)":{"name":"filter(key:)","abstract":"<p>Creates a request with the provided primary key <em>predicate</em>.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/filter(keys:)":{"name":"filter(keys:)","abstract":"<p>Creates a request with the provided primary key <em>predicate</em>.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/filter(sql:arguments:)":{"name":"filter(sql:arguments:)","abstract":"<p>Creates a request with the provided <em>predicate</em>.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/filter(literal:)":{"name":"filter(literal:)","abstract":"<p>Creates a request with the provided <em>predicate</em> added to the","parent_name":"TableRecord"},"Protocols/TableRecord.html#/order(_:)":{"name":"order(_:)","abstract":"<p>Creates a request sorted according to the","parent_name":"TableRecord"},"Protocols/TableRecord.html#/orderByPrimaryKey()":{"name":"orderByPrimaryKey()","abstract":"<p>Creates a request sorted by primary key.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/order(sql:arguments:)":{"name":"order(sql:arguments:)","abstract":"<p>Creates a request sorted according to <em>sql</em>.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/order(literal:)":{"name":"order(literal:)","abstract":"<p>Creates a request sorted according to an SQL <em>literal</em>.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/limit(_:offset:)":{"name":"limit(_:offset:)","abstract":"<p>Creates a request which fetches <em>limit</em> rows, starting at","parent_name":"TableRecord"},"Protocols/TableRecord.html#/aliased(_:)":{"name":"aliased(_:)","abstract":"<p>Creates a request that allows you to define expressions that target","parent_name":"TableRecord"},"Protocols/TableRecord.html#/with(_:)":{"name":"with(_:)","abstract":"<p>Returns a request which embeds the common table expression.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/fetchCount(_:)":{"name":"fetchCount(_:)","abstract":"<p>The number of records.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/numberOfSelectedColumns(_:)":{"name":"numberOfSelectedColumns(_:)","abstract":"<p>Returns the number of selected columns.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/deleteAll(_:)":{"name":"deleteAll(_:)","abstract":"<p>Deletes all records, and returns the number of deleted records.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/exists(_:key:)":{"name":"exists(_:key:)","abstract":"<p>Returns whether a record exists for this primary key.</p>","parent_name":"TableRecord"},"Protocols/TableRecord.html#/deleteAll(_:keys:)":{"name":"deleteAll(_:keys:)","abstract":"<p>Delete records identified by their primary keys, and returns the number","parent_name":"TableRecord"},"Protocols/TableRecord.html#/deleteOne(_:key:)":{"name":"deleteOne(_:key:)","abstract":"<p>Delete a record, identified by its primary key, and returns whether a","parent_name":"TableRecord"},"Protocols/TableRecord.html#/updateAll(_:onConflict:_:)":{"name":"updateAll(_:onConflict:_:)","abstract":"<p>Updates all records, and returns the number of updated records.</p>","parent_name":"TableRecord"},"Protocols/TableRequest.html#/databaseTableName":{"name":"databaseTableName","abstract":"<p>The name of the database table</p>","parent_name":"TableRequest"},"Protocols/TableRequest.html#/aliased(_:)":{"name":"aliased(_:)","abstract":"<p>Creates a request that allows you to define expressions that target","parent_name":"TableRequest"},"Protocols/TableRequest.html#/matching(_:)":{"name":"matching(_:)","abstract":"<p>Creates a request with a full-text predicate added to the eventual","parent_name":"TableRequest"},"Protocols/TableRequest.html#/filter(key:)":{"name":"filter(key:)","abstract":"<p>Creates a request filtered by primary key.</p>","parent_name":"TableRequest"},"Protocols/TableRequest.html#/filter(keys:)":{"name":"filter(keys:)","abstract":"<p>Creates a request filtered by primary key.</p>","parent_name":"TableRequest"},"Protocols/TableRequest.html#/orderByPrimaryKey()":{"name":"orderByPrimaryKey()","abstract":"<p>Creates a request ordered by primary key.</p>","parent_name":"TableRequest"},"Protocols/TableRequest.html#/groupByPrimaryKey()":{"name":"groupByPrimaryKey()","abstract":"<p>Creates a request grouped by primary key.</p>","parent_name":"TableRequest"},"Protocols/FTS5WrapperTokenizer.html#/wrappedTokenizer":{"name":"wrappedTokenizer","abstract":"<p>The wrapped tokenizer</p>","parent_name":"FTS5WrapperTokenizer"},"Protocols/FTS5WrapperTokenizer.html#/accept(token:flags:for:tokenCallback:)":{"name":"accept(token:flags:for:tokenCallback:)","abstract":"<p>Given a token produced by the wrapped tokenizer, notifies customized","parent_name":"FTS5WrapperTokenizer"},"Protocols/FTS5WrapperTokenizer.html#/tokenize(context:tokenization:pText:nText:tokenCallback:)":{"name":"tokenize(context:tokenization:pText:nText:tokenCallback:)","abstract":"<p>Default implementation</p>","parent_name":"FTS5WrapperTokenizer"},"Protocols/FTS5Tokenizer.html#/tokenize(context:tokenization:pText:nText:tokenCallback:)":{"name":"tokenize(context:tokenization:pText:nText:tokenCallback:)","abstract":"<p>Tokenizes the text described by <code>pText</code> and <code>nText</code>, and","parent_name":"FTS5Tokenizer"},"Protocols/FTS5Tokenizer.html#/tokenize(document:)":{"name":"tokenize(document:)","abstract":"<p>Tokenizes the string argument as a document that would be inserted into","parent_name":"FTS5Tokenizer"},"Protocols/FTS5Tokenizer.html#/tokenize(query:)":{"name":"tokenize(query:)","abstract":"<p>Tokenizes the string argument as an FTS5 query.</p>","parent_name":"FTS5Tokenizer"},"Protocols/FTS5CustomTokenizer.html#/name":{"name":"name","abstract":"<p>The name of the tokenizer; should uniquely identify your custom","parent_name":"FTS5CustomTokenizer"},"Protocols/FTS5CustomTokenizer.html#/init(db:arguments:)":{"name":"init(db:arguments:)","abstract":"<p>Creates a custom tokenizer.</p>","parent_name":"FTS5CustomTokenizer"},"Protocols/FTS5CustomTokenizer.html#/tokenizerDescriptor(arguments:)":{"name":"tokenizerDescriptor(arguments:)","abstract":"<p>Creates an FTS5 tokenizer descriptor.</p>","parent_name":"FTS5CustomTokenizer"},"Protocols/TransactionObserver.html#/observes(eventsOfKind:)":{"name":"observes(eventsOfKind:)","abstract":"<p>Filters database changes that should be notified the the","parent_name":"TransactionObserver"},"Protocols/TransactionObserver.html#/databaseDidChange(with:)":{"name":"databaseDidChange(with:)","abstract":"<p>Notifies a database change (insert, update, or delete).</p>","parent_name":"TransactionObserver"},"Protocols/TransactionObserver.html#/databaseWillCommit()":{"name":"databaseWillCommit()","abstract":"<p>When a transaction is about to be committed, the transaction observer","parent_name":"TransactionObserver"},"Protocols/TransactionObserver.html#/databaseDidCommit(_:)":{"name":"databaseDidCommit(_:)","abstract":"<p>Database changes have been committed.</p>","parent_name":"TransactionObserver"},"Protocols/TransactionObserver.html#/databaseDidRollback(_:)":{"name":"databaseDidRollback(_:)","abstract":"<p>Database changes have been rollbacked.</p>","parent_name":"TransactionObserver"},"Protocols/TransactionObserver.html#/databaseWillChange(with:)":{"name":"databaseWillChange(with:)","abstract":"<p>Notifies before a database change (insert, update, or delete)","parent_name":"TransactionObserver"},"Protocols/TransactionObserver.html#/stopObservingDatabaseChangesUntilNextTransaction()":{"name":"stopObservingDatabaseChangesUntilNextTransaction()","abstract":"<p>After this method has been called, the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/TransactionObserver.html#/databaseDidChange(with:)\">databaseDidChange(with:)</a></code>","parent_name":"TransactionObserver"},"Protocols/SQLExpressible.html#/sqlExpression":{"name":"sqlExpression","abstract":"<p>Returns an SQL expression.</p>","parent_name":"SQLExpressible"},"Protocols/SQLExpressible.html#/rowID":{"name":"rowID","abstract":"<p>The hidden rowID column</p>","parent_name":"SQLExpressible"},"Protocols/SQLOrderingTerm.html#/sqlOrdering":{"name":"sqlOrdering","abstract":"<p>Returns an SQL ordering.</p>","parent_name":"SQLOrderingTerm"},"Protocols/SQLSelectable.html#/sqlSelection":{"name":"sqlSelection","abstract":"<p>Returns an SQL selection.</p>","parent_name":"SQLSelectable"},"Protocols/StatementColumnConvertible.html#/fromStatement(_:atUncheckedIndex:)":{"name":"fromStatement(_:atUncheckedIndex:)","abstract":"<p>Creates a value from a raw SQLite statement pointer, if possible.</p>","parent_name":"StatementColumnConvertible"},"Protocols/StatementColumnConvertible.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Creates a value from a raw SQLite statement pointer, if possible.</p>","parent_name":"StatementColumnConvertible"},"Protocols/StatementBinding.html#/bind(to:at:)":{"name":"bind(to:at:)","abstract":"<p>Binds a statement argument.</p>","parent_name":"StatementBinding"},"Protocols/DatabaseCursor.html#/sql":{"name":"sql","abstract":"<p>The SQL query</p>","parent_name":"DatabaseCursor"},"Protocols/DatabaseCursor.html#/arguments":{"name":"arguments","abstract":"<p>The SQL statement arguments.</p>","parent_name":"DatabaseCursor"},"Protocols/DatabaseCursor.html#/columnNames":{"name":"columnNames","abstract":"<p>The column names, ordered from left to right.</p>","parent_name":"DatabaseCursor"},"Protocols/DatabaseCursor.html#/columnCount":{"name":"columnCount","abstract":"<p>The number of columns in the resulting rows.</p>","parent_name":"DatabaseCursor"},"Protocols/DatabaseCursor.html#/databaseRegion":{"name":"databaseRegion","abstract":"<p>The database region that the cursor looks into.</p>","parent_name":"DatabaseCursor"},"Protocols/DatabaseCursor.html#/next()":{"name":"next()","parent_name":"DatabaseCursor"},"Protocols/DatabaseCursor.html#/forEach(_:)":{"name":"forEach(_:)","abstract":"<p>Specific implementation of <code>forEach</code>, for a slight performance","parent_name":"DatabaseCursor"},"Protocols/RowAdapter.html#/addingScopes(_:)":{"name":"addingScopes(_:)","abstract":"<p>Returns an adapter based on self, with added scopes.</p>","parent_name":"RowAdapter"},"Protocols/DatabaseWriter.html#/write(_:)":{"name":"write(_:)","abstract":"<p>Synchronously executes database updates in a protected dispatch queue,","parent_name":"DatabaseWriter"},"Protocols/DatabaseWriter.html#/writeWithoutTransaction(_:)":{"name":"writeWithoutTransaction(_:)","abstract":"<p>Synchronously executes database updates in a protected dispatch queue,","parent_name":"DatabaseWriter"},"Protocols/DatabaseWriter.html#/barrierWriteWithoutTransaction(_:)":{"name":"barrierWriteWithoutTransaction(_:)","abstract":"<p>Synchronously executes database updates in a protected dispatch queue,","parent_name":"DatabaseWriter"},"Protocols/DatabaseWriter.html#/asyncBarrierWriteWithoutTransaction(_:)":{"name":"asyncBarrierWriteWithoutTransaction(_:)","abstract":"<p>Asynchronously executes database updates in a protected dispatch queue,","parent_name":"DatabaseWriter"},"Protocols/DatabaseWriter.html#/asyncWrite(_:completion:)":{"name":"asyncWrite(_:completion:)","abstract":"<p>Asynchronously executes database updates in a protected dispatch queue,","parent_name":"DatabaseWriter"},"Protocols/DatabaseWriter.html#/asyncWriteWithoutTransaction(_:)":{"name":"asyncWriteWithoutTransaction(_:)","abstract":"<p>Asynchronously executes database updates in a protected dispatch queue,","parent_name":"DatabaseWriter"},"Protocols/DatabaseWriter.html#/unsafeReentrantWrite(_:)":{"name":"unsafeReentrantWrite(_:)","abstract":"<p>Synchronously executes database updates in a protected dispatch queue,","parent_name":"DatabaseWriter"},"Protocols/DatabaseWriter.html#/concurrentRead(_:)":{"name":"concurrentRead(_:)","abstract":"<p>Concurrently executes a read-only block in a protected dispatch queue.</p>","parent_name":"DatabaseWriter"},"Protocols/DatabaseWriter.html#/add(transactionObserver:extent:)":{"name":"add(transactionObserver:extent:)","abstract":"<p>Add a transaction observer, so that it gets notified of","parent_name":"DatabaseWriter"},"Protocols/DatabaseWriter.html#/remove(transactionObserver:)":{"name":"remove(transactionObserver:)","parent_name":"DatabaseWriter"},"Protocols/DatabaseWriter.html#/erase()":{"name":"erase()","abstract":"<p>Erases the content of the database.</p>","parent_name":"DatabaseWriter"},"Protocols/DatabaseWriter.html#/vacuum()":{"name":"vacuum()","abstract":"<p>Rebuilds the database file, repacking it into a minimal amount of","parent_name":"DatabaseWriter"},"Protocols/DatabaseWriter.html#/vacuum(into:)":{"name":"vacuum(into:)","abstract":"<p>Creates a new database file at the specified path with a minimum","parent_name":"DatabaseWriter"},"Protocols/FetchRequest.html#/RowDecoder":{"name":"RowDecoder","abstract":"<p>The type that tells how fetched database rows should be interpreted.</p>","parent_name":"FetchRequest"},"Protocols/FetchRequest.html#/makePreparedRequest(_:forSingleResult:)":{"name":"makePreparedRequest(_:forSingleResult:)","abstract":"<p>Returns a PreparedRequest that is ready to be executed.</p>","parent_name":"FetchRequest"},"Protocols/FetchRequest.html#/fetchCount(_:)":{"name":"fetchCount(_:)","abstract":"<p>Returns the number of rows fetched by the request.</p>","parent_name":"FetchRequest"},"Protocols/FetchRequest.html#/fetchCursor(_:)":{"name":"fetchCursor(_:)","abstract":"<p>A cursor over fetched values.</p>","parent_name":"FetchRequest"},"Protocols/FetchRequest.html#/fetchAll(_:)":{"name":"fetchAll(_:)","abstract":"<p>An array of fetched values.</p>","parent_name":"FetchRequest"},"Protocols/FetchRequest.html#/fetchOne(_:)":{"name":"fetchOne(_:)","abstract":"<p>The first fetched value.</p>","parent_name":"FetchRequest"},"Protocols/FetchRequest.html#/fetchSet(_:)":{"name":"fetchSet(_:)","abstract":"<p>A set of fetched values.</p>","parent_name":"FetchRequest"},"Protocols/FetchRequest.html#/databaseRegion(_:)":{"name":"databaseRegion(_:)","abstract":"<p>Returns the database region that the request feeds from.</p>","parent_name":"FetchRequest"},"Protocols/FetchRequest.html#/adapted(_:)":{"name":"adapted(_:)","abstract":"<p>Returns an adapted request.</p>","parent_name":"FetchRequest"},"Protocols/DatabaseValueConvertible.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns a value initialized from <code>dbValue</code>, if possible.</p>","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/fromMissingColumn()":{"name":"fromMissingColumn()","abstract":"<p>Creates a value from a missing column, if possible.</p>","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/sqlExpression":{"name":"sqlExpression","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/fetchCursor(_:arguments:adapter:)":{"name":"fetchCursor(_:arguments:adapter:)","abstract":"<p>Returns a cursor over values fetched from a prepared statement.</p>","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/fetchAll(_:arguments:adapter:)":{"name":"fetchAll(_:arguments:adapter:)","abstract":"<p>Returns an array of values fetched from a prepared statement.</p>","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/fetchOne(_:arguments:adapter:)":{"name":"fetchOne(_:arguments:adapter:)","abstract":"<p>Returns a single value fetched from a prepared statement.</p>","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/fetchSet(_:arguments:adapter:)":{"name":"fetchSet(_:arguments:adapter:)","abstract":"<p>Returns a set of values fetched from a prepared statement.</p>","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/fetchCursor(_:sql:arguments:adapter:)":{"name":"fetchCursor(_:sql:arguments:adapter:)","abstract":"<p>Returns a cursor over values fetched from an SQL query.</p>","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/fetchAll(_:sql:arguments:adapter:)":{"name":"fetchAll(_:sql:arguments:adapter:)","abstract":"<p>Returns an array of values fetched from an SQL query.</p>","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/fetchOne(_:sql:arguments:adapter:)":{"name":"fetchOne(_:sql:arguments:adapter:)","abstract":"<p>Returns a single value fetched from an SQL query.</p>","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/fetchSet(_:sql:arguments:adapter:)":{"name":"fetchSet(_:sql:arguments:adapter:)","abstract":"<p>Returns a set of values fetched from an SQL query.</p>","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/fetchCursor(_:_:)":{"name":"fetchCursor(_:_:)","abstract":"<p>Returns a cursor over values fetched from a fetch request.</p>","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/fetchAll(_:_:)":{"name":"fetchAll(_:_:)","abstract":"<p>Returns an array of values fetched from a fetch request.</p>","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/fetchOne(_:_:)":{"name":"fetchOne(_:_:)","abstract":"<p>Returns a single value fetched from a fetch request.</p>","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseValueConvertible.html#/fetchSet(_:_:)":{"name":"fetchSet(_:_:)","abstract":"<p>Returns a set of values fetched from a fetch request.</p>","parent_name":"DatabaseValueConvertible"},"Protocols/DatabaseRegionConvertible.html#/databaseRegion(_:)":{"name":"databaseRegion(_:)","abstract":"<p>Returns a database region.</p>","parent_name":"DatabaseRegionConvertible"},"Protocols/DatabaseRegionConvertible.html#/fullDatabase":{"name":"fullDatabase","abstract":"<p>The region that covers the full database: all columns and all rows","parent_name":"DatabaseRegionConvertible"},"Protocols/DatabaseReader.html#/configuration":{"name":"configuration","abstract":"<p>The database configuration</p>","parent_name":"DatabaseReader"},"Protocols/DatabaseReader.html#/close()":{"name":"close()","abstract":"<p>Closes the database connection with the <code>sqlite3_close()</code> function.</p>","parent_name":"DatabaseReader"},"Protocols/DatabaseReader.html#/interrupt()":{"name":"interrupt()","abstract":"<p>This method causes any pending database operation to abort and return at","parent_name":"DatabaseReader"},"Protocols/DatabaseReader.html#/read(_:)":{"name":"read(_:)","abstract":"<p>Synchronously executes a read-only function that accepts a database","parent_name":"DatabaseReader"},"Protocols/DatabaseReader.html#/asyncRead(_:)":{"name":"asyncRead(_:)","abstract":"<p>Asynchronously executes a read-only function that accepts a","parent_name":"DatabaseReader"},"Protocols/DatabaseReader.html#/unsafeRead(_:)":{"name":"unsafeRead(_:)","abstract":"<p>Synchronously executes a function that accepts a database","parent_name":"DatabaseReader"},"Protocols/DatabaseReader.html#/asyncUnsafeRead(_:)":{"name":"asyncUnsafeRead(_:)","abstract":"<p>Asynchronously executes a function that accepts a database connection.</p>","parent_name":"DatabaseReader"},"Protocols/DatabaseReader.html#/unsafeReentrantRead(_:)":{"name":"unsafeReentrantRead(_:)","abstract":"<p>Synchronously executes a function that accepts a database","parent_name":"DatabaseReader"},"Protocols/DatabaseReader.html#/backup(to:pagesPerStep:progress:)":{"name":"backup(to:pagesPerStep:progress:)","abstract":"<p>Copies the database contents into another database.</p>","parent_name":"DatabaseReader"},"Protocols/DatabaseAggregate.html#/init()":{"name":"init()","abstract":"<p>Creates an aggregate.</p>","parent_name":"DatabaseAggregate"},"Protocols/DatabaseAggregate.html#/step(_:)":{"name":"step(_:)","abstract":"<p>This method is called at each step of the aggregation.</p>","parent_name":"DatabaseAggregate"},"Protocols/DatabaseAggregate.html#/finalize()":{"name":"finalize()","abstract":"<p>Returns the final result</p>","parent_name":"DatabaseAggregate"},"Protocols/Cursor.html#/Element":{"name":"Element","abstract":"<p>The type of element traversed by the cursor.</p>","parent_name":"Cursor"},"Protocols/Cursor.html#/next()":{"name":"next()","abstract":"<p>Advances to the next element and returns it, or nil if no next element","parent_name":"Cursor"},"Protocols/Cursor.html#/forEach(_:)":{"name":"forEach(_:)","abstract":"<p>Calls the given closure on each element in the cursor.</p>","parent_name":"Cursor"},"Protocols/Cursor.html#/isEmpty":{"name":"isEmpty","abstract":"<p>Returns a Boolean value indicating whether the cursor does not contain","parent_name":"Cursor"},"Protocols/Cursor.html#/contains(where:)":{"name":"contains(where:)","abstract":"<p>Returns a Boolean value indicating whether the cursor contains an","parent_name":"Cursor"},"Protocols/Cursor.html#/enumerated()":{"name":"enumerated()","abstract":"<p>Returns a cursor of pairs (n, x), where n represents a consecutive","parent_name":"Cursor"},"Protocols/Cursor.html#/filter(_:)":{"name":"filter(_:)","abstract":"<p>Returns the elements of the cursor that satisfy the given predicate.</p>","parent_name":"Cursor"},"Protocols/Cursor.html#/first(where:)":{"name":"first(where:)","abstract":"<p>Returns the first element of the cursor that satisfies the given","parent_name":"Cursor"},"Protocols/Cursor.html#/compactMap(_:)":{"name":"compactMap(_:)","abstract":"<p>Returns a cursor over the concatenated non-nil results of mapping","parent_name":"Cursor"},"Protocols/Cursor.html#/drop(while:)":{"name":"drop(while:)","abstract":"<p>Returns a cursor that skips any initial elements that satisfy","parent_name":"Cursor"},"Protocols/Cursor.html#/dropFirst(_:)":{"name":"dropFirst(_:)","abstract":"<p>Returns a cursor containing all but the given number of initial","parent_name":"Cursor"},"Protocols/Cursor.html#/dropFirst()":{"name":"dropFirst()","abstract":"<p>Returns a cursor containing all but the first element of the cursor.</p>","parent_name":"Cursor"},"Protocols/Cursor.html#/dropLast(_:)":{"name":"dropLast(_:)","abstract":"<p>Returns an array containing all but the given number of final","parent_name":"Cursor"},"Protocols/Cursor.html#/dropLast()":{"name":"dropLast()","abstract":"<p>Returns an array containing all but the last element of the cursor.</p>","parent_name":"Cursor"},"Protocols/Cursor.html#/flatMap(_:)":{"name":"flatMap(_:)","abstract":"<p>Returns a cursor over the concatenated results of mapping transform","parent_name":"Cursor"},"Protocols/Cursor.html#/map(_:)":{"name":"map(_:)","abstract":"<p>Returns a cursor over the results of the transform function applied to","parent_name":"Cursor"},"Protocols/Cursor.html#/max(by:)":{"name":"max(by:)","abstract":"<p>Returns the maximum element in the cursor, using the given predicate as","parent_name":"Cursor"},"Protocols/Cursor.html#/min(by:)":{"name":"min(by:)","abstract":"<p>Returns the minimum element in the cursor, using the given predicate as","parent_name":"Cursor"},"Protocols/Cursor.html#/prefix(_:)":{"name":"prefix(_:)","abstract":"<p>Returns a cursor, up to the specified maximum length, containing the","parent_name":"Cursor"},"Protocols/Cursor.html#/prefix(while:)":{"name":"prefix(while:)","abstract":"<p>Returns a cursor of the initial consecutive elements that satisfy","parent_name":"Cursor"},"Protocols/Cursor.html#/reduce(_:_:)":{"name":"reduce(_:_:)","abstract":"<p>Returns the result of calling the given combining closure with each","parent_name":"Cursor"},"Protocols/Cursor.html#/reduce(into:_:)":{"name":"reduce(into:_:)","abstract":"<p>Returns the result of calling the given combining closure with each","parent_name":"Cursor"},"Protocols/Cursor.html#/suffix(_:)":{"name":"suffix(_:)","abstract":"<p>Returns an array, up to the given maximum length, containing the","parent_name":"Cursor"},"Protocols/Cursor.html#/contains(_:)":{"name":"contains(_:)","abstract":"<p>Returns a Boolean value indicating whether the cursor contains the","parent_name":"Cursor"},"Protocols/Cursor.html#/max()":{"name":"max()","abstract":"<p>Returns the maximum element in the cursor.</p>","parent_name":"Cursor"},"Protocols/Cursor.html#/min()":{"name":"min()","abstract":"<p>Returns the minimum element in the cursor.</p>","parent_name":"Cursor"},"Protocols/Cursor.html#/joined()":{"name":"joined()","abstract":"<p>Returns the elements of this cursor of cursors, concatenated.</p>","parent_name":"Cursor"},"Protocols/Cursor.html#/joined(separator:)":{"name":"joined(separator:)","abstract":"<p>Returns the elements of this cursor of sequences, concatenated.</p>","parent_name":"Cursor"},"Protocols/Cursor.html":{"name":"Cursor","abstract":"<p>A type that supplies the values of some external resource, one at a time.</p>"},"Protocols/DatabaseAggregate.html":{"name":"DatabaseAggregate","abstract":"<p>The protocol for custom SQLite aggregates.</p>"},"Protocols/DatabaseReader.html":{"name":"DatabaseReader","abstract":"<p><code>DatabaseReader</code> is the protocol for all types that can fetch values from"},"Protocols/DatabaseRegionConvertible.html":{"name":"DatabaseRegionConvertible","abstract":"<p><code>DatabaseRegionConvertible</code> is the protocol for values that can be turned"},"Protocols/DatabaseValueConvertible.html":{"name":"DatabaseValueConvertible","abstract":"<p>Types that adopt DatabaseValueConvertible can be initialized from"},"Protocols/FetchRequest.html":{"name":"FetchRequest","abstract":"<p>The protocol for all requests that fetch database rows, and tell how those"},"Protocols/DatabaseWriter.html":{"name":"DatabaseWriter","abstract":"<p><code>DatabaseWriter</code> is the protocol for all types that can write into an"},"Protocols/RowAdapter.html":{"name":"RowAdapter","abstract":"<p><code>RowAdapter</code> is a protocol that helps two incompatible row interfaces"},"Protocols/DatabaseCursor.html":{"name":"DatabaseCursor","abstract":"<p>A protocol for cursors that iterate a database statement.</p>"},"Protocols/StatementBinding.html":{"name":"StatementBinding"},"Protocols/StatementColumnConvertible.html":{"name":"StatementColumnConvertible","abstract":"<p>The <code>StatementColumnConvertible</code> protocol grants access to the low-level C"},"Protocols/SQLSelectable.html":{"name":"SQLSelectable","abstract":"<p>SQLSelectable is the protocol for types that can be selected, as"},"Protocols/SQLOrderingTerm.html":{"name":"SQLOrderingTerm","abstract":"<p>The protocol for all types that can be used as an SQL ordering term, as"},"Protocols/SQLExpressible.html":{"name":"SQLExpressible","abstract":"<p><code>SQLExpressible</code> is the protocol for all types that can be used as an"},"Protocols/TransactionObserver.html":{"name":"TransactionObserver","abstract":"<p>A transaction observer is notified of all changes and transactions committed"},"Protocols/FTS5CustomTokenizer.html":{"name":"FTS5CustomTokenizer","abstract":"<p>The protocol for custom FTS5 tokenizers.</p>"},"Protocols/FTS5Tokenizer.html":{"name":"FTS5Tokenizer","abstract":"<p>The protocol for FTS5 tokenizers</p>"},"Protocols/FTS5WrapperTokenizer.html":{"name":"FTS5WrapperTokenizer","abstract":"<p>The protocol for custom FTS5 tokenizers that wrap another tokenizer.</p>"},"Protocols/TableRequest.html":{"name":"TableRequest","abstract":"<p>The protocol for all requests that feed from a database table</p>"},"Protocols/TableRecord.html":{"name":"TableRecord","abstract":"<p>Types that adopt <code>TableRecord</code> declare a particular relationship with"},"Protocols/ColumnExpression.html":{"name":"ColumnExpression","abstract":"<p>Adopt the ColumnExpression protocol when you define a column type.</p>"},"Protocols/Association.html":{"name":"Association","abstract":"<p>The base protocol for all associations that define a connection between two"},"Protocols/AssociationToOne.html":{"name":"AssociationToOne","abstract":"<p>The base protocol for all associations that define a one-to-one connection.</p>"},"Protocols/AssociationToMany.html":{"name":"AssociationToMany","abstract":"<p>The base protocol for all associations that define a one-to-many connection.</p>"},"Protocols/TypedRequest.html":{"name":"TypedRequest","abstract":"<p>The protocol for all requests that know how database rows should"},"Protocols/SelectionRequest.html":{"name":"SelectionRequest","abstract":"<p>The protocol for all requests that can refine their selection.</p>"},"Protocols/FilteredRequest.html":{"name":"FilteredRequest","abstract":"<p>The protocol for all requests that can be filtered.</p>"},"Protocols/AggregatingRequest.html":{"name":"AggregatingRequest","abstract":"<p>The protocol for all requests that can aggregate.</p>"},"Protocols/OrderedRequest.html":{"name":"OrderedRequest","abstract":"<p>The protocol for all requests that can be ordered.</p>"},"Protocols/JoinableRequest.html":{"name":"JoinableRequest","abstract":"<p>The protocol for all requests that can be associated.</p>"},"Protocols/DerivableRequest.html":{"name":"DerivableRequest","abstract":"<p>The base protocol for all requests that can be refined.</p>"},"Protocols/SQLSpecificExpressible.html":{"name":"SQLSpecificExpressible","abstract":"<p><code>SQLSpecificExpressible</code> is a protocol for all database-specific types that"},"Protocols/SQLSubqueryable.html":{"name":"SQLSubqueryable","abstract":"<p>The protocol for types that can be embedded as a subquery.</p>"},"Protocols/VirtualTableModule.html":{"name":"VirtualTableModule","abstract":"<p>The protocol for SQLite virtual table modules. It lets you define a DSL for"},"Protocols/EncodableRecord.html":{"name":"EncodableRecord","abstract":"<p>Types that adopt <code>EncodableRecord</code> can be encoded into the database.</p>"},"Protocols/FetchableRecord.html":{"name":"FetchableRecord","abstract":"<p>Types that adopt <code>FetchableRecord</code> can be initialized from a database Row.</p>"},"Protocols/MutablePersistableRecord.html":{"name":"MutablePersistableRecord","abstract":"<p>Types that adopt <code>MutablePersistableRecord</code> can be inserted, updated,"},"Protocols/PersistableRecord.html":{"name":"PersistableRecord","abstract":"<p>Types that adopt <code>PersistableRecord</code> can be inserted, updated, and deleted.</p>"},"Protocols/DatabaseCancellable.html":{"name":"DatabaseCancellable","abstract":"<p>A protocol indicating that an activity or action supports cancellation.</p>"},"Functions.html#/splittingRowAdapters(columnCounts:)":{"name":"splittingRowAdapters(columnCounts:)","abstract":"<p>Returns an array of row adapters that split a row according to the input"},"Functions.html#/!(_:)":{"name":"!(_:)","abstract":"<p>Returns a logically negated aggregate.</p>"},"Functions.html#/&&(_:_:)":{"name":"&&(_:_:)","abstract":"<p>Groups two aggregates with the <code>AND</code> SQL operator.</p>"},"Functions.html#/||(_:_:)":{"name":"||(_:_:)","abstract":"<p>Groups two aggregates with the <code>OR</code> SQL operator.</p>"},"Functions.html#/==(_:_:)":{"name":"==(_:_:)","abstract":"<p>Returns an aggregate that compares two aggregates with the <code>=</code> SQL operator.</p>"},"Functions.html#/!=(_:_:)":{"name":"!=(_:_:)","abstract":"<p>Returns an aggregate that compares two aggregates with the <code>&lt;&gt;</code> SQL operator.</p>"},"Functions.html#/===(_:_:)":{"name":"===(_:_:)","abstract":"<p>Returns an aggregate that compares two aggregates with the <code>IS</code> SQL operator.</p>"},"Functions.html#/!==(_:_:)":{"name":"!==(_:_:)","abstract":"<p>Returns an aggregate that compares two aggregates with the <code>IS NOT</code> SQL operator.</p>"},"Functions.html#/<=(_:_:)":{"name":"<=(_:_:)","abstract":"<p>Returns an aggregate that compares two aggregates with the <code>&lt;=</code> SQL operator.</p>"},"Functions.html#/<(_:_:)":{"name":"<(_:_:)","abstract":"<p>Returns an aggregate that compares two aggregates with the <code>&lt;</code> SQL operator.</p>"},"Functions.html#/>(_:_:)":{"name":">(_:_:)","abstract":"<p>Returns an aggregate that compares two aggregates with the <code>&gt;</code> SQL operator.</p>"},"Functions.html#/>=(_:_:)":{"name":">=(_:_:)","abstract":"<p>Returns an aggregate that compares two aggregates with the <code>&gt;=</code> SQL operator.</p>"},"Functions.html#/-(_:)":{"name":"-(_:)","abstract":"<p>Returns an arithmetically negated aggregate.</p>"},"Functions.html#/+(_:_:)":{"name":"+(_:_:)","abstract":"<p>Returns an aggregate that sums two aggregates with the <code>+</code> SQL operator.</p>"},"Functions.html#/-(_:_:)":{"name":"-(_:_:)","abstract":"<p>Returns an aggregate that substracts two aggregates with the <code>-</code> SQL operator.</p>"},"Functions.html#/*(_:_:)":{"name":"*(_:_:)","abstract":"<p>Returns an aggregate that multiplies two aggregates with the <code>*</code> SQL operator.</p>"},"Functions.html#//(_:_:)":{"name":"/(_:_:)","abstract":"<p>Returns an aggregate that multiplies two aggregates with the <code>/</code> SQL operator.</p>"},"Functions.html#/??(_:_:)":{"name":"??(_:_:)","abstract":"<p>Returns an aggregate that evaluates the <code>IFNULL</code> SQL function.</p>"},"Functions.html#/abs(_:)":{"name":"abs(_:)","abstract":"<p>Returns an aggregate that evaluates to the absolute value of the"},"Functions.html#/length(_:)":{"name":"length(_:)","abstract":"<p>Returns an aggregate that evaluates the <code>LENGTH</code> SQL function on the"},"Functions.html#/+=(_:_:)":{"name":"+=(_:_:)","abstract":"<p>Creates an assignment that adds a value</p>"},"Functions.html#/-=(_:_:)":{"name":"-=(_:_:)","abstract":"<p>Creates an assignment that subtracts a value</p>"},"Functions.html#/*=(_:_:)":{"name":"*=(_:_:)","abstract":"<p>Creates an assignment that multiplies by a value</p>"},"Functions.html#//=(_:_:)":{"name":"/=(_:_:)","abstract":"<p>Creates an assignment that divides by a value</p>"},"Functions.html#/average(_:)":{"name":"average(_:)","abstract":"<p>Returns an expression that evaluates the <code>AVG</code> SQL function.</p>"},"Functions.html#/count(_:)":{"name":"count(_:)","abstract":"<p>Returns an expression that evaluates the <code>COUNT</code> SQL function.</p>"},"Functions.html#/count(distinct:)":{"name":"count(distinct:)","abstract":"<p>Returns an expression that evaluates the <code>COUNT(DISTINCT)</code> SQL function.</p>"},"Functions.html#/max(_:)":{"name":"max(_:)","abstract":"<p>Returns an expression that evaluates the <code>MAX</code> SQL function.</p>"},"Functions.html#/min(_:)":{"name":"min(_:)","abstract":"<p>Returns an expression that evaluates the <code>MIN</code> SQL function.</p>"},"Functions.html#/sum(_:)":{"name":"sum(_:)","abstract":"<p>Returns an expression that evaluates the <code>SUM</code> SQL function.</p>"},"Functions.html#/total(_:)":{"name":"total(_:)","abstract":"<p>Returns an expression that evaluates the <code>TOTAL</code> SQL function.</p>"},"Functions.html#/julianDay(_:_:)":{"name":"julianDay(_:_:)","abstract":"<p>Returns an expression that evaluates the <code>JULIANDAY</code> SQL function.</p>"},"Functions.html#/dateTime(_:_:)":{"name":"dateTime(_:_:)","abstract":"<p>Returns an expression that evaluates the <code>DATETIME</code> SQL function.</p>"},"Functions.html#/databaseQuestionMarks(count:)":{"name":"databaseQuestionMarks(count:)","abstract":"<p>Return as many question marks separated with commas as the <em>count</em> argument.</p>"},"Extensions/CountableClosedRange.html#/contains(_:)":{"name":"contains(_:)","abstract":"<p>An SQL expression that checks the inclusion of an expression in a range.</p>","parent_name":"CountableClosedRange"},"Extensions/CountableRange.html#/contains(_:)":{"name":"contains(_:)","abstract":"<p>An SQL expression that checks the inclusion of an expression in a range.</p>","parent_name":"CountableRange"},"Extensions/ClosedRange.html#/contains(_:)":{"name":"contains(_:)","abstract":"<p>An SQL expression that checks the inclusion of an expression in a range.</p>","parent_name":"ClosedRange"},"Extensions/Range.html#/contains(_:)":{"name":"contains(_:)","abstract":"<p>An SQL expression that checks the inclusion of an expression in a range.</p>","parent_name":"Range"},"Extensions/CommonTableExpression%3CRow%3E.html#/init(recursive:named:columns:request:)":{"name":"init(recursive:named:columns:request:)","abstract":"<p>Creates a common table expression from a request.</p>","parent_name":"CommonTableExpression<Row>"},"Extensions/CommonTableExpression%3CRow%3E.html#/init(recursive:named:columns:sql:arguments:)":{"name":"init(recursive:named:columns:sql:arguments:)","abstract":"<p>Creates a common table expression from an SQL string and","parent_name":"CommonTableExpression<Row>"},"Extensions/CommonTableExpression%3CRow%3E.html#/init(recursive:named:columns:literal:)":{"name":"init(recursive:named:columns:literal:)","abstract":"<p>Creates a common table expression from an SQL <em>literal</em>.</p>","parent_name":"CommonTableExpression<Row>"},"Extensions/String.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"String"},"Extensions/String.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"String"},"Extensions/String.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns a String initialized from <em>dbValue</em>, if possible.</p>","parent_name":"String"},"Extensions/String.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"String"},"Extensions/String.html#/quotedDatabaseIdentifier":{"name":"quotedDatabaseIdentifier","abstract":"<p>Returns the receiver, quoted for safe insertion as an identifier in an","parent_name":"String"},"Extensions/Float.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"Float"},"Extensions/Float.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"Float"},"Extensions/Float.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns a Float initialized from <em>dbValue</em>, if possible.</p>","parent_name":"Float"},"Extensions/Float.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"Float"},"Extensions/Double.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"Double"},"Extensions/Double.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"Double"},"Extensions/Double.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns a Double initialized from <em>dbValue</em>, if possible.</p>","parent_name":"Double"},"Extensions/Double.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"Double"},"Extensions/UInt64.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"UInt64"},"Extensions/UInt64.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"UInt64"},"Extensions/UInt64.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an UInt64 initialized from <em>dbValue</em>, if possible.</p>","parent_name":"UInt64"},"Extensions/UInt64.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"UInt64"},"Extensions/UInt32.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"UInt32"},"Extensions/UInt32.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"UInt32"},"Extensions/UInt32.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an UInt32 initialized from <em>dbValue</em>, if possible.</p>","parent_name":"UInt32"},"Extensions/UInt32.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"UInt32"},"Extensions/UInt16.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"UInt16"},"Extensions/UInt16.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"UInt16"},"Extensions/UInt16.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an UInt16 initialized from <em>dbValue</em>, if possible.</p>","parent_name":"UInt16"},"Extensions/UInt16.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"UInt16"},"Extensions/UInt8.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"UInt8"},"Extensions/UInt8.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"UInt8"},"Extensions/UInt8.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an UInt8 initialized from <em>dbValue</em>, if possible.</p>","parent_name":"UInt8"},"Extensions/UInt8.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"UInt8"},"Extensions/UInt.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"UInt"},"Extensions/UInt.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"UInt"},"Extensions/UInt.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an Int initialized from <em>dbValue</em>, if possible.</p>","parent_name":"UInt"},"Extensions/UInt.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"UInt"},"Extensions/Int64.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"Int64"},"Extensions/Int64.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"Int64"},"Extensions/Int64.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an Int64 initialized from <em>dbValue</em>, if possible.</p>","parent_name":"Int64"},"Extensions/Int64.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"Int64"},"Extensions/Int32.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"Int32"},"Extensions/Int32.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"Int32"},"Extensions/Int32.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an Int32 initialized from <em>dbValue</em>, if possible.</p>","parent_name":"Int32"},"Extensions/Int32.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"Int32"},"Extensions/Int16.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"Int16"},"Extensions/Int16.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"Int16"},"Extensions/Int16.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an Int16 initialized from <em>dbValue</em>, if possible.</p>","parent_name":"Int16"},"Extensions/Int16.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"Int16"},"Extensions/Int8.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"Int8"},"Extensions/Int8.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"Int8"},"Extensions/Int8.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an Int8 initialized from <em>dbValue</em>, if possible.</p>","parent_name":"Int8"},"Extensions/Int8.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"Int8"},"Extensions/Int.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"Int"},"Extensions/Int.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"Int"},"Extensions/Int.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an Int initialized from <em>dbValue</em>, if possible.</p>","parent_name":"Int"},"Extensions/Int.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"Int"},"Extensions/Bool.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"Bool"},"Extensions/Bool.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"Bool"},"Extensions/Bool.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns a Bool initialized from <em>dbValue</em>, if possible.</p>","parent_name":"Bool"},"Extensions/Bool.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"Bool"},"Extensions/Optional.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"Optional"},"Extensions/Optional.html#/sqlExpression":{"name":"sqlExpression","parent_name":"Optional"},"Extensions/Optional.html#/sqlOrdering":{"name":"sqlOrdering","parent_name":"Optional"},"Extensions/Optional.html#/sqlSelection":{"name":"sqlSelection","parent_name":"Optional"},"Extensions/Optional.html#/databaseValue":{"name":"databaseValue","parent_name":"Optional"},"Extensions/Optional.html#/fromMissingColumn()":{"name":"fromMissingColumn()","parent_name":"Optional"},"Extensions/Optional.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","parent_name":"Optional"},"Extensions/Optional.html#/fromStatement(_:atUncheckedIndex:)":{"name":"fromStatement(_:atUncheckedIndex:)","parent_name":"Optional"},"Extensions/Optional.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","parent_name":"Optional"},"Extensions/UUID.html#/databaseValue":{"name":"databaseValue","parent_name":"UUID"},"Extensions/UUID.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","parent_name":"UUID"},"Extensions/UUID.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","parent_name":"UUID"},"Extensions/NSUUID.html#/databaseValue":{"name":"databaseValue","parent_name":"NSUUID"},"Extensions/NSUUID.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","parent_name":"NSUUID"},"Extensions/NSURL.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.","parent_name":"NSURL"},"Extensions/NSURL.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an NSURL initialized from <em>dbValue</em>, if possible.</p>","parent_name":"NSURL"},"Extensions/NSString.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"NSString"},"Extensions/NSString.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an NSString initialized from <em>dbValue</em>, if possible.</p>","parent_name":"NSString"},"Extensions/NSNumber.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"NSNumber"},"Extensions/NSNumber.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an NSNumber initialized from <em>dbValue</em>, if possible.</p>","parent_name":"NSNumber"},"Extensions/NSNull.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns DatabaseValue.null.</p>","parent_name":"NSNull"},"Extensions/NSNull.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns nil.</p>","parent_name":"NSNull"},"Extensions/NSData.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"NSData"},"Extensions/NSData.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns an NSData initialized from <em>dbValue</em>, if it contains","parent_name":"NSData"},"Extensions/Decimal.html#/databaseValue":{"name":"databaseValue","parent_name":"Decimal"},"Extensions/Decimal.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","parent_name":"Decimal"},"Extensions/Decimal.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","parent_name":"Decimal"},"Extensions/Date.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a database value that contains the date encoded as","parent_name":"Date"},"Extensions/Date.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns a date initialized from dbValue, if possible.</p>","parent_name":"Date"},"Extensions/Date.html#/init(julianDay:)":{"name":"init(julianDay:)","abstract":"<p>Creates a date from a <a href=\"https://en.wikipedia.org/wiki/Julian_day\">Julian Day</a>.</p>","parent_name":"Date"},"Extensions/Date.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","abstract":"<p>Returns a value initialized from a raw SQLite statement pointer.</p>","parent_name":"Date"},"Extensions/NSDate.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a database value that contains the date encoded as","parent_name":"NSDate"},"Extensions/NSDate.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns a date initialized from dbValue, if possible.</p>","parent_name":"NSDate"},"Extensions/Data.html#/init(sqliteStatement:index:)":{"name":"init(sqliteStatement:index:)","parent_name":"Data"},"Extensions/Data.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"Data"},"Extensions/Data.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns a Data initialized from <em>dbValue</em>, if it contains","parent_name":"Data"},"Extensions/Data.html#/bind(to:at:)":{"name":"bind(to:at:)","parent_name":"Data"},"Extensions/CGFloat.html#/databaseValue":{"name":"databaseValue","abstract":"<p>Returns a value that can be stored in the database.</p>","parent_name":"CGFloat"},"Extensions/CGFloat.html#/fromDatabaseValue(_:)":{"name":"fromDatabaseValue(_:)","abstract":"<p>Returns a CGFloat initialized from <em>dbValue</em>, if possible.</p>","parent_name":"CGFloat"},"Extensions/SQLRequest%3CRow%3E.html#/init(sql:arguments:adapter:cached:)":{"name":"init(sql:arguments:adapter:cached:)","abstract":"<p>Creates a request from an SQL string, optional arguments, and","parent_name":"SQLRequest<Row>"},"Extensions/SQLRequest%3CRow%3E.html#/init(literal:adapter:cached:)":{"name":"init(literal:adapter:cached:)","abstract":"<p>Creates a request from an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/SQL.html\">SQL</a></code> literal, and optional row adapter.</p>","parent_name":"SQLRequest<Row>"},"Extensions/Collection.html#/joined(separator:)":{"name":"joined(separator:)","abstract":"<p>Returns the concatenated <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/SQL.html\">SQL</a></code> literal of this collection of literals,","parent_name":"Collection"},"Extensions/FetchRequest%3CRow%3E.html#/fetchCursor(_:)":{"name":"fetchCursor(_:)","abstract":"<p>A cursor over fetched rows.</p>","parent_name":"FetchRequest<Row>"},"Extensions/FetchRequest%3CRow%3E.html#/fetchAll(_:)":{"name":"fetchAll(_:)","abstract":"<p>An array of fetched rows.</p>","parent_name":"FetchRequest<Row>"},"Extensions/FetchRequest%3CRow%3E.html#/fetchSet(_:)":{"name":"fetchSet(_:)","abstract":"<p>A set of fetched rows.</p>","parent_name":"FetchRequest<Row>"},"Extensions/FetchRequest%3CRow%3E.html#/fetchOne(_:)":{"name":"fetchOne(_:)","abstract":"<p>The first fetched row.</p>","parent_name":"FetchRequest<Row>"},"Extensions/Sequence.html#/flatMap(_:)":{"name":"flatMap(_:)","abstract":"<p>Returns a cursor over the concatenated results of mapping transform","parent_name":"Sequence"},"Extensions/Sequence.html#/joined(separator:)":{"name":"joined(separator:)","abstract":"<p>Returns the concatenated <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/SQL.html\">SQL</a></code> literal of this sequence of literals,","parent_name":"Sequence"},"Extensions/Sequence.html#/joined(operator:)":{"name":"joined(operator:)","abstract":"<p>Returns an expression by joining all elements with an associative SQL","parent_name":"Sequence"},"Extensions/Sequence.html#/contains(_:)":{"name":"contains(_:)","abstract":"<p>An SQL expression that checks the inclusion of an expression in","parent_name":"Sequence"},"Extensions/Set.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates a set containing the elements of a cursor.</p>","parent_name":"Set"},"Extensions/Set.html#/init(_:minimumCapacity:)":{"name":"init(_:minimumCapacity:)","abstract":"<p>Creates a set containing the elements of a cursor.</p>","parent_name":"Set"},"Extensions/Dictionary.html#/init(grouping:by:)":{"name":"init(grouping:by:)","abstract":"<p>Creates a new dictionary whose keys are the groupings returned by the","parent_name":"Dictionary"},"Extensions/Dictionary.html#/init(minimumCapacity:grouping:by:)":{"name":"init(minimumCapacity:grouping:by:)","abstract":"<p>Creates a new dictionary whose keys are the groupings returned by the","parent_name":"Dictionary"},"Extensions/Dictionary.html#/init(uniqueKeysWithValues:)":{"name":"init(uniqueKeysWithValues:)","abstract":"<p>Creates a new dictionary from the key-value pairs in the given cursor.</p>","parent_name":"Dictionary"},"Extensions/Dictionary.html#/init(minimumCapacity:uniqueKeysWithValues:)":{"name":"init(minimumCapacity:uniqueKeysWithValues:)","abstract":"<p>Creates a new dictionary from the key-value pairs in the given cursor.</p>","parent_name":"Dictionary"},"Extensions/RangeReplaceableCollection.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates a collection containing the elements of a cursor.</p>","parent_name":"RangeReplaceableCollection"},"Extensions/RangeReplaceableCollection.html#/init(_:minimumCapacity:)":{"name":"init(_:minimumCapacity:)","abstract":"<p>Creates a collection containing the elements of a cursor.</p>","parent_name":"RangeReplaceableCollection"},"Extensions/RangeReplaceableCollection.html#/append(contentsOf:)":{"name":"append(contentsOf:)","abstract":"<p>Adds the elements of a cursor to the end of this collection.</p>","parent_name":"RangeReplaceableCollection"},"Extensions/RangeReplaceableCollection.html":{"name":"RangeReplaceableCollection"},"Extensions/Dictionary.html":{"name":"Dictionary"},"Extensions/Set.html":{"name":"Set"},"Extensions/Sequence.html":{"name":"Sequence"},"Extensions/FetchRequest%3CRow%3E.html":{"name":"FetchRequest<Row>"},"Extensions.html#/ArrayRowImpl":{"name":"ArrayRowImpl"},"Extensions.html#/RowDecodingError":{"name":"RowDecodingError"},"Extensions/Collection.html":{"name":"Collection"},"Extensions/SQLRequest%3CRow%3E.html":{"name":"SQLRequest<Row>"},"Extensions.html#/SerializedDatabase":{"name":"SerializedDatabase"},"Extensions/CGFloat.html":{"name":"CGFloat","abstract":"<p>CGFloat adopts DatabaseValueConvertible</p>"},"Extensions/Data.html":{"name":"Data","abstract":"<p>Data is convertible to and from DatabaseValue.</p>"},"Extensions/NSDate.html":{"name":"NSDate","abstract":"<p>NSDate is stored in the database using the format"},"Extensions/Date.html":{"name":"Date","abstract":"<p>Date is stored in the database using the format"},"Extensions/Decimal.html":{"name":"Decimal","abstract":"<p>Decimal adopts DatabaseValueConvertible</p>"},"Extensions/NSData.html":{"name":"NSData","abstract":"<p>NSData is convertible to and from DatabaseValue.</p>"},"Extensions/NSNull.html":{"name":"NSNull","abstract":"<p>NSNull adopts DatabaseValueConvertible</p>"},"Extensions/NSNumber.html":{"name":"NSNumber","abstract":"<p>NSNumber adopts DatabaseValueConvertible</p>"},"Extensions/NSString.html":{"name":"NSString","abstract":"<p>NSString adopts DatabaseValueConvertible</p>"},"Extensions/NSURL.html":{"name":"NSURL","abstract":"<p>NSURL stores its absoluteString in the database.</p>"},"Extensions.html#/URL":{"name":"URL","abstract":"<p>URL stores its absoluteString in the database.</p>"},"Extensions/NSUUID.html":{"name":"NSUUID","abstract":"<p>NSUUID adopts DatabaseValueConvertible</p>"},"Extensions/UUID.html":{"name":"UUID","abstract":"<p>UUID adopts DatabaseValueConvertible</p>"},"Extensions.html#/JSONRequiredEncoder":{"name":"JSONRequiredEncoder"},"Extensions/Optional.html":{"name":"Optional"},"Extensions/Bool.html":{"name":"Bool","abstract":"<p>Bool adopts DatabaseValueConvertible and StatementColumnConvertible.</p>"},"Extensions/Int.html":{"name":"Int","abstract":"<p>Int adopts DatabaseValueConvertible and StatementColumnConvertible.</p>"},"Extensions/Int8.html":{"name":"Int8","abstract":"<p>Int8 adopts DatabaseValueConvertible and StatementColumnConvertible.</p>"},"Extensions/Int16.html":{"name":"Int16","abstract":"<p>Int16 adopts DatabaseValueConvertible and StatementColumnConvertible.</p>"},"Extensions/Int32.html":{"name":"Int32","abstract":"<p>Int32 adopts DatabaseValueConvertible and StatementColumnConvertible.</p>"},"Extensions/Int64.html":{"name":"Int64","abstract":"<p>Int64 adopts DatabaseValueConvertible and StatementColumnConvertible.</p>"},"Extensions/UInt.html":{"name":"UInt","abstract":"<p>UInt adopts DatabaseValueConvertible and StatementColumnConvertible.</p>"},"Extensions/UInt8.html":{"name":"UInt8","abstract":"<p>UInt8 adopts DatabaseValueConvertible and StatementColumnConvertible.</p>"},"Extensions/UInt16.html":{"name":"UInt16","abstract":"<p>UInt16 adopts DatabaseValueConvertible and StatementColumnConvertible.</p>"},"Extensions/UInt32.html":{"name":"UInt32","abstract":"<p>UInt32 adopts DatabaseValueConvertible and StatementColumnConvertible.</p>"},"Extensions/UInt64.html":{"name":"UInt64","abstract":"<p>UInt64 adopts DatabaseValueConvertible and StatementColumnConvertible.</p>"},"Extensions/Double.html":{"name":"Double","abstract":"<p>Double adopts DatabaseValueConvertible and StatementColumnConvertible.</p>"},"Extensions/Float.html":{"name":"Float","abstract":"<p>Float adopts DatabaseValueConvertible and StatementColumnConvertible.</p>"},"Extensions/String.html":{"name":"String","abstract":"<p>String adopts DatabaseValueConvertible and StatementColumnConvertible.</p>"},"Extensions/CommonTableExpression%3CRow%3E.html":{"name":"CommonTableExpression<Row>"},"Extensions/Range.html":{"name":"Range"},"Extensions/ClosedRange.html":{"name":"ClosedRange"},"Extensions/CountableRange.html":{"name":"CountableRange"},"Extensions/CountableClosedRange.html":{"name":"CountableClosedRange"},"Extensions.html#/ColumnEncoder":{"name":"ColumnEncoder"},"Extensions.html#/PrefetchedRowsDecoder":{"name":"PrefetchedRowsDecoder"},"Extensions.html#/ColumnDecoder":{"name":"ColumnDecoder"},"Extensions.html#/OrderedDictionary":{"name":"OrderedDictionary"},"Extensions.html#/ValueConcurrentObserver":{"name":"ValueConcurrentObserver"},"Extensions.html#/ValueWriteOnlyObserver":{"name":"ValueWriteOnlyObserver"},"Enums/ValueReducers.html#/Fetch":{"name":"Fetch","abstract":"<p>A reducer which passes raw fetched values through.</p>","parent_name":"ValueReducers"},"Enums/ValueReducers.html#/Map":{"name":"Map","abstract":"<p>A reducer whose values consist of those in a <code>Base</code> reducer","parent_name":"ValueReducers"},"Enums/ValueReducers.html#/RemoveDuplicates":{"name":"RemoveDuplicates","abstract":"<p>See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ValueObservation.html#/removeDuplicates()\">ValueObservation.removeDuplicates()</a></code></p>","parent_name":"ValueReducers"},"Enums/ValueReducers.html#/Trace":{"name":"Trace","abstract":"<p>See <code>ValueObservation.handleEvents()</code></p>","parent_name":"ValueReducers"},"Enums/SharedValueObservationExtent.html#/observationLifetime":{"name":"observationLifetime","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SharedValueObservation.html\">SharedValueObservation</a></code> starts a single database observation, which","parent_name":"SharedValueObservationExtent"},"Enums/SharedValueObservationExtent.html#/whileObserved":{"name":"whileObserved","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SharedValueObservation.html\">SharedValueObservation</a></code> ends database observation when the number","parent_name":"SharedValueObservationExtent"},"Enums/PersistenceError.html#/recordNotFound(databaseTableName:key:)":{"name":"recordNotFound(databaseTableName:key:)","abstract":"<p>Thrown by <code>MutablePersistableRecord.update(_:)</code> methods when no matching","parent_name":"PersistenceError"},"Enums/DatabaseColumnDecodingStrategy.html#/useDefaultKeys":{"name":"useDefaultKeys","abstract":"<p>A key decoding strategy that doesnâ€™t change key names during decoding.</p>","parent_name":"DatabaseColumnDecodingStrategy"},"Enums/DatabaseColumnDecodingStrategy.html#/convertFromSnakeCase":{"name":"convertFromSnakeCase","abstract":"<p>A key decoding strategy that converts snake-case keys to camel-case keys.</p>","parent_name":"DatabaseColumnDecodingStrategy"},"Enums/DatabaseColumnDecodingStrategy.html#/custom(_:)":{"name":"custom(_:)","abstract":"<p>A key decoding strategy defined by the closure you supply.</p>","parent_name":"DatabaseColumnDecodingStrategy"},"Enums/DatabaseDateDecodingStrategy.html#/deferredToDate":{"name":"deferredToDate","abstract":"<p>The strategy that uses formatting from the Date structure.</p>","parent_name":"DatabaseDateDecodingStrategy"},"Enums/DatabaseDateDecodingStrategy.html#/timeIntervalSinceReferenceDate":{"name":"timeIntervalSinceReferenceDate","abstract":"<p>Decodes numeric values as a number of seconds between the date and","parent_name":"DatabaseDateDecodingStrategy"},"Enums/DatabaseDateDecodingStrategy.html#/timeIntervalSince1970":{"name":"timeIntervalSince1970","abstract":"<p>Decodes numeric values as a number of seconds between the date and","parent_name":"DatabaseDateDecodingStrategy"},"Enums/DatabaseDateDecodingStrategy.html#/millisecondsSince1970":{"name":"millisecondsSince1970","abstract":"<p>Decodes numeric values as a number of milliseconds between the date and","parent_name":"DatabaseDateDecodingStrategy"},"Enums/DatabaseDateDecodingStrategy.html#/iso8601":{"name":"iso8601","abstract":"<p>Decodes dates according to the ISO 8601 standards</p>","parent_name":"DatabaseDateDecodingStrategy"},"Enums/DatabaseDateDecodingStrategy.html#/formatted(_:)":{"name":"formatted(_:)","abstract":"<p>Decodes a String, according to the provided formatter</p>","parent_name":"DatabaseDateDecodingStrategy"},"Enums/DatabaseDateDecodingStrategy.html#/custom(_:)":{"name":"custom(_:)","abstract":"<p>Decodes according to the user-provided function.</p>","parent_name":"DatabaseDateDecodingStrategy"},"Enums/DatabaseColumnEncodingStrategy.html#/useDefaultKeys":{"name":"useDefaultKeys","abstract":"<p>A key encoding strategy that doesnâ€™t change key names during encoding.</p>","parent_name":"DatabaseColumnEncodingStrategy"},"Enums/DatabaseColumnEncodingStrategy.html#/convertToSnakeCase":{"name":"convertToSnakeCase","abstract":"<p>A key encoding strategy that converts camel-case keys to snake-case keys.</p>","parent_name":"DatabaseColumnEncodingStrategy"},"Enums/DatabaseColumnEncodingStrategy.html#/custom(_:)":{"name":"custom(_:)","abstract":"<p>A key encoding strategy defined by the closure you supply.</p>","parent_name":"DatabaseColumnEncodingStrategy"},"Enums/DatabaseUUIDEncodingStrategy.html#/deferredToUUID":{"name":"deferredToUUID","abstract":"<p>The strategy that uses formatting from the UUID type.</p>","parent_name":"DatabaseUUIDEncodingStrategy"},"Enums/DatabaseUUIDEncodingStrategy.html#/uppercaseString":{"name":"uppercaseString","abstract":"<p>Encodes UUIDs as uppercased strings such as &ldquo;E621E1F8-C36C-495A-93FC-0C247A3E6E5F&rdquo;</p>","parent_name":"DatabaseUUIDEncodingStrategy"},"Enums/DatabaseUUIDEncodingStrategy.html#/lowercaseString":{"name":"lowercaseString","abstract":"<p>Encodes UUIDs as lowercased strings such as &ldquo;e621e1f8-c36c-495a-93fc-0c247a3e6e5f&rdquo;</p>","parent_name":"DatabaseUUIDEncodingStrategy"},"Enums/DatabaseDateEncodingStrategy.html#/deferredToDate":{"name":"deferredToDate","abstract":"<p>The strategy that uses formatting from the Date structure.</p>","parent_name":"DatabaseDateEncodingStrategy"},"Enums/DatabaseDateEncodingStrategy.html#/timeIntervalSinceReferenceDate":{"name":"timeIntervalSinceReferenceDate","abstract":"<p>Encodes a Double: the number of seconds between the date and","parent_name":"DatabaseDateEncodingStrategy"},"Enums/DatabaseDateEncodingStrategy.html#/timeIntervalSince1970":{"name":"timeIntervalSince1970","abstract":"<p>Encodes a Double: the number of seconds between the date and","parent_name":"DatabaseDateEncodingStrategy"},"Enums/DatabaseDateEncodingStrategy.html#/secondsSince1970":{"name":"secondsSince1970","abstract":"<p>Encodes an Int64: the number of seconds between the date and","parent_name":"DatabaseDateEncodingStrategy"},"Enums/DatabaseDateEncodingStrategy.html#/millisecondsSince1970":{"name":"millisecondsSince1970","abstract":"<p>Encodes an Int64: the number of milliseconds between the date and","parent_name":"DatabaseDateEncodingStrategy"},"Enums/DatabaseDateEncodingStrategy.html#/iso8601":{"name":"iso8601","abstract":"<p>Encodes dates according to the ISO 8601 and RFC 3339 standards</p>","parent_name":"DatabaseDateEncodingStrategy"},"Enums/DatabaseDateEncodingStrategy.html#/formatted(_:)":{"name":"formatted(_:)","abstract":"<p>Encodes a String, according to the provided formatter</p>","parent_name":"DatabaseDateEncodingStrategy"},"Enums/DatabaseDateEncodingStrategy.html#/custom(_:)":{"name":"custom(_:)","abstract":"<p>Encodes the result of the user-provided function</p>","parent_name":"DatabaseDateEncodingStrategy"},"Enums/SQLDateModifier.html#/second(_:)":{"name":"second(_:)","abstract":"<p>Adds the specified amount of seconds</p>","parent_name":"SQLDateModifier"},"Enums/SQLDateModifier.html#/minute(_:)":{"name":"minute(_:)","abstract":"<p>Adds the specified amount of minutes</p>","parent_name":"SQLDateModifier"},"Enums/SQLDateModifier.html#/hour(_:)":{"name":"hour(_:)","abstract":"<p>Adds the specified amount of hours</p>","parent_name":"SQLDateModifier"},"Enums/SQLDateModifier.html#/day(_:)":{"name":"day(_:)","abstract":"<p>Adds the specified amount of days</p>","parent_name":"SQLDateModifier"},"Enums/SQLDateModifier.html#/month(_:)":{"name":"month(_:)","abstract":"<p>Adds the specified amount of months</p>","parent_name":"SQLDateModifier"},"Enums/SQLDateModifier.html#/year(_:)":{"name":"year(_:)","abstract":"<p>Adds the specified amount of years</p>","parent_name":"SQLDateModifier"},"Enums/SQLDateModifier.html#/startOfDay":{"name":"startOfDay","abstract":"<p>Shifts the date backwards to the beginning of the current day</p>","parent_name":"SQLDateModifier"},"Enums/SQLDateModifier.html#/startOfMonth":{"name":"startOfMonth","abstract":"<p>Shifts the date backwards to the beginning of the current month</p>","parent_name":"SQLDateModifier"},"Enums/SQLDateModifier.html#/startOfYear":{"name":"startOfYear","abstract":"<p>Shifts the date backwards to the beginning of the current year</p>","parent_name":"SQLDateModifier"},"Enums/SQLDateModifier.html#/weekday(_:)":{"name":"weekday(_:)","abstract":"<p>See <a href=\"https://www.sqlite.org/lang_datefunc.html\">https://www.sqlite.org/lang_datefunc.html</a></p>","parent_name":"SQLDateModifier"},"Enums/SQLDateModifier.html#/unixEpoch":{"name":"unixEpoch","abstract":"<p>See <a href=\"https://www.sqlite.org/lang_datefunc.html\">https://www.sqlite.org/lang_datefunc.html</a></p>","parent_name":"SQLDateModifier"},"Enums/SQLDateModifier.html#/localTime":{"name":"localTime","abstract":"<p>See <a href=\"https://www.sqlite.org/lang_datefunc.html\">https://www.sqlite.org/lang_datefunc.html</a></p>","parent_name":"SQLDateModifier"},"Enums/SQLDateModifier.html#/utc":{"name":"utc","abstract":"<p>See <a href=\"https://www.sqlite.org/lang_datefunc.html\">https://www.sqlite.org/lang_datefunc.html</a></p>","parent_name":"SQLDateModifier"},"Enums/SQLDateModifier.html#/sqlExpression":{"name":"sqlExpression","parent_name":"SQLDateModifier"},"Enums/DatabaseEventKind.html#/insert(tableName:)":{"name":"insert(tableName:)","abstract":"<p>The insertion of a row in a database table</p>","parent_name":"DatabaseEventKind"},"Enums/DatabaseEventKind.html#/delete(tableName:)":{"name":"delete(tableName:)","abstract":"<p>The deletion of a row in a database table</p>","parent_name":"DatabaseEventKind"},"Enums/DatabaseEventKind.html#/update(tableName:columnNames:)":{"name":"update(tableName:columnNames:)","abstract":"<p>The update of a set of columns in a database table</p>","parent_name":"DatabaseEventKind"},"Enums/DatabaseEventKind.html#/tableName":{"name":"tableName","abstract":"<p>The impacted database table</p>","parent_name":"DatabaseEventKind"},"Enums/DatabaseEventKind.html":{"name":"DatabaseEventKind","abstract":"<p>A kind of database event. See the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/TransactionObserver.html\">TransactionObserver</a></code> protocol for"},"Enums/SQLDateModifier.html":{"name":"SQLDateModifier","abstract":"<p>A date modifier for SQLite date functions such as <code><a href=\"36f8f5912051ae747ef441d6511ca4cbFunctions.html#/julianDay(_:_:)\">julianDay(_:_:)</a></code> and"},"Enums/DatabaseDateEncodingStrategy.html":{"name":"DatabaseDateEncodingStrategy","abstract":"<p><code>DatabaseDateEncodingStrategy</code> specifies how <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/EncodableRecord.html\">EncodableRecord</a></code> types that"},"Enums/DatabaseUUIDEncodingStrategy.html":{"name":"DatabaseUUIDEncodingStrategy","abstract":"<p><code>DatabaseUUIDEncodingStrategy</code> specifies how <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/EncodableRecord.html\">EncodableRecord</a></code> types that"},"Enums/DatabaseColumnEncodingStrategy.html":{"name":"DatabaseColumnEncodingStrategy","abstract":"<p><code>DatabaseColumnEncodingStrategy</code> specifies how <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/EncodableRecord.html\">EncodableRecord</a></code> types that"},"Enums/DatabaseDateDecodingStrategy.html":{"name":"DatabaseDateDecodingStrategy","abstract":"<p><code>DatabaseDateDecodingStrategy</code> specifies how <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/FetchableRecord.html\">FetchableRecord</a></code> types that"},"Enums/DatabaseColumnDecodingStrategy.html":{"name":"DatabaseColumnDecodingStrategy","abstract":"<p><code>DatabaseColumnDecodingStrategy</code> specifies how <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/FetchableRecord.html\">FetchableRecord</a></code> types that"},"Enums/PersistenceError.html":{"name":"PersistenceError","abstract":"<p>An error thrown by a type that adopts <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/MutablePersistableRecord.html\">MutablePersistableRecord</a></code>.</p>"},"Enums/SharedValueObservationExtent.html":{"name":"SharedValueObservationExtent","abstract":"<p>Controls the extent of the shared database observation"},"Enums/ValueReducers.html":{"name":"ValueReducers","abstract":"<p>A namespace for types related to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbTypealiases.html#/ValueReducer\">ValueReducer</a></code> protocol.</p>"},"Classes/ValueObservationScheduler.html#/async(onQueue:)":{"name":"async(onQueue:)","abstract":"<p>A scheduler which asynchronously notifies fresh value of the","parent_name":"ValueObservationScheduler"},"Classes/ValueObservationScheduler.html#/immediate":{"name":"immediate","abstract":"<p>A scheduler which notifies all values on the main queue. The first one","parent_name":"ValueObservationScheduler"},"Classes/SharedValueObservation.html#/start(onError:onChange:)":{"name":"start(onError:onChange:)","abstract":"<p>Starts observing the database.</p>","parent_name":"SharedValueObservation"},"Classes/AnyDatabaseCancellable.html#/init(cancel:)":{"name":"init(cancel:)","abstract":"<p>Initializes the cancellable object with the given cancel-time closure.</p>","parent_name":"AnyDatabaseCancellable"},"Classes/AnyDatabaseCancellable.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates a cancellable object that forwards cancellation to the","parent_name":"AnyDatabaseCancellable"},"Classes/AnyDatabaseCancellable.html#/cancel()":{"name":"cancel()","parent_name":"AnyDatabaseCancellable"},"Classes/Record.html#/init()":{"name":"init()","abstract":"<p>Creates a Record.</p>","parent_name":"Record"},"Classes/Record.html#/init(row:)":{"name":"init(row:)","abstract":"<p>Creates a Record from a row.</p>","parent_name":"Record"},"Classes/Record.html#/databaseTableName":{"name":"databaseTableName","abstract":"<p>The name of a database table.</p>","parent_name":"Record"},"Classes/Record.html#/persistenceConflictPolicy":{"name":"persistenceConflictPolicy","abstract":"<p>The policy that handles SQLite conflicts when records are inserted","parent_name":"Record"},"Classes/Record.html#/databaseSelection":{"name":"databaseSelection","abstract":"<p>The default request selection.</p>","parent_name":"Record"},"Classes/Record.html#/encode(to:)":{"name":"encode(to:)","abstract":"<p>Defines the values persisted in the database.</p>","parent_name":"Record"},"Classes/Record.html#/hasDatabaseChanges":{"name":"hasDatabaseChanges","abstract":"<p>A boolean that indicates whether the record has changes that have not","parent_name":"Record"},"Classes/Record.html#/databaseChanges":{"name":"databaseChanges","abstract":"<p>A dictionary of changes that have not been saved.</p>","parent_name":"Record"},"Classes/Record.html#/willInsert(_:)":{"name":"willInsert(_:)","abstract":"<p>Called before the record is inserted.</p>","parent_name":"Record"},"Classes/Record.html#/aroundInsert(_:insert:)":{"name":"aroundInsert(_:insert:)","abstract":"<p>Called around the record insertion.</p>","parent_name":"Record"},"Classes/Record.html#/didInsert(_:)":{"name":"didInsert(_:)","abstract":"<p>Called upon successful insertion.</p>","parent_name":"Record"},"Classes/Record.html#/willUpdate(_:columns:)":{"name":"willUpdate(_:columns:)","abstract":"<p>Called before the record is updated.</p>","parent_name":"Record"},"Classes/Record.html#/aroundUpdate(_:columns:update:)":{"name":"aroundUpdate(_:columns:update:)","abstract":"<p>Called around the record update.</p>","parent_name":"Record"},"Classes/Record.html#/didUpdate(_:)":{"name":"didUpdate(_:)","abstract":"<p>Called upon successful update.</p>","parent_name":"Record"},"Classes/Record.html#/willSave(_:)":{"name":"willSave(_:)","abstract":"<p>Called before the record is updated or inserted.</p>","parent_name":"Record"},"Classes/Record.html#/aroundSave(_:save:)":{"name":"aroundSave(_:save:)","abstract":"<p>Called around the record update or insertion.</p>","parent_name":"Record"},"Classes/Record.html#/didSave(_:)":{"name":"didSave(_:)","abstract":"<p>Called upon successful update or insertion.</p>","parent_name":"Record"},"Classes/Record.html#/willDelete(_:)":{"name":"willDelete(_:)","abstract":"<p>Called before the record is deleted.</p>","parent_name":"Record"},"Classes/Record.html#/aroundDelete(_:delete:)":{"name":"aroundDelete(_:delete:)","abstract":"<p>Called around the destruction of the record.</p>","parent_name":"Record"},"Classes/Record.html#/didDelete(deleted:)":{"name":"didDelete(deleted:)","abstract":"<p>Called upon successful deletion.</p>","parent_name":"Record"},"Classes/Record.html#/updateChanges(_:)":{"name":"updateChanges(_:)","abstract":"<p>If the record has been changed, executes an UPDATE statement so that","parent_name":"Record"},"Classes/RecordCursor.html#/Element":{"name":"Element","parent_name":"RecordCursor"},"Classes/ColumnDefinition/GeneratedColumnQualification.html#/virtual":{"name":"virtual","parent_name":"GeneratedColumnQualification"},"Classes/ColumnDefinition/GeneratedColumnQualification.html#/stored":{"name":"stored","parent_name":"GeneratedColumnQualification"},"Classes/ColumnDefinition/GeneratedColumnQualification.html":{"name":"GeneratedColumnQualification","abstract":"<p>The <code>GeneratedColumnQualification</code> enum defines whether a generated","parent_name":"ColumnDefinition"},"Classes/ColumnDefinition.html#/primaryKey(onConflict:autoincrement:)":{"name":"primaryKey(onConflict:autoincrement:)","abstract":"<p>Adds a primary key constraint on the column.</p>","parent_name":"ColumnDefinition"},"Classes/ColumnDefinition.html#/notNull(onConflict:)":{"name":"notNull(onConflict:)","abstract":"<p>Adds a NOT NULL constraint on the column.</p>","parent_name":"ColumnDefinition"},"Classes/ColumnDefinition.html#/unique(onConflict:)":{"name":"unique(onConflict:)","abstract":"<p>Adds a UNIQUE constraint on the column.</p>","parent_name":"ColumnDefinition"},"Classes/ColumnDefinition.html#/indexed()":{"name":"indexed()","abstract":"<p>Adds an index of the column.</p>","parent_name":"ColumnDefinition"},"Classes/ColumnDefinition.html#/check(_:)":{"name":"check(_:)","abstract":"<p>Adds a CHECK constraint on the column.</p>","parent_name":"ColumnDefinition"},"Classes/ColumnDefinition.html#/check(sql:)":{"name":"check(sql:)","abstract":"<p>Adds a CHECK constraint on the column.</p>","parent_name":"ColumnDefinition"},"Classes/ColumnDefinition.html#/defaults(to:)":{"name":"defaults(to:)","abstract":"<p>Defines the default column value.</p>","parent_name":"ColumnDefinition"},"Classes/ColumnDefinition.html#/defaults(sql:)":{"name":"defaults(sql:)","abstract":"<p>Defines the default column value.</p>","parent_name":"ColumnDefinition"},"Classes/ColumnDefinition.html#/collate(_:)":{"name":"collate(_:)","abstract":"<p>Defines the default column collation.</p>","parent_name":"ColumnDefinition"},"Classes/ColumnDefinition.html#/generatedAs(sql:_:)":{"name":"generatedAs(sql:_:)","abstract":"<p>Defines the column as a generated column.</p>","parent_name":"ColumnDefinition"},"Classes/ColumnDefinition.html#/generatedAs(_:_:)":{"name":"generatedAs(_:_:)","abstract":"<p>Defines the column as a generated column.</p>","parent_name":"ColumnDefinition"},"Classes/ColumnDefinition.html#/references(_:column:onDelete:onUpdate:deferred:)":{"name":"references(_:column:onDelete:onUpdate:deferred:)","abstract":"<p>Defines a foreign key.</p>","parent_name":"ColumnDefinition"},"Classes/TableAlteration.html#/add(column:_:)":{"name":"add(column:_:)","abstract":"<p>Appends a column to the table.</p>","parent_name":"TableAlteration"},"Classes/TableAlteration.html#/addColumn(sql:)":{"name":"addColumn(sql:)","abstract":"<p>Appends a table column defined with raw SQL.</p>","parent_name":"TableAlteration"},"Classes/TableAlteration.html#/addColumn(literal:)":{"name":"addColumn(literal:)","abstract":"<p>Appends a table column defined with an SQL <em>literal</em>.</p>","parent_name":"TableAlteration"},"Classes/TableAlteration.html#/rename(column:to:)":{"name":"rename(column:to:)","abstract":"<p>Renames a column in a table.</p>","parent_name":"TableAlteration"},"Classes/TableAlteration.html#/drop(column:)":{"name":"drop(column:)","abstract":"<p>Drops a column from the table.</p>","parent_name":"TableAlteration"},"Classes/TableDefinition.html#/autoIncrementedPrimaryKey(_:onConflict:)":{"name":"autoIncrementedPrimaryKey(_:onConflict:)","abstract":"<p>Defines the auto-incremented primary key.</p>","parent_name":"TableDefinition"},"Classes/TableDefinition.html#/column(_:_:)":{"name":"column(_:_:)","abstract":"<p>Appends a table column.</p>","parent_name":"TableDefinition"},"Classes/TableDefinition.html#/column(sql:)":{"name":"column(sql:)","abstract":"<p>Appends a table column defined with raw SQL.</p>","parent_name":"TableDefinition"},"Classes/TableDefinition.html#/column(literal:)":{"name":"column(literal:)","abstract":"<p>Appends a table column defined with an SQL <em>literal</em>.</p>","parent_name":"TableDefinition"},"Classes/TableDefinition.html#/primaryKey(_:onConflict:)":{"name":"primaryKey(_:onConflict:)","abstract":"<p>Defines the table primary key.</p>","parent_name":"TableDefinition"},"Classes/TableDefinition.html#/uniqueKey(_:onConflict:)":{"name":"uniqueKey(_:onConflict:)","abstract":"<p>Adds a unique key.</p>","parent_name":"TableDefinition"},"Classes/TableDefinition.html#/foreignKey(_:references:columns:onDelete:onUpdate:deferred:)":{"name":"foreignKey(_:references:columns:onDelete:onUpdate:deferred:)","abstract":"<p>Adds a foreign key.</p>","parent_name":"TableDefinition"},"Classes/TableDefinition.html#/check(_:)":{"name":"check(_:)","abstract":"<p>Adds a CHECK constraint.</p>","parent_name":"TableDefinition"},"Classes/TableDefinition.html#/check(sql:)":{"name":"check(sql:)","abstract":"<p>Adds a CHECK constraint.</p>","parent_name":"TableDefinition"},"Classes/TableDefinition.html#/constraint(sql:)":{"name":"constraint(sql:)","abstract":"<p>Appends a table constraint defined with raw SQL.</p>","parent_name":"TableDefinition"},"Classes/TableDefinition.html#/constraint(literal:)":{"name":"constraint(literal:)","abstract":"<p>Appends a table constraint defined with an SQL <em>literal</em>.</p>","parent_name":"TableDefinition"},"Classes/TableAlias.html#/init(name:)":{"name":"init(name:)","abstract":"<p>Creates a TableAlias, suitable for qualifying requests or associations.</p>","parent_name":"TableAlias"},"Classes/TableAlias.html#/subscript(_:)":{"name":"subscript(_:)","abstract":"<p>Returns a qualified value that is able to resolve ambiguities in","parent_name":"TableAlias"},"Classes/TableAlias.html#/exists":{"name":"exists","abstract":"<p><a href=\"http://github.com/groue/GRDB.swift#what-are-experimental-features\"><strong>Experimental</strong></a></p>","parent_name":"TableAlias"},"Classes/FTS5ColumnDefinition.html#/notIndexed()":{"name":"notIndexed()","abstract":"<p>Excludes the column from the full-text index.</p>","parent_name":"FTS5ColumnDefinition"},"Classes/FTS5TableDefinition.html#/tokenizer":{"name":"tokenizer","abstract":"<p>The virtual table tokenizer</p>","parent_name":"FTS5TableDefinition"},"Classes/FTS5TableDefinition.html#/content":{"name":"content","abstract":"<p>The FTS5 <code>content</code> option</p>","parent_name":"FTS5TableDefinition"},"Classes/FTS5TableDefinition.html#/contentRowID":{"name":"contentRowID","abstract":"<p>The FTS5 <code>content_rowid</code> option</p>","parent_name":"FTS5TableDefinition"},"Classes/FTS5TableDefinition.html#/prefixes":{"name":"prefixes","abstract":"<p>Support for the FTS5 <code>prefix</code> option</p>","parent_name":"FTS5TableDefinition"},"Classes/FTS5TableDefinition.html#/columnSize":{"name":"columnSize","abstract":"<p>Support for the FTS5 <code>columnsize</code> option</p>","parent_name":"FTS5TableDefinition"},"Classes/FTS5TableDefinition.html#/detail":{"name":"detail","abstract":"<p>Support for the FTS5 <code>detail</code> option</p>","parent_name":"FTS5TableDefinition"},"Classes/FTS5TableDefinition.html#/column(_:)":{"name":"column(_:)","abstract":"<p>Appends a table column.</p>","parent_name":"FTS5TableDefinition"},"Classes/FTS5TableDefinition.html#/synchronize(withTable:)":{"name":"synchronize(withTable:)","abstract":"<p>Synchronizes the full-text table with the content of an external","parent_name":"FTS5TableDefinition"},"Classes/FTS4ColumnDefinition.html#/notIndexed()":{"name":"notIndexed()","abstract":"<p>Excludes the column from the full-text index.</p>","parent_name":"FTS4ColumnDefinition"},"Classes/FTS4ColumnDefinition.html#/asLanguageId()":{"name":"asLanguageId()","abstract":"<p>Uses the column as the language id hidden column.</p>","parent_name":"FTS4ColumnDefinition"},"Classes/FTS4TableDefinition.html#/tokenizer":{"name":"tokenizer","abstract":"<p>The virtual table tokenizer</p>","parent_name":"FTS4TableDefinition"},"Classes/FTS4TableDefinition.html#/content":{"name":"content","abstract":"<p>The FTS4 <code>content</code> option</p>","parent_name":"FTS4TableDefinition"},"Classes/FTS4TableDefinition.html#/compress":{"name":"compress","abstract":"<p>The FTS4 <code>compress</code> option</p>","parent_name":"FTS4TableDefinition"},"Classes/FTS4TableDefinition.html#/uncompress":{"name":"uncompress","abstract":"<p>The FTS4 <code>uncompress</code> option</p>","parent_name":"FTS4TableDefinition"},"Classes/FTS4TableDefinition.html#/matchinfo":{"name":"matchinfo","abstract":"<p>The FTS4 <code>matchinfo</code> option</p>","parent_name":"FTS4TableDefinition"},"Classes/FTS4TableDefinition.html#/prefixes":{"name":"prefixes","abstract":"<p>Support for the FTS5 <code>prefix</code> option</p>","parent_name":"FTS4TableDefinition"},"Classes/FTS4TableDefinition.html#/column(_:)":{"name":"column(_:)","abstract":"<p>Appends a table column.</p>","parent_name":"FTS4TableDefinition"},"Classes/FTS4TableDefinition.html#/synchronize(withTable:)":{"name":"synchronize(withTable:)","abstract":"<p>Synchronizes the full-text table with the content of an external","parent_name":"FTS4TableDefinition"},"Classes/FTS3TableDefinition.html#/tokenizer":{"name":"tokenizer","abstract":"<p>The virtual table tokenizer</p>","parent_name":"FTS3TableDefinition"},"Classes/FTS3TableDefinition.html#/column(_:)":{"name":"column(_:)","abstract":"<p>Appends a table column.</p>","parent_name":"FTS3TableDefinition"},"Classes/FastDatabaseValueCursor.html#/Element":{"name":"Element","parent_name":"FastDatabaseValueCursor"},"Classes/Statement.html#/sqliteStatement":{"name":"sqliteStatement","abstract":"<p>The raw SQLite statement, suitable for the SQLite C API.</p>","parent_name":"Statement"},"Classes/Statement.html#/sql":{"name":"sql","abstract":"<p>The SQL query</p>","parent_name":"Statement"},"Classes/Statement.html#/columnNames":{"name":"columnNames","abstract":"<p>The column names, ordered from left to right.</p>","parent_name":"Statement"},"Classes/Statement.html#/databaseRegion":{"name":"databaseRegion","abstract":"<p>The database region that the statement looks into.</p>","parent_name":"Statement"},"Classes/Statement.html#/isReadonly":{"name":"isReadonly","abstract":"<p>Returns true if and only if the prepared statement makes no direct","parent_name":"Statement"},"Classes/Statement.html#/arguments":{"name":"arguments","abstract":"<p>The statement arguments.</p>","parent_name":"Statement"},"Classes/Statement.html#/validateArguments(_:)":{"name":"validateArguments(_:)","abstract":"<p>Throws a DatabaseError of code SQLITE_ERROR if arguments don&rsquo;t fill all","parent_name":"Statement"},"Classes/Statement.html#/setUncheckedArguments(_:)":{"name":"setUncheckedArguments(_:)","abstract":"<p>Set arguments without any validation. Trades safety for performance.</p>","parent_name":"Statement"},"Classes/Statement.html#/setArguments(_:)":{"name":"setArguments(_:)","abstract":"<p>Set the statement arguments, or throws a DatabaseError of code","parent_name":"Statement"},"Classes/Statement.html#/execute(arguments:)":{"name":"execute(arguments:)","abstract":"<p>Executes the prepared statement.</p>","parent_name":"Statement"},"Classes/Statement.html#/description":{"name":"description","parent_name":"Statement"},"Classes/Statement.html#/columnCount":{"name":"columnCount","abstract":"<p>The number of columns in the resulting rows.</p>","parent_name":"Statement"},"Classes/Statement.html#/index(ofColumn:)":{"name":"index(ofColumn:)","abstract":"<p>Returns the index of the leftmost column named <code>name</code>, in a","parent_name":"Statement"},"Classes/RowCursor.html#/Element":{"name":"Element","parent_name":"RowCursor"},"Classes/Row/PrefetchedRowsView.html#/isEmpty":{"name":"isEmpty","abstract":"<p>True if there is no prefetched associated rows.</p>","parent_name":"PrefetchedRowsView"},"Classes/Row/PrefetchedRowsView.html#/keys":{"name":"keys","abstract":"<p>The keys for available prefetched rows</p>","parent_name":"PrefetchedRowsView"},"Classes/Row/PrefetchedRowsView.html#/subscript(_:)":{"name":"subscript(_:)","abstract":"<p>Returns the prefetched rows associated with the given key.</p>","parent_name":"PrefetchedRowsView"},"Classes/Row/ScopesTreeView.html#/names":{"name":"names","abstract":"<p>The scopes defined on this row, recursively.</p>","parent_name":"ScopesTreeView"},"Classes/Row/ScopesTreeView.html#/subscript(_:)":{"name":"subscript(_:)","abstract":"<p>Returns the row associated with the given scope.</p>","parent_name":"ScopesTreeView"},"Classes/Row/ScopesView.html#/Index":{"name":"Index","parent_name":"ScopesView"},"Classes/Row/ScopesView.html#/names":{"name":"names","abstract":"<p>The scopes defined on this row.</p>","parent_name":"ScopesView"},"Classes/Row/ScopesView.html#/subscript(_:)":{"name":"subscript(_:)","abstract":"<p>Returns the row associated with the given scope, or nil if the","parent_name":"ScopesView"},"Classes/Row.html#/count":{"name":"count","abstract":"<p>The number of columns in the row.</p>","parent_name":"Row"},"Classes/Row.html#/prefetchedRows":{"name":"prefetchedRows","abstract":"<p>A view on the prefetched associated rows.</p>","parent_name":"Row"},"Classes/Row.html#/init()":{"name":"init()","abstract":"<p>Creates an empty row.</p>","parent_name":"Row"},"Classes/Row.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates a row from a dictionary of values.</p>","parent_name":"Row"},"Classes/Row.html#/init(dictionaryLiteral:)":{"name":"init(dictionaryLiteral:)","abstract":"<p>Creates a row initialized with elements. Column order is preserved, and","parent_name":"Row"},"Classes/Row.html#/copy()":{"name":"copy()","abstract":"<p>Returns an immutable copy of the row.</p>","parent_name":"Row"},"Classes/Row.html#/columnNames":{"name":"columnNames","abstract":"<p>The names of columns in the row.</p>","parent_name":"Row"},"Classes/Row.html#/hasColumn(_:)":{"name":"hasColumn(_:)","abstract":"<p>Returns true if and only if the row has that column.</p>","parent_name":"Row"},"Classes/Row.html#/containsNonNullValue":{"name":"containsNonNullValue","abstract":"<p>Returns true if and only if one column contains a non-null value, or if","parent_name":"Row"},"Classes/Row.html#/hasNull(atIndex:)":{"name":"hasNull(atIndex:)","abstract":"<p>Returns true if the row contains null at given index.</p>","parent_name":"Row"},"Classes/Row.html#/subscript(_:)":{"name":"subscript(_:)","abstract":"<p>Returns Int64, Double, String, Data or nil, depending on the value","parent_name":"Row"},"Classes/Row.html#/dataNoCopy(atIndex:)":{"name":"dataNoCopy(atIndex:)","abstract":"<p>Returns the optional <code>Data</code> at given index.</p>","parent_name":"Row"},"Classes/Row.html#/dataNoCopy(named:)":{"name":"dataNoCopy(named:)","abstract":"<p>Returns the optional <code>Data</code> at given column.</p>","parent_name":"Row"},"Classes/Row.html#/dataNoCopy(_:)":{"name":"dataNoCopy(_:)","abstract":"<p>Returns the optional <code>Data</code> at given column.</p>","parent_name":"Row"},"Classes/Row.html#/databaseValues":{"name":"databaseValues","abstract":"<p>The database values in the row.</p>","parent_name":"Row"},"Classes/Row.html#/scopes":{"name":"scopes","abstract":"<p>Returns a view on the scopes defined by row adapters.</p>","parent_name":"Row"},"Classes/Row.html#/scopesTree":{"name":"scopesTree","abstract":"<p>Returns a view on the scopes tree defined by row adapters.</p>","parent_name":"Row"},"Classes/Row.html#/unscoped":{"name":"unscoped","abstract":"<p>Returns a copy of the row, without any scopes.</p>","parent_name":"Row"},"Classes/Row.html#/unadapted":{"name":"unadapted","abstract":"<p>Return the raw row fetched from the database.</p>","parent_name":"Row"},"Classes/Row.html#/fetchCursor(_:arguments:adapter:)":{"name":"fetchCursor(_:arguments:adapter:)","abstract":"<p>Returns a cursor over rows fetched from a prepared statement.</p>","parent_name":"Row"},"Classes/Row.html#/fetchAll(_:arguments:adapter:)":{"name":"fetchAll(_:arguments:adapter:)","abstract":"<p>Returns an array of rows fetched from a prepared statement.</p>","parent_name":"Row"},"Classes/Row.html#/fetchSet(_:arguments:adapter:)":{"name":"fetchSet(_:arguments:adapter:)","abstract":"<p>Returns a set of rows fetched from a prepared statement.</p>","parent_name":"Row"},"Classes/Row.html#/fetchOne(_:arguments:adapter:)":{"name":"fetchOne(_:arguments:adapter:)","abstract":"<p>Returns a single row fetched from a prepared statement.</p>","parent_name":"Row"},"Classes/Row.html#/fetchCursor(_:sql:arguments:adapter:)":{"name":"fetchCursor(_:sql:arguments:adapter:)","abstract":"<p>Returns a cursor over rows fetched from an SQL query.</p>","parent_name":"Row"},"Classes/Row.html#/fetchAll(_:sql:arguments:adapter:)":{"name":"fetchAll(_:sql:arguments:adapter:)","abstract":"<p>Returns an array of rows fetched from an SQL query.</p>","parent_name":"Row"},"Classes/Row.html#/fetchSet(_:sql:arguments:adapter:)":{"name":"fetchSet(_:sql:arguments:adapter:)","abstract":"<p>Returns a set of rows fetched from an SQL query.</p>","parent_name":"Row"},"Classes/Row.html#/fetchOne(_:sql:arguments:adapter:)":{"name":"fetchOne(_:sql:arguments:adapter:)","abstract":"<p>Returns a single row fetched from an SQL query.</p>","parent_name":"Row"},"Classes/Row.html#/fetchCursor(_:_:)":{"name":"fetchCursor(_:_:)","abstract":"<p>Returns a cursor over rows fetched from a fetch request.</p>","parent_name":"Row"},"Classes/Row.html#/fetchAll(_:_:)":{"name":"fetchAll(_:_:)","abstract":"<p>Returns an array of rows fetched from a fetch request.</p>","parent_name":"Row"},"Classes/Row.html#/fetchSet(_:_:)":{"name":"fetchSet(_:_:)","abstract":"<p>Returns a set of rows fetched from a fetch request.</p>","parent_name":"Row"},"Classes/Row.html#/fetchOne(_:_:)":{"name":"fetchOne(_:_:)","abstract":"<p>Returns a single row fetched from a fetch request.</p>","parent_name":"Row"},"Classes/Row/ScopesView.html":{"name":"ScopesView","abstract":"<p>A view of the scopes defined by row adapters. It is a collection of","parent_name":"Row"},"Classes/Row/ScopesTreeView.html":{"name":"ScopesTreeView","abstract":"<p>A view on the scopes tree defined by row adapters.</p>","parent_name":"Row"},"Classes/Row/PrefetchedRowsView.html":{"name":"PrefetchedRowsView","abstract":"<p>A view on the prefetched associated rows.</p>","parent_name":"Row"},"Classes/AnyDatabaseWriter.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates a database writer that wraps a base database writer.</p>","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/configuration":{"name":"configuration","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/close()":{"name":"close()","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/interrupt()":{"name":"interrupt()","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/read(_:)":{"name":"read(_:)","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/asyncRead(_:)":{"name":"asyncRead(_:)","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/unsafeRead(_:)":{"name":"unsafeRead(_:)","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/asyncUnsafeRead(_:)":{"name":"asyncUnsafeRead(_:)","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/unsafeReentrantRead(_:)":{"name":"unsafeReentrantRead(_:)","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/concurrentRead(_:)":{"name":"concurrentRead(_:)","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/write(_:)":{"name":"write(_:)","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/writeWithoutTransaction(_:)":{"name":"writeWithoutTransaction(_:)","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/barrierWriteWithoutTransaction(_:)":{"name":"barrierWriteWithoutTransaction(_:)","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/asyncBarrierWriteWithoutTransaction(_:)":{"name":"asyncBarrierWriteWithoutTransaction(_:)","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/asyncWrite(_:completion:)":{"name":"asyncWrite(_:completion:)","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/asyncWriteWithoutTransaction(_:)":{"name":"asyncWriteWithoutTransaction(_:)","parent_name":"AnyDatabaseWriter"},"Classes/AnyDatabaseWriter.html#/unsafeReentrantWrite(_:)":{"name":"unsafeReentrantWrite(_:)","parent_name":"AnyDatabaseWriter"},"Classes/DatabaseFuture.html#/wait()":{"name":"wait()","abstract":"<p>Blocks the current thread until the value is available, and returns it.</p>","parent_name":"DatabaseFuture"},"Classes/DatabaseValueCursor.html#/Element":{"name":"Element","parent_name":"DatabaseValueCursor"},"Classes/DatabaseSnapshot.html#/configuration":{"name":"configuration","abstract":"<p>The database configuration</p>","parent_name":"DatabaseSnapshot"},"Classes/DatabaseSnapshot.html#/close()":{"name":"close()","parent_name":"DatabaseSnapshot"},"Classes/DatabaseSnapshot.html#/interrupt()":{"name":"interrupt()","parent_name":"DatabaseSnapshot"},"Classes/DatabaseSnapshot.html#/read(_:)":{"name":"read(_:)","parent_name":"DatabaseSnapshot"},"Classes/DatabaseSnapshot.html#/asyncRead(_:)":{"name":"asyncRead(_:)","parent_name":"DatabaseSnapshot"},"Classes/DatabaseSnapshot.html#/unsafeRead(_:)":{"name":"unsafeRead(_:)","parent_name":"DatabaseSnapshot"},"Classes/DatabaseSnapshot.html#/asyncUnsafeRead(_:)":{"name":"asyncUnsafeRead(_:)","parent_name":"DatabaseSnapshot"},"Classes/DatabaseSnapshot.html#/unsafeReentrantRead(_:)":{"name":"unsafeReentrantRead(_:)","parent_name":"DatabaseSnapshot"},"Classes/AnyDatabaseReader.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates a database reader that wraps a base database reader.</p>","parent_name":"AnyDatabaseReader"},"Classes/AnyDatabaseReader.html#/configuration":{"name":"configuration","parent_name":"AnyDatabaseReader"},"Classes/AnyDatabaseReader.html#/close()":{"name":"close()","parent_name":"AnyDatabaseReader"},"Classes/AnyDatabaseReader.html#/interrupt()":{"name":"interrupt()","parent_name":"AnyDatabaseReader"},"Classes/AnyDatabaseReader.html#/read(_:)":{"name":"read(_:)","parent_name":"AnyDatabaseReader"},"Classes/AnyDatabaseReader.html#/asyncRead(_:)":{"name":"asyncRead(_:)","parent_name":"AnyDatabaseReader"},"Classes/AnyDatabaseReader.html#/unsafeRead(_:)":{"name":"unsafeRead(_:)","parent_name":"AnyDatabaseReader"},"Classes/AnyDatabaseReader.html#/asyncUnsafeRead(_:)":{"name":"asyncUnsafeRead(_:)","parent_name":"AnyDatabaseReader"},"Classes/AnyDatabaseReader.html#/unsafeReentrantRead(_:)":{"name":"unsafeReentrantRead(_:)","parent_name":"AnyDatabaseReader"},"Classes/DatabaseQueue.html#/configuration":{"name":"configuration","abstract":"<p>The database configuration</p>","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/path":{"name":"path","abstract":"<p>The path to the database file; it is &ldquo;:memory:&rdquo; for in-memory databases.</p>","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/init(path:configuration:)":{"name":"init(path:configuration:)","abstract":"<p>Opens the SQLite database at path <em>path</em>.</p>","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/init(configuration:)":{"name":"init(configuration:)","abstract":"<p>Opens an in-memory SQLite database.</p>","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/close()":{"name":"close()","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/releaseMemory()":{"name":"releaseMemory()","abstract":"<p>Free as much memory as possible.</p>","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/interrupt()":{"name":"interrupt()","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/read(_:)":{"name":"read(_:)","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/asyncRead(_:)":{"name":"asyncRead(_:)","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/unsafeRead(_:)":{"name":"unsafeRead(_:)","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/asyncUnsafeRead(_:)":{"name":"asyncUnsafeRead(_:)","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/unsafeReentrantRead(_:)":{"name":"unsafeReentrantRead(_:)","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/concurrentRead(_:)":{"name":"concurrentRead(_:)","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/inTransaction(_:_:)":{"name":"inTransaction(_:_:)","abstract":"<p>Synchronously executes database updates in a protected dispatch queue,","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/writeWithoutTransaction(_:)":{"name":"writeWithoutTransaction(_:)","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/barrierWriteWithoutTransaction(_:)":{"name":"barrierWriteWithoutTransaction(_:)","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/asyncBarrierWriteWithoutTransaction(_:)":{"name":"asyncBarrierWriteWithoutTransaction(_:)","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/inDatabase(_:)":{"name":"inDatabase(_:)","abstract":"<p>Synchronously executes database updates in a protected dispatch queue,","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/unsafeReentrantWrite(_:)":{"name":"unsafeReentrantWrite(_:)","parent_name":"DatabaseQueue"},"Classes/DatabaseQueue.html#/asyncWriteWithoutTransaction(_:)":{"name":"asyncWriteWithoutTransaction(_:)","parent_name":"DatabaseQueue"},"Classes/DatabasePool.html#/configuration":{"name":"configuration","abstract":"<p>The database configuration</p>","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/path":{"name":"path","abstract":"<p>The path to the database.</p>","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/init(path:configuration:)":{"name":"init(path:configuration:)","abstract":"<p>Opens the SQLite database at path <em>path</em>.</p>","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/releaseMemory()":{"name":"releaseMemory()","abstract":"<p>Frees as much memory as possible, by disposing non-essential memory from","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/releaseMemoryEventually()":{"name":"releaseMemoryEventually()","abstract":"<p>Eventually frees as much memory as possible, by disposing non-essential","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/close()":{"name":"close()","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/interrupt()":{"name":"interrupt()","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/read(_:)":{"name":"read(_:)","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/asyncRead(_:)":{"name":"asyncRead(_:)","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/unsafeRead(_:)":{"name":"unsafeRead(_:)","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/asyncUnsafeRead(_:)":{"name":"asyncUnsafeRead(_:)","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/unsafeReentrantRead(_:)":{"name":"unsafeReentrantRead(_:)","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/concurrentRead(_:)":{"name":"concurrentRead(_:)","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/asyncConcurrentRead(_:)":{"name":"asyncConcurrentRead(_:)","abstract":"<p>Asynchronously executes a read-only function in a protected","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/invalidateReadOnlyConnections()":{"name":"invalidateReadOnlyConnections()","abstract":"<p>Invalidates open read-only SQLite connections.</p>","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/writeWithoutTransaction(_:)":{"name":"writeWithoutTransaction(_:)","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/barrierWriteWithoutTransaction(_:)":{"name":"barrierWriteWithoutTransaction(_:)","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/asyncBarrierWriteWithoutTransaction(_:)":{"name":"asyncBarrierWriteWithoutTransaction(_:)","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/writeInTransaction(_:_:)":{"name":"writeInTransaction(_:_:)","abstract":"<p>Synchronously executes database updates in a protected dispatch queue,","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/unsafeReentrantWrite(_:)":{"name":"unsafeReentrantWrite(_:)","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/asyncWriteWithoutTransaction(_:)":{"name":"asyncWriteWithoutTransaction(_:)","abstract":"<p>Asynchronously executes database updates in a protected dispatch queue,","parent_name":"DatabasePool"},"Classes/DatabasePool.html#/makeSnapshot()":{"name":"makeSnapshot()","abstract":"<p>Creates a database snapshot.</p>","parent_name":"DatabasePool"},"Classes/DatabaseFunction.html#/name":{"name":"name","abstract":"<p>The name of the SQL function</p>","parent_name":"DatabaseFunction"},"Classes/DatabaseFunction.html#/init(_:argumentCount:pure:function:)":{"name":"init(_:argumentCount:pure:function:)","abstract":"<p>Creates an SQL function.</p>","parent_name":"DatabaseFunction"},"Classes/DatabaseFunction.html#/init(_:argumentCount:pure:aggregate:)":{"name":"init(_:argumentCount:pure:aggregate:)","abstract":"<p>Creates an SQL aggregate function.</p>","parent_name":"DatabaseFunction"},"Classes/DatabaseFunction.html#/callAsFunction(_:)":{"name":"callAsFunction(_:)","abstract":"<p>Returns an SQL expression that applies the function.</p>","parent_name":"DatabaseFunction"},"Classes/DatabaseFunction.html#/capitalize":{"name":"capitalize","abstract":"<p>An SQL function that returns the Swift built-in capitalized","parent_name":"DatabaseFunction"},"Classes/DatabaseFunction.html#/lowercase":{"name":"lowercase","abstract":"<p>An SQL function that returns the Swift built-in lowercased","parent_name":"DatabaseFunction"},"Classes/DatabaseFunction.html#/uppercase":{"name":"uppercase","abstract":"<p>An SQL function that returns the Swift built-in uppercased","parent_name":"DatabaseFunction"},"Classes/DatabaseFunction.html#/localizedCapitalize":{"name":"localizedCapitalize","abstract":"<p>An SQL function that returns the Swift built-in","parent_name":"DatabaseFunction"},"Classes/DatabaseFunction.html#/localizedLowercase":{"name":"localizedLowercase","abstract":"<p>An SQL function that returns the Swift built-in","parent_name":"DatabaseFunction"},"Classes/DatabaseFunction.html#/localizedUppercase":{"name":"localizedUppercase","abstract":"<p>An SQL function that returns the Swift built-in","parent_name":"DatabaseFunction"},"Classes/DatabaseCollation.html#/name":{"name":"name","abstract":"<p>The name of the collation</p>","parent_name":"DatabaseCollation"},"Classes/DatabaseCollation.html#/init(_:function:)":{"name":"init(_:function:)","abstract":"<p>Creates a collation.</p>","parent_name":"DatabaseCollation"},"Classes/DatabaseCollation.html#/unicodeCompare":{"name":"unicodeCompare","abstract":"<p>A collation, or SQL string comparison function, that compares strings","parent_name":"DatabaseCollation"},"Classes/DatabaseCollation.html#/caseInsensitiveCompare":{"name":"caseInsensitiveCompare","abstract":"<p>A collation, or SQL string comparison function, that compares strings","parent_name":"DatabaseCollation"},"Classes/DatabaseCollation.html#/localizedCaseInsensitiveCompare":{"name":"localizedCaseInsensitiveCompare","abstract":"<p>A collation, or SQL string comparison function, that compares strings","parent_name":"DatabaseCollation"},"Classes/DatabaseCollation.html#/localizedCompare":{"name":"localizedCompare","abstract":"<p>A collation, or SQL string comparison function, that compares strings","parent_name":"DatabaseCollation"},"Classes/DatabaseCollation.html#/localizedStandardCompare":{"name":"localizedStandardCompare","abstract":"<p>A collation, or SQL string comparison function, that compares strings","parent_name":"DatabaseCollation"},"Classes/SQLStatementCursor.html#/next()":{"name":"next()","parent_name":"SQLStatementCursor"},"Classes/Database/TransactionObservationExtent.html#/observerLifetime":{"name":"observerLifetime","abstract":"<p>Observation lasts until observer is deallocated</p>","parent_name":"TransactionObservationExtent"},"Classes/Database/TransactionObservationExtent.html#/nextTransaction":{"name":"nextTransaction","abstract":"<p>Observation lasts until the next transaction</p>","parent_name":"TransactionObservationExtent"},"Classes/Database/TransactionObservationExtent.html#/databaseLifetime":{"name":"databaseLifetime","abstract":"<p>Observation lasts until the database is closed</p>","parent_name":"TransactionObservationExtent"},"Classes/Database/TransactionKind.html#/deferred":{"name":"deferred","abstract":"<p>The <code>DEFERRED</code> transaction kind</p>","parent_name":"TransactionKind"},"Classes/Database/TransactionKind.html#/immediate":{"name":"immediate","abstract":"<p>The <code>IMMEDIATE</code> transaction kind</p>","parent_name":"TransactionKind"},"Classes/Database/TransactionKind.html#/exclusive":{"name":"exclusive","abstract":"<p>The <code>EXCLUSIVE</code> transaction kind</p>","parent_name":"TransactionKind"},"Classes/Database/TransactionCompletion.html#/commit":{"name":"commit","abstract":"<p>Confirms changes</p>","parent_name":"TransactionCompletion"},"Classes/Database/TransactionCompletion.html#/rollback":{"name":"rollback","abstract":"<p>Cancel changes</p>","parent_name":"TransactionCompletion"},"Classes/Database/TraceEvent/Statement.html#/sql":{"name":"sql","abstract":"<p>The executed SQL, where bound parameters are not expanded.</p>","parent_name":"Statement"},"Classes/Database/TraceEvent/Statement.html#/expandedSQL":{"name":"expandedSQL","abstract":"<p>The executed SQL, where bound parameters are expanded.</p>","parent_name":"Statement"},"Classes/Database/TraceEvent/Statement.html#/description":{"name":"description","parent_name":"Statement"},"Classes/Database/TraceEvent/Statement.html":{"name":"Statement","abstract":"<p>Information about a statement reported by <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Database.html#/trace(options:_:)\">Database.trace(options:_:)</a></code></p>","parent_name":"TraceEvent"},"Classes/Database/TraceEvent.html#/statement(_:)":{"name":"statement(_:)","abstract":"<p>An event reported by <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Database/TracingOptions.html#/statement\">TracingOptions.statement</a></code>.</p>","parent_name":"TraceEvent"},"Classes/Database/TraceEvent.html#/profile(statement:duration:)":{"name":"profile(statement:duration:)","abstract":"<p>An event reported by <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Database/TracingOptions.html#/profile\">TracingOptions.profile</a></code>.</p>","parent_name":"TraceEvent"},"Classes/Database/TraceEvent.html#/description":{"name":"description","abstract":"<p>The trace event description.</p>","parent_name":"TraceEvent"},"Classes/Database/TraceEvent.html#/expandedDescription":{"name":"expandedDescription","abstract":"<p>The trace event description, where bound parameters are expanded.</p>","parent_name":"TraceEvent"},"Classes/Database/TracingOptions.html#/rawValue":{"name":"rawValue","abstract":"<p>The raw &ldquo;Trace Event Code&rdquo;.</p>","parent_name":"TracingOptions"},"Classes/Database/TracingOptions.html#/init(rawValue:)":{"name":"init(rawValue:)","abstract":"<p>Creates a <code>TracingOptions</code> from a raw &ldquo;Trace Event Code&rdquo;.</p>","parent_name":"TracingOptions"},"Classes/Database/TracingOptions.html#/statement":{"name":"statement","abstract":"<p>Reports executed statements.</p>","parent_name":"TracingOptions"},"Classes/Database/TracingOptions.html#/profile":{"name":"profile","abstract":"<p>Reports executed statements and the estimated duration that the","parent_name":"TracingOptions"},"Classes/Database/ForeignKeyAction.html#/cascade":{"name":"cascade","abstract":"<p>The <code>CASCADE</code> foreign key action</p>","parent_name":"ForeignKeyAction"},"Classes/Database/ForeignKeyAction.html#/restrict":{"name":"restrict","abstract":"<p>The <code>RESTRICT</code> foreign key action</p>","parent_name":"ForeignKeyAction"},"Classes/Database/ForeignKeyAction.html#/setNull":{"name":"setNull","abstract":"<p>The <code>SET NULL</code> foreign key action</p>","parent_name":"ForeignKeyAction"},"Classes/Database/ForeignKeyAction.html#/setDefault":{"name":"setDefault","abstract":"<p>The <code>SET DEFAULT</code> foreign key action</p>","parent_name":"ForeignKeyAction"},"Classes/Database/ConflictResolution.html#/rollback":{"name":"rollback","abstract":"<p>The <code>ROLLBACK</code> conflict resolution</p>","parent_name":"ConflictResolution"},"Classes/Database/ConflictResolution.html#/abort":{"name":"abort","abstract":"<p>The <code>ABORT</code> conflict resolution</p>","parent_name":"ConflictResolution"},"Classes/Database/ConflictResolution.html#/fail":{"name":"fail","abstract":"<p>The <code>FAIL</code> conflict resolution</p>","parent_name":"ConflictResolution"},"Classes/Database/ConflictResolution.html#/ignore":{"name":"ignore","abstract":"<p>The <code>IGNORE</code> conflict resolution</p>","parent_name":"ConflictResolution"},"Classes/Database/ConflictResolution.html#/replace":{"name":"replace","abstract":"<p>The <code>REPLACE</code> conflict resolution</p>","parent_name":"ConflictResolution"},"Classes/Database/ColumnType.html#/init(rawValue:)":{"name":"init(rawValue:)","abstract":"<p>Creates an SQL column type.</p>","parent_name":"ColumnType"},"Classes/Database/ColumnType.html#/text":{"name":"text","abstract":"<p>The <code>TEXT</code> SQL column type</p>","parent_name":"ColumnType"},"Classes/Database/ColumnType.html#/integer":{"name":"integer","abstract":"<p>The <code>INTEGER</code> SQL column type</p>","parent_name":"ColumnType"},"Classes/Database/ColumnType.html#/double":{"name":"double","abstract":"<p>The <code>DOUBLE</code> SQL column type</p>","parent_name":"ColumnType"},"Classes/Database/ColumnType.html#/real":{"name":"real","abstract":"<p>The <code>REAL</code> SQL column type</p>","parent_name":"ColumnType"},"Classes/Database/ColumnType.html#/numeric":{"name":"numeric","abstract":"<p>The <code>NUMERIC</code> SQL column type</p>","parent_name":"ColumnType"},"Classes/Database/ColumnType.html#/boolean":{"name":"boolean","abstract":"<p>The <code>BOOLEAN</code> SQL column type</p>","parent_name":"ColumnType"},"Classes/Database/ColumnType.html#/blob":{"name":"blob","abstract":"<p>The <code>BLOB</code> SQL column type</p>","parent_name":"ColumnType"},"Classes/Database/ColumnType.html#/date":{"name":"date","abstract":"<p>The <code>DATE</code> SQL column type</p>","parent_name":"ColumnType"},"Classes/Database/ColumnType.html#/datetime":{"name":"datetime","abstract":"<p>The <code>DATETIME</code> SQL column type</p>","parent_name":"ColumnType"},"Classes/Database/ColumnType.html#/any":{"name":"any","abstract":"<p>The <code>ANY</code> SQL column type</p>","parent_name":"ColumnType"},"Classes/Database/CollationName.html#/init(rawValue:)":{"name":"init(rawValue:)","abstract":"<p>Creates a built-in collation name.</p>","parent_name":"CollationName"},"Classes/Database/CollationName.html#/binary":{"name":"binary","abstract":"<p>The <code>BINARY</code> built-in SQL collation</p>","parent_name":"CollationName"},"Classes/Database/CollationName.html#/nocase":{"name":"nocase","abstract":"<p>The <code>NOCASE</code> built-in SQL collation</p>","parent_name":"CollationName"},"Classes/Database/CollationName.html#/rtrim":{"name":"rtrim","abstract":"<p>The <code>RTRIM</code> built-in SQL collation</p>","parent_name":"CollationName"},"Classes/Database/CheckpointMode.html#/passive":{"name":"passive","abstract":"<p>The <code>SQLITE_CHECKPOINT_PASSIVE</code> mode</p>","parent_name":"CheckpointMode"},"Classes/Database/CheckpointMode.html#/full":{"name":"full","abstract":"<p>The <code>SQLITE_CHECKPOINT_FULL</code> mode</p>","parent_name":"CheckpointMode"},"Classes/Database/CheckpointMode.html#/restart":{"name":"restart","abstract":"<p>The <code>SQLITE_CHECKPOINT_RESTART</code> mode</p>","parent_name":"CheckpointMode"},"Classes/Database/CheckpointMode.html#/truncate":{"name":"truncate","abstract":"<p>The <code>SQLITE_CHECKPOINT_TRUNCATE</code> mode</p>","parent_name":"CheckpointMode"},"Classes/Database/BusyMode.html#/immediateError":{"name":"immediateError","abstract":"<p>The SQLITE_BUSY error is immediately returned to the connection that","parent_name":"BusyMode"},"Classes/Database/BusyMode.html#/timeout(_:)":{"name":"timeout(_:)","abstract":"<p>The SQLITE_BUSY error will be returned only if the database remains","parent_name":"BusyMode"},"Classes/Database/BusyMode.html#/callback(_:)":{"name":"callback(_:)","abstract":"<p>A custom callback that is called when a database is locked.","parent_name":"BusyMode"},"Classes/Database.html#/sqliteConnection":{"name":"sqliteConnection","abstract":"<p>The raw SQLite connection, suitable for the SQLite C API.</p>","parent_name":"Database"},"Classes/Database.html#/logError":{"name":"logError","abstract":"<p>The error logging function.</p>","parent_name":"Database"},"Classes/Database.html#/configuration":{"name":"configuration","abstract":"<p>The database configuration</p>","parent_name":"Database"},"Classes/Database.html#/description":{"name":"description","abstract":"<p>See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Configuration.html#/label\">Configuration.label</a></code></p>","parent_name":"Database"},"Classes/Database.html#/debugDescription":{"name":"debugDescription","parent_name":"Database"},"Classes/Database.html#/lastInsertedRowID":{"name":"lastInsertedRowID","abstract":"<p>The rowID of the most recently inserted row.</p>","parent_name":"Database"},"Classes/Database.html#/changesCount":{"name":"changesCount","abstract":"<p>The number of rows modified, inserted or deleted by the most recent","parent_name":"Database"},"Classes/Database.html#/totalChangesCount":{"name":"totalChangesCount","abstract":"<p>The total number of rows modified, inserted or deleted by all successful","parent_name":"Database"},"Classes/Database.html#/isInsideTransaction":{"name":"isInsideTransaction","abstract":"<p>True if the database connection is currently in a transaction.</p>","parent_name":"Database"},"Classes/Database.html#/lastErrorCode":{"name":"lastErrorCode","abstract":"<p>The last error code</p>","parent_name":"Database"},"Classes/Database.html#/lastErrorMessage":{"name":"lastErrorMessage","abstract":"<p>The last error message</p>","parent_name":"Database"},"Classes/Database.html#/maximumStatementArgumentCount":{"name":"maximumStatementArgumentCount","abstract":"<p>The maximum number of arguments accepted by an SQLite statement.</p>","parent_name":"Database"},"Classes/Database.html#/add(function:)":{"name":"add(function:)","abstract":"<p>Add or redefine an SQL function.</p>","parent_name":"Database"},"Classes/Database.html#/remove(function:)":{"name":"remove(function:)","abstract":"<p>Remove an SQL function.</p>","parent_name":"Database"},"Classes/Database.html#/add(collation:)":{"name":"add(collation:)","abstract":"<p>Add or redefine a collation.</p>","parent_name":"Database"},"Classes/Database.html#/remove(collation:)":{"name":"remove(collation:)","abstract":"<p>Remove a collation.</p>","parent_name":"Database"},"Classes/Database.html#/trace(options:_:)":{"name":"trace(options:_:)","abstract":"<p>Registers a tracing function.</p>","parent_name":"Database"},"Classes/Database.html#/checkpoint(_:on:)":{"name":"checkpoint(_:on:)","abstract":"<p>Runs a WAL checkpoint.</p>","parent_name":"Database"},"Classes/Database.html#/suspendNotification":{"name":"suspendNotification","abstract":"<p>When this notification is posted, databases which were opened with the","parent_name":"Database"},"Classes/Database.html#/resumeNotification":{"name":"resumeNotification","abstract":"<p>When this notification is posted, databases which were opened with the","parent_name":"Database"},"Classes/Database.html#/inTransaction(_:_:)":{"name":"inTransaction(_:_:)","abstract":"<p>Executes a block inside a database transaction.</p>","parent_name":"Database"},"Classes/Database.html#/inSavepoint(_:)":{"name":"inSavepoint(_:)","abstract":"<p>Executes a block inside a savepoint.</p>","parent_name":"Database"},"Classes/Database.html#/beginTransaction(_:)":{"name":"beginTransaction(_:)","abstract":"<p>Begins a database transaction.</p>","parent_name":"Database"},"Classes/Database.html#/rollback()":{"name":"rollback()","abstract":"<p>Rollbacks a database transaction.</p>","parent_name":"Database"},"Classes/Database.html#/commit()":{"name":"commit()","abstract":"<p>Commits a database transaction.</p>","parent_name":"Database"},"Classes/Database.html#/releaseMemory()":{"name":"releaseMemory()","abstract":"<p>Free as much memory as possible.</p>","parent_name":"Database"},"Classes/Database.html#/backup(to:pagesPerStep:progress:)":{"name":"backup(to:pagesPerStep:progress:)","abstract":"<p>Copies the database contents into another database.</p>","parent_name":"Database"},"Classes/Database.html#/clearSchemaCache()":{"name":"clearSchemaCache()","abstract":"<p>Clears the database schema cache.</p>","parent_name":"Database"},"Classes/Database.html#/tableExists(_:)":{"name":"tableExists(_:)","abstract":"<p>Returns whether a table exists, in the main or temp schema, or in an","parent_name":"Database"},"Classes/Database.html#/isSQLiteInternalTable(_:)":{"name":"isSQLiteInternalTable(_:)","abstract":"<p>Returns whether a table is an internal SQLite table.</p>","parent_name":"Database"},"Classes/Database.html#/isGRDBInternalTable(_:)":{"name":"isGRDBInternalTable(_:)","abstract":"<p>Returns whether a table is an internal GRDB table.</p>","parent_name":"Database"},"Classes/Database.html#/viewExists(_:)":{"name":"viewExists(_:)","abstract":"<p>Returns whether a view exists, in the main or temp schema, or in an","parent_name":"Database"},"Classes/Database.html#/triggerExists(_:)":{"name":"triggerExists(_:)","abstract":"<p>Returns whether a trigger exists, in the main or temp schema, or in an","parent_name":"Database"},"Classes/Database.html#/primaryKey(_:)":{"name":"primaryKey(_:)","abstract":"<p>The primary key for table named <code>tableName</code>.</p>","parent_name":"Database"},"Classes/Database.html#/indexes(on:)":{"name":"indexes(on:)","abstract":"<p>The indexes on table named <code>tableName</code>.</p>","parent_name":"Database"},"Classes/Database.html#/table(_:hasUniqueKey:)":{"name":"table(_:hasUniqueKey:)","abstract":"<p>True if a sequence of columns uniquely identifies a row, that is to say","parent_name":"Database"},"Classes/Database.html#/foreignKeys(on:)":{"name":"foreignKeys(on:)","abstract":"<p>The foreign keys defined on table named <code>tableName</code>.</p>","parent_name":"Database"},"Classes/Database.html#/foreignKeyViolations()":{"name":"foreignKeyViolations()","abstract":"<p>Returns a cursor over foreign key violations in the database.</p>","parent_name":"Database"},"Classes/Database.html#/foreignKeyViolations(in:)":{"name":"foreignKeyViolations(in:)","abstract":"<p>Returns a cursor over foreign key violations in the table.</p>","parent_name":"Database"},"Classes/Database.html#/checkForeignKeys()":{"name":"checkForeignKeys()","abstract":"<p>Throws a DatabaseError of extended code <code>SQLITE_CONSTRAINT_FOREIGNKEY</code>","parent_name":"Database"},"Classes/Database.html#/checkForeignKeys(in:)":{"name":"checkForeignKeys(in:)","abstract":"<p>Throws a DatabaseError of extended code <code>SQLITE_CONSTRAINT_FOREIGNKEY</code>","parent_name":"Database"},"Classes/Database.html#/columns(in:)":{"name":"columns(in:)","abstract":"<p>The columns in the table, or view, named <code>tableName</code>.</p>","parent_name":"Database"},"Classes/Database.html#/makeStatement(sql:)":{"name":"makeStatement(sql:)","abstract":"<p>Returns a new prepared statement that can be reused.</p>","parent_name":"Database"},"Classes/Database.html#/makeStatement(literal:)":{"name":"makeStatement(literal:)","abstract":"<p>Returns a new prepared statement that can be reused.</p>","parent_name":"Database"},"Classes/Database.html#/cachedStatement(sql:)":{"name":"cachedStatement(sql:)","abstract":"<p>Returns a prepared statement that can be reused.</p>","parent_name":"Database"},"Classes/Database.html#/cachedStatement(literal:)":{"name":"cachedStatement(literal:)","abstract":"<p>Returns a prepared statement that can be reused.</p>","parent_name":"Database"},"Classes/Database.html#/allStatements(sql:arguments:)":{"name":"allStatements(sql:arguments:)","abstract":"<p>Returns a cursor of all SQL statements separated by semi-colons.</p>","parent_name":"Database"},"Classes/Database.html#/allStatements(literal:)":{"name":"allStatements(literal:)","abstract":"<p>Returns a cursor of all SQL statements separated by semi-colons.</p>","parent_name":"Database"},"Classes/Database.html#/execute(sql:arguments:)":{"name":"execute(sql:arguments:)","abstract":"<p>Executes one or several SQL statements, separated by semi-colons.</p>","parent_name":"Database"},"Classes/Database.html#/execute(literal:)":{"name":"execute(literal:)","abstract":"<p>Executes one or several SQL statements, separated by semi-colons.</p>","parent_name":"Database"},"Classes/Database.html#/usePassphrase(_:)":{"name":"usePassphrase(_:)","abstract":"<p>Sets the passphrase used to crypt and decrypt an SQLCipher database.</p>","parent_name":"Database"},"Classes/Database.html#/changePassphrase(_:)":{"name":"changePassphrase(_:)","abstract":"<p>Changes the passphrase used by an SQLCipher encrypted database.</p>","parent_name":"Database"},"Classes/Database.html#/BusyCallback":{"name":"BusyCallback","abstract":"<p>See BusyMode and <a href=\"https://www.sqlite.org/c3ref/busy_handler.html\">https://www.sqlite.org/c3ref/busy_handler.html</a></p>","parent_name":"Database"},"Classes/Database/BusyMode.html":{"name":"BusyMode","abstract":"<p>When there are several connections to a database, a connection may try","parent_name":"Database"},"Classes/Database/CheckpointMode.html":{"name":"CheckpointMode","abstract":"<p>The available <a href=\"https://www.sqlite.org/c3ref/wal_checkpoint_v2.html\">checkpoint modes</a>.</p>","parent_name":"Database"},"Classes/Database/CollationName.html":{"name":"CollationName","abstract":"<p>A built-in SQLite collation.</p>","parent_name":"Database"},"Classes/Database/ColumnType.html":{"name":"ColumnType","abstract":"<p>An SQL column type.</p>","parent_name":"Database"},"Classes/Database/ConflictResolution.html":{"name":"ConflictResolution","abstract":"<p>An SQLite conflict resolution.</p>","parent_name":"Database"},"Classes/Database/ForeignKeyAction.html":{"name":"ForeignKeyAction","abstract":"<p>A foreign key action.</p>","parent_name":"Database"},"Classes/Database.html#/LogErrorFunction":{"name":"LogErrorFunction","abstract":"<p>An error log function that takes an error code and message.</p>","parent_name":"Database"},"Classes/Database/TracingOptions.html":{"name":"TracingOptions","abstract":"<p>An option for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Database.html#/trace(options:_:)\">Database.trace(options:_:)</a></code></p>","parent_name":"Database"},"Classes/Database/TraceEvent.html":{"name":"TraceEvent","abstract":"<p>An event reported by <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Database.html#/trace(options:_:)\">Database.trace(options:_:)</a></code></p>","parent_name":"Database"},"Classes/Database/TransactionCompletion.html":{"name":"TransactionCompletion","abstract":"<p>Confirms or cancels the changes performed by a transaction or savepoint.</p>","parent_name":"Database"},"Classes/Database/TransactionKind.html":{"name":"TransactionKind","abstract":"<p>An SQLite transaction kind. See <a href=\"https://www.sqlite.org/lang_transaction.html\">https://www.sqlite.org/lang_transaction.html</a></p>","parent_name":"Database"},"Classes/Database.html#/add(transactionObserver:extent:)":{"name":"add(transactionObserver:extent:)","abstract":"<p>Add a transaction observer, so that it gets notified of","parent_name":"Database"},"Classes/Database.html#/remove(transactionObserver:)":{"name":"remove(transactionObserver:)","abstract":"<p>Remove a transaction observer.</p>","parent_name":"Database"},"Classes/Database.html#/afterNextTransaction(onCommit:onRollback:)":{"name":"afterNextTransaction(onCommit:onRollback:)","abstract":"<p>Registers closures to be executed after the next or current","parent_name":"Database"},"Classes/Database/TransactionObservationExtent.html":{"name":"TransactionObservationExtent","abstract":"<p>The extent of a transaction observation.</p>","parent_name":"Database"},"Classes/Database.html#/dropFTS4SynchronizationTriggers(forTable:)":{"name":"dropFTS4SynchronizationTriggers(forTable:)","abstract":"<p>Deletes the synchronization triggers for a synchronized FTS4 table</p>","parent_name":"Database"},"Classes/Database.html#/dropFTS5SynchronizationTriggers(forTable:)":{"name":"dropFTS5SynchronizationTriggers(forTable:)","abstract":"<p>Deletes the synchronization triggers for a synchronized FTS5 table</p>","parent_name":"Database"},"Classes/Database.html#/add(tokenizer:)":{"name":"add(tokenizer:)","abstract":"<p>Add a custom FTS5 tokenizer.</p>","parent_name":"Database"},"Classes/Database.html#/makeFTS5Pattern(rawPattern:forTable:)":{"name":"makeFTS5Pattern(rawPattern:forTable:)","abstract":"<p>Creates a pattern from a raw pattern string; throws DatabaseError on","parent_name":"Database"},"Classes/Database.html#/makeTokenizer(_:)":{"name":"makeTokenizer(_:)","abstract":"<p>Creates an FTS5 tokenizer, given its descriptor.</p>","parent_name":"Database"},"Classes/Database.html#/create(table:temporary:ifNotExists:withoutRowID:body:)":{"name":"create(table:temporary:ifNotExists:withoutRowID:body:)","abstract":"<p>Creates a database table.</p>","parent_name":"Database"},"Classes/Database.html#/create(table:options:body:)":{"name":"create(table:options:body:)","abstract":"<p>Creates a database table.</p>","parent_name":"Database"},"Classes/Database.html#/rename(table:to:)":{"name":"rename(table:to:)","abstract":"<p>Renames a database table.</p>","parent_name":"Database"},"Classes/Database.html#/alter(table:body:)":{"name":"alter(table:body:)","abstract":"<p>Modifies a database table.</p>","parent_name":"Database"},"Classes/Database.html#/drop(table:)":{"name":"drop(table:)","abstract":"<p>Deletes a database table.</p>","parent_name":"Database"},"Classes/Database.html#/create(index:on:columns:unique:ifNotExists:condition:)":{"name":"create(index:on:columns:unique:ifNotExists:condition:)","abstract":"<p>Creates an index.</p>","parent_name":"Database"},"Classes/Database.html#/create(index:on:columns:options:condition:)":{"name":"create(index:on:columns:options:condition:)","abstract":"<p>Creates an index.</p>","parent_name":"Database"},"Classes/Database.html#/drop(index:)":{"name":"drop(index:)","abstract":"<p>Deletes a database index.</p>","parent_name":"Database"},"Classes/Database.html#/reindex(collation:)":{"name":"reindex(collation:)","abstract":"<p>Delete and recreate from scratch all indices that use this collation.</p>","parent_name":"Database"},"Classes/Database.html#/create(virtualTable:ifNotExists:using:)":{"name":"create(virtualTable:ifNotExists:using:)","abstract":"<p>Creates a virtual database table.</p>","parent_name":"Database"},"Classes/Database.html#/create(virtualTable:ifNotExists:using:_:)":{"name":"create(virtualTable:ifNotExists:using:_:)","abstract":"<p>Creates a virtual database table.</p>","parent_name":"Database"},"Classes/AnyCursor.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates a cursor that wraps a base cursor but whose type depends only on","parent_name":"AnyCursor"},"Classes/AnyCursor.html#/init(iterator:)":{"name":"init(iterator:)","abstract":"<p>Creates a cursor that wraps a base iterator but whose type depends only","parent_name":"AnyCursor"},"Classes/AnyCursor.html#/next()":{"name":"next()","parent_name":"AnyCursor"},"Classes/AnyCursor.html":{"name":"AnyCursor","abstract":"<p>A type-erased cursor of Element.</p>"},"Classes/Database.html":{"name":"Database","abstract":"<p>A Database connection.</p>"},"Classes/SQLStatementCursor.html":{"name":"SQLStatementCursor","abstract":"<p>A cursor over all statements in a SQL string.</p>"},"Classes/DatabaseCollation.html":{"name":"DatabaseCollation","abstract":"<p>A Collation is a string comparison function used by SQLite.</p>"},"Classes/DatabaseFunction.html":{"name":"DatabaseFunction","abstract":"<p>An SQL function or aggregate.</p>"},"Classes/DatabasePool.html":{"name":"DatabasePool","abstract":"<p>A DatabasePool grants concurrent accesses to an SQLite database.</p>"},"Classes/DatabaseQueue.html":{"name":"DatabaseQueue","abstract":"<p>A DatabaseQueue serializes access to an SQLite database.</p>"},"Classes/AnyDatabaseReader.html":{"name":"AnyDatabaseReader","abstract":"<p>A type-erased DatabaseReader</p>"},"Classes/DatabaseSnapshot.html":{"name":"DatabaseSnapshot","abstract":"<p>A DatabaseSnapshot sees an unchanging database content, as it existed at the"},"Classes/DatabaseValueCursor.html":{"name":"DatabaseValueCursor","abstract":"<p>A cursor of database values extracted from a single column."},"Classes/DatabaseFuture.html":{"name":"DatabaseFuture","abstract":"<p>A future database value, returned by the DatabaseWriter.concurrentRead(_:)"},"Classes/AnyDatabaseWriter.html":{"name":"AnyDatabaseWriter","abstract":"<p>A type-erased DatabaseWriter</p>"},"Classes/Row.html":{"name":"Row","abstract":"<p>A database row.</p>"},"Classes/RowCursor.html":{"name":"RowCursor","abstract":"<p>A cursor of database rows. For example:</p>"},"Classes/Statement.html":{"name":"Statement","abstract":"<p>A statement represents an SQL query.</p>"},"Classes/FastDatabaseValueCursor.html":{"name":"FastDatabaseValueCursor","abstract":"<p>A cursor of database values extracted from a single column."},"Classes/FTS3TableDefinition.html":{"name":"FTS3TableDefinition","abstract":"<p>The FTS3TableDefinition class lets you define columns of a FTS3 virtual table.</p>"},"Classes/FTS4TableDefinition.html":{"name":"FTS4TableDefinition","abstract":"<p>The FTS4TableDefinition class lets you define columns of a FTS4 virtual table.</p>"},"Classes/FTS4ColumnDefinition.html":{"name":"FTS4ColumnDefinition","abstract":"<p>The FTS4ColumnDefinition class lets you refine a column of an FTS4"},"Classes/FTS5TableDefinition.html":{"name":"FTS5TableDefinition","abstract":"<p>The FTS5TableDefinition class lets you define columns of a FTS5 virtual table.</p>"},"Classes/FTS5ColumnDefinition.html":{"name":"FTS5ColumnDefinition","abstract":"<p>The FTS5ColumnDefinition class lets you refine a column of an FTS5"},"Classes/TableAlias.html":{"name":"TableAlias","abstract":"<p><a href=\"http://github.com/groue/GRDB.swift#what-are-experimental-features\"><strong>Experimental</strong></a></p>"},"Classes/TableDefinition.html":{"name":"TableDefinition","abstract":"<p>The TableDefinition class lets you define table columns and constraints.</p>"},"Classes/TableAlteration.html":{"name":"TableAlteration","abstract":"<p>The TableAlteration class lets you alter database tables.</p>"},"Classes/ColumnDefinition.html":{"name":"ColumnDefinition","abstract":"<p>The ColumnDefinition class lets you refine a table column.</p>"},"Classes/RecordCursor.html":{"name":"RecordCursor","abstract":"<p>A cursor of records. For example:</p>"},"Classes/Record.html":{"name":"Record","abstract":"<p>Record is a class that wraps a table row, or the result of any query. It is"},"Classes/AnyDatabaseCancellable.html":{"name":"AnyDatabaseCancellable","abstract":"<p>A type-erasing cancellable object that executes a provided closure"},"Classes/SharedValueObservation.html":{"name":"SharedValueObservation","abstract":"<p><a href=\"http://github.com/groue/GRDB.swift#what-are-experimental-features\"><strong>Experimental</strong></a></p>"},"Classes/ValueObservationScheduler.html":{"name":"ValueObservationScheduler","abstract":"<p>ValueObservationScheduler determines how <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ValueObservation.html\">ValueObservation</a></code> notifies its"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}