{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"upsertAndFetch"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"db"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/GRDB\/documentation\/GRDB\/Database","preciseIdentifier":"s:4GRDB8DatabaseC","text":"Database"},{"kind":"text","text":", "},{"kind":"externalParam","text":"onConflict"},{"kind":"text","text":" "},{"kind":"internalParam","text":"conflictTarget"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"] = [], "},{"kind":"externalParam","text":"doUpdate"},{"kind":"text","text":" "},{"kind":"internalParam","text":"assignments"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","identifier":"doc:\/\/GRDB\/documentation\/GRDB\/TableAlias","preciseIdentifier":"s:4GRDB10TableAliasC","text":"TableAlias"},{"kind":"text","text":") -> ["},{"kind":"typeIdentifier","identifier":"doc:\/\/GRDB\/documentation\/GRDB\/ColumnAssignment","preciseIdentifier":"s:4GRDB16ColumnAssignmentV","text":"ColumnAssignment"},{"kind":"text","text":"])? = nil) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/GRDB\/documentation\/GRDB\/FetchableRecord","preciseIdentifier":"s:4GRDB15FetchableRecordP","text":"FetchableRecord"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The upserted record."}]}]},{"kind":"parameters","parameters":[{"name":"db","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A database connection."}]}]},{"name":"conflictTarget","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The conflict target."}]}]},{"name":"assignments","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An optional function that returns an array of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/ColumnAssignment"},{"type":"text","text":". In case of violation of a uniqueness"},{"type":"text","text":" "},{"type":"text","text":"constraints, these assignments are performed, and remaining columns"},{"type":"text","text":" "},{"type":"text","text":"are overwritten by inserted values."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With default parameters ("},{"type":"codeVoice","code":"upsertAndFetch(db)"},{"type":"text","text":"), the upsert behavior is"},{"type":"text","text":" "},{"type":"text","text":"triggered by a violation of any uniqueness constraint on the table"},{"type":"text","text":" "},{"type":"text","text":"(primary key or unique index). In case of violation, all columns but the"},{"type":"text","text":" "},{"type":"text","text":"primary key are overwritten with the inserted values:"}]},{"type":"codeListing","syntax":"swift","code":["struct Player: Encodable, PersistableRecord {","    var id: Int64","    var name: String","    var score: Int","}","","\/\/ INSERT INTO player (id, name, score)","\/\/ VALUES (1, 'Arthur', 1000)","\/\/ ON CONFLICT DO UPDATE SET","\/\/   name = excluded.name,","\/\/   score = excluded.score","\/\/ RETURNING *","let player = Player(id: 1, name: \"Arthur\", score: 1000)","let upsertedPlayer = try player.upsertAndFetch(db)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With "},{"type":"codeVoice","code":"conflictTarget"},{"type":"text","text":" and "},{"type":"codeVoice","code":"assignments"},{"type":"text","text":" arguments, you can further"},{"type":"text","text":" "},{"type":"text","text":"control the upsert behavior. Make sure you check"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.sqlite.org\/lang_UPSERT.html"},{"type":"text","text":" for detailed information."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The conflict target are the columns of the uniqueness constraint"},{"type":"text","text":" "},{"type":"text","text":"(primary key or unique index) that triggers the upsert. If empty, all"},{"type":"text","text":" "},{"type":"text","text":"uniqueness constraint are considered."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The assignments describe how to update columns in case of violation of"},{"type":"text","text":" "},{"type":"text","text":"a uniqueness constraint. In the next example, we insert the new"},{"type":"text","text":" "},{"type":"text","text":"vocabulary word “jovial” if that word is not already in the dictionary."},{"type":"text","text":" "},{"type":"text","text":"If the word is already in the dictionary, it increments the counter,"},{"type":"text","text":" "},{"type":"text","text":"does not overwrite the tainted flag, and overwrites the"},{"type":"text","text":" "},{"type":"text","text":"remaining columns:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ CREATE TABLE vocabulary(","\/\/   word TEXT PRIMARY KEY,","\/\/   kind TEXT NOT NULL,","\/\/   isTainted BOOLEAN DEFAULT 0,","\/\/   count INT DEFAULT 1))","struct Vocabulary: Encodable, PersistableRecord {","    var word: String","    var kind: String","    var isTainted: Bool","}","","\/\/ INSERT INTO vocabulary(word, kind, isTainted)","\/\/ VALUES('jovial', 'adjective', 0)","\/\/ ON CONFLICT(word) DO UPDATE SET \\","\/\/   count = count + 1,","\/\/   kind = excluded.kind","\/\/ RETURNING *","let vocabulary = Vocabulary(word: \"jovial\", kind: \"adjective\", isTainted: false)","let upserted = try vocabulary.upsertAndFetch(","    db,","    onConflict: [\"word\"],","    doUpdate: { _ in","        [Column(\"count\") += 1,","         Column(\"isTainted\").noOverwrite]","    })"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/DatabaseError"},{"type":"text","text":" whenever an SQLite error occurs, or any"},{"type":"text","text":" "},{"type":"text","text":"error thrown by the persistence callbacks defined by the record type."}]}],"type":"aside","name":"Throws"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/grdb\/persistablerecord\/upsertandfetch(_:onconflict:doupdate:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GRDB\/documentation\/GRDB\/PersistableRecord\/upsertAndFetch(_:onConflict:doUpdate:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Executes an "},{"type":"codeVoice","code":"INSERT ON CONFLICT DO UPDATE RETURNING"},{"type":"text","text":" statement, and"},{"type":"text","text":" "},{"type":"text","text":"returns the upserted record."}],"kind":"symbol","metadata":{"modules":[{"name":"GRDB"}],"role":"symbol","title":"upsertAndFetch(_:onConflict:doUpdate:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"upsertAndFetch"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Database","preciseIdentifier":"s:4GRDB8DatabaseC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"onConflict"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"doUpdate"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"TableAlias","preciseIdentifier":"s:4GRDB10TableAliasC"},{"kind":"text","text":") -> ["},{"kind":"typeIdentifier","text":"ColumnAssignment","preciseIdentifier":"s:4GRDB16ColumnAssignmentV"},{"kind":"text","text":"])?) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"}],"symbolKind":"method","externalID":"s:4GRDB17PersistableRecordPAAE14upsertAndFetch_10onConflict8doUpdatexAA8DatabaseC_SaySSGSayAA16ColumnAssignmentVGAA10TableAliasCcSgtKAA09FetchableC0RzrlF","extendedModule":"GRDB","platforms":[{"beta":false,"unavailable":false,"name":"iOS","introducedAt":"15.0","deprecated":false},{"beta":false,"unavailable":false,"name":"macOS","introducedAt":"12.0","deprecated":false},{"beta":false,"unavailable":false,"name":"tvOS","introducedAt":"15.0","deprecated":false},{"beta":false,"unavailable":false,"name":"watchOS","introducedAt":"8.0","deprecated":false}]},"hierarchy":{"paths":[["doc:\/\/GRDB\/documentation\/GRDB","doc:\/\/GRDB\/documentation\/GRDB\/QueryInterface","doc:\/\/GRDB\/documentation\/GRDB\/PersistableRecord"]]},"seeAlsoSections":[{"title":"Inserting a Record and Fetching the Inserted Row","identifiers":["doc:\/\/GRDB\/documentation\/GRDB\/PersistableRecord\/insertAndFetch(_:onConflict:as:)","doc:\/\/GRDB\/documentation\/GRDB\/PersistableRecord\/insertAndFetch(_:onConflict:selection:fetch:)","doc:\/\/GRDB\/documentation\/GRDB\/PersistableRecord\/upsertAndFetch(_:as:onConflict:doUpdate:)"],"generated":true}],"references":{"https://www.sqlite.org/lang_UPSERT.html":{"title":"https:\/\/www.sqlite.org\/lang_UPSERT.html","titleInlineContent":[{"type":"text","text":"https:\/\/www.sqlite.org\/lang_UPSERT.html"}],"type":"link","identifier":"https:\/\/www.sqlite.org\/lang_UPSERT.html","url":"https:\/\/www.sqlite.org\/lang_UPSERT.html"},"doc://GRDB/documentation/GRDB/Database":{"role":"symbol","title":"Database","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Database"}],"abstract":[{"type":"text","text":"An SQLite connection."}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/Database","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Database"}],"url":"\/documentation\/grdb\/database"},"doc://GRDB/documentation/GRDB/QueryInterface":{"role":"collectionGroup","title":"Record Types and the Query Interface","abstract":[{"type":"text","text":"Record types and the query interface build SQL queries for you"}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/QueryInterface","kind":"article","type":"topic","url":"\/documentation\/grdb\/queryinterface"},"doc://GRDB/documentation/GRDB/TableAlias":{"role":"symbol","title":"TableAlias","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TableAlias"}],"abstract":[{"type":"text","text":"A TableAlias identifies a table in a request."}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/TableAlias","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TableAlias"}],"url":"\/documentation\/grdb\/tablealias"},"doc://GRDB/documentation/GRDB":{"role":"collection","title":"GRDB","abstract":[{"type":"text","text":"A toolkit for SQLite databases, with a focus on application development"}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB","kind":"symbol","type":"topic","url":"\/documentation\/grdb"},"doc://GRDB/documentation/GRDB/ColumnAssignment":{"role":"symbol","title":"ColumnAssignment","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ColumnAssignment"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ColumnAssignment"},{"type":"text","text":" assigns a value to a column."}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/ColumnAssignment","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ColumnAssignment"}],"url":"\/documentation\/grdb\/columnassignment"},"doc://GRDB/documentation/GRDB/FetchableRecord":{"role":"symbol","title":"FetchableRecord","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FetchableRecord"}],"abstract":[{"type":"text","text":"A type that can decode itself from a database row."}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/FetchableRecord","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FetchableRecord"}],"url":"\/documentation\/grdb\/fetchablerecord"},"doc://GRDB/documentation/GRDB/PersistableRecord":{"role":"symbol","title":"PersistableRecord","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PersistableRecord"}],"abstract":[{"type":"text","text":"A type that can be persisted in the database."}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/PersistableRecord","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PersistableRecord"}],"url":"\/documentation\/grdb\/persistablerecord"},"doc://GRDB/documentation/GRDB/PersistableRecord/insertAndFetch(_:onConflict:as:)":{"role":"symbol","title":"insertAndFetch(_:onConflict:as:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"insertAndFetch"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Database","preciseIdentifier":"s:4GRDB8DatabaseC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"onConflict"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Database","preciseIdentifier":"s:4GRDB8DatabaseC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ConflictResolution","preciseIdentifier":"s:4GRDB8DatabaseC18ConflictResolutionO"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Executes an "},{"type":"codeVoice","code":"INSERT RETURNING"},{"type":"text","text":" statement, and returns a new record built"},{"type":"text","text":" "},{"type":"text","text":"from the inserted row."}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/PersistableRecord\/insertAndFetch(_:onConflict:as:)","kind":"symbol","type":"topic","url":"\/documentation\/grdb\/persistablerecord\/insertandfetch(_:onconflict:as:)"},"doc://GRDB/documentation/GRDB/PersistableRecord/upsertAndFetch(_:as:onConflict:doUpdate:)":{"role":"symbol","title":"upsertAndFetch(_:as:onConflict:doUpdate:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"upsertAndFetch"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Database","preciseIdentifier":"s:4GRDB8DatabaseC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"onConflict"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"doUpdate"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"TableAlias","preciseIdentifier":"s:4GRDB10TableAliasC"},{"kind":"text","text":") -> ["},{"kind":"typeIdentifier","text":"ColumnAssignment","preciseIdentifier":"s:4GRDB16ColumnAssignmentV"},{"kind":"text","text":"])?) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Executes an "},{"type":"codeVoice","code":"INSERT ON CONFLICT DO UPDATE RETURNING"},{"type":"text","text":" statement, and"},{"type":"text","text":" "},{"type":"text","text":"returns the upserted record."}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/PersistableRecord\/upsertAndFetch(_:as:onConflict:doUpdate:)","kind":"symbol","type":"topic","url":"\/documentation\/grdb\/persistablerecord\/upsertandfetch(_:as:onconflict:doupdate:)"},"doc://GRDB/documentation/GRDB/PersistableRecord/upsertAndFetch(_:onConflict:doUpdate:)":{"role":"symbol","title":"upsertAndFetch(_:onConflict:doUpdate:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"upsertAndFetch"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Database","preciseIdentifier":"s:4GRDB8DatabaseC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"onConflict"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"doUpdate"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"TableAlias","preciseIdentifier":"s:4GRDB10TableAliasC"},{"kind":"text","text":") -> ["},{"kind":"typeIdentifier","text":"ColumnAssignment","preciseIdentifier":"s:4GRDB16ColumnAssignmentV"},{"kind":"text","text":"])?) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Executes an "},{"type":"codeVoice","code":"INSERT ON CONFLICT DO UPDATE RETURNING"},{"type":"text","text":" statement, and"},{"type":"text","text":" "},{"type":"text","text":"returns the upserted record."}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/PersistableRecord\/upsertAndFetch(_:onConflict:doUpdate:)","kind":"symbol","type":"topic","url":"\/documentation\/grdb\/persistablerecord\/upsertandfetch(_:onconflict:doupdate:)"},"doc://GRDB/documentation/GRDB/PersistableRecord/insertAndFetch(_:onConflict:selection:fetch:)":{"role":"symbol","title":"insertAndFetch(_:onConflict:selection:fetch:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"insertAndFetch"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Database","preciseIdentifier":"s:4GRDB8DatabaseC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"onConflict"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Database","preciseIdentifier":"s:4GRDB8DatabaseC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ConflictResolution","preciseIdentifier":"s:4GRDB8DatabaseC18ConflictResolutionO"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"selection"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"SQLSelectable","preciseIdentifier":"s:4GRDB13SQLSelectableP"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"fetch"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Statement","preciseIdentifier":"s:4GRDB9StatementC"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Executes an "},{"type":"codeVoice","code":"INSERT RETURNING"},{"type":"text","text":" statement, and returns the selected"},{"type":"text","text":" "},{"type":"text","text":"columns from the inserted row."}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/PersistableRecord\/insertAndFetch(_:onConflict:selection:fetch:)","kind":"symbol","type":"topic","url":"\/documentation\/grdb\/persistablerecord\/insertandfetch(_:onconflict:selection:fetch:)"},"doc://GRDB/documentation/GRDB/DatabaseError":{"role":"symbol","title":"DatabaseError","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseError"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"DatabaseError"},{"type":"text","text":" describes an SQLite error."}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/DatabaseError","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DatabaseError"}],"url":"\/documentation\/grdb\/databaseerror"}}}