{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"selectPrimaryKey"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"PrimaryKey"},{"kind":"text","text":">("},{"kind":"externalParam","text":"as"},{"kind":"text","text":" "},{"kind":"internalParam","text":"type"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PrimaryKey"},{"kind":"text","text":".Type = PrimaryKey.self) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/GRDB\/documentation\/GRDB\/QueryInterfaceRequest","preciseIdentifier":"s:4GRDB21QueryInterfaceRequestV","text":"QueryInterfaceRequest"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"PrimaryKey"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All primary keys are supported:"}]},{"type":"codeListing","syntax":"swift","code":["struct Player: TableRecord { }","struct Country: TableRecord { }","struct Citizenship: TableRecord { }","","\/\/ SELECT id FROM player WHERE ...","let request = try Player.selectPrimaryKey(as: Int64.self)","let ids = try request.fetchAll(db) \/\/ [Int64]","","\/\/ SELECT code FROM country WHERE ...","let request = try Country.selectPrimaryKey(as: String.self)","let countryCodes = try request.fetchAll(db) \/\/ [String]","","\/\/ SELECT citizenId, countryCode FROM citizenship WHERE ...","let request = try Citizenship.selectPrimaryKey(as: Row.self)","let rows = try request.fetchAll(db) \/\/ [Row]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For composite primary keys, you can define a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/FetchableRecord"},{"type":"text","text":" type:"}]},{"type":"codeListing","syntax":"swift","code":["extension Citizenship {","    struct ID: Decodable, FetchableRecord {","        var citizenId: Int64","        var countryCode: String","    }","}","let request = try Citizenship.selectPrimaryKey(as: Citizenship.ID.self)","let ids = try request.fetchAll(db) \/\/ [Citizenship.ID]"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/grdb\/record\/selectprimarykey(as:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GRDB\/documentation\/GRDB\/Record\/selectPrimaryKey(as:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns a request that selects the primary key."}],"kind":"symbol","metadata":{"role":"symbol","title":"selectPrimaryKey(as:)","roleHeading":"Type Method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"selectPrimaryKey"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"PrimaryKey"},{"kind":"text","text":">("},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PrimaryKey"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"QueryInterfaceRequest","preciseIdentifier":"s:4GRDB21QueryInterfaceRequestV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"PrimaryKey"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:4GRDB11TableRecordPAAE16selectPrimaryKey2asAA21QueryInterfaceRequestVyqd__Gqd__m_tlFZ::SYNTHESIZED::s:4GRDB6RecordC","extendedModule":"GRDB","modules":[{"name":"GRDB"}]},"hierarchy":{"paths":[["doc:\/\/GRDB\/documentation\/GRDB","doc:\/\/GRDB\/documentation\/GRDB\/QueryInterface","doc:\/\/GRDB\/documentation\/GRDB\/Record","doc:\/\/GRDB\/documentation\/GRDB\/Record\/TableRecord-Implementations"]]},"references":{"doc://GRDB/documentation/GRDB":{"role":"collection","title":"GRDB","abstract":[{"type":"text","text":"A toolkit for SQLite databases, with a focus on application development"}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB","kind":"symbol","type":"topic","url":"\/documentation\/grdb"},"doc://GRDB/documentation/GRDB/Record":{"role":"symbol","title":"Record","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Record"}],"abstract":[{"type":"text","text":"A base class for types that can be fetched and persisted in the database."}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/Record","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Record"}],"url":"\/documentation\/grdb\/record"},"doc://GRDB/documentation/GRDB/QueryInterface":{"role":"collectionGroup","title":"Record Types and the Query Interface","abstract":[{"type":"text","text":"Record types and the query interface build SQL queries for you"}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/QueryInterface","kind":"article","type":"topic","url":"\/documentation\/grdb\/queryinterface"},"doc://GRDB/documentation/GRDB/Record/selectPrimaryKey(as:)":{"role":"symbol","title":"selectPrimaryKey(as:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"selectPrimaryKey"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"PrimaryKey"},{"kind":"text","text":">("},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PrimaryKey"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"QueryInterfaceRequest","preciseIdentifier":"s:4GRDB21QueryInterfaceRequestV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"PrimaryKey"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a request that selects the primary key."}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/Record\/selectPrimaryKey(as:)","kind":"symbol","type":"topic","url":"\/documentation\/grdb\/record\/selectprimarykey(as:)"},"doc://GRDB/documentation/GRDB/Record/TableRecord-Implementations":{"role":"collectionGroup","title":"TableRecord Implementations","abstract":[],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/Record\/TableRecord-Implementations","kind":"article","type":"topic","url":"\/documentation\/grdb\/record\/tablerecord-implementations"},"doc://GRDB/documentation/GRDB/FetchableRecord":{"role":"symbol","title":"FetchableRecord","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FetchableRecord"}],"abstract":[{"type":"text","text":"A type that can decode itself from a database row."}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/FetchableRecord","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FetchableRecord"}],"url":"\/documentation\/grdb\/fetchablerecord"},"doc://GRDB/documentation/GRDB/QueryInterfaceRequest":{"role":"symbol","title":"QueryInterfaceRequest","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"QueryInterfaceRequest"}],"abstract":[{"type":"text","text":"A request that builds SQL queries with Swift."}],"identifier":"doc:\/\/GRDB\/documentation\/GRDB\/QueryInterfaceRequest","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"QueryInterfaceRequest"}],"url":"\/documentation\/grdb\/queryinterfacerequest"}}}