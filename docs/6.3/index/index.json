{"interfaceLanguages":{"swift":[{"children":[{"title":"Fundamentals","type":"groupMarker"},{"children":[{"title":"Configuring Database Connections","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/configuration\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/configuration\/acceptsdoublequotedstringliterals","title":"var acceptsDoubleQuotedStringLiterals: Bool","type":"property"},{"path":"\/documentation\/grdb\/configuration\/allowsunsafetransactions","title":"var allowsUnsafeTransactions: Bool","type":"property"},{"path":"\/documentation\/grdb\/configuration\/busymode","title":"var busyMode: Database.BusyMode","type":"property"},{"path":"\/documentation\/grdb\/configuration\/defaulttransactionkind","title":"var defaultTransactionKind: Database.TransactionKind","type":"property"},{"path":"\/documentation\/grdb\/configuration\/foreignkeysenabled","title":"var foreignKeysEnabled: Bool","type":"property"},{"path":"\/documentation\/grdb\/configuration\/label","title":"var label: String?","type":"property"},{"path":"\/documentation\/grdb\/configuration\/maximumreadercount","title":"var maximumReaderCount: Int","type":"property"},{"path":"\/documentation\/grdb\/configuration\/observessuspensionnotifications","title":"var observesSuspensionNotifications: Bool","type":"property"},{"path":"\/documentation\/grdb\/configuration\/publicstatementarguments","title":"var publicStatementArguments: Bool","type":"property"},{"path":"\/documentation\/grdb\/configuration\/qos","title":"var qos: DispatchQoS","type":"property"},{"path":"\/documentation\/grdb\/configuration\/readonly","title":"var readonly: Bool","type":"property"},{"path":"\/documentation\/grdb\/configuration\/targetqueue","title":"var targetQueue: DispatchQueue?","type":"property"},{"path":"\/documentation\/grdb\/configuration\/writetargetqueue","title":"var writeTargetQueue: DispatchQueue?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/configuration\/preparedatabase(_:)","title":"func prepareDatabase((Database) throws -> Void)","type":"method"}],"path":"\/documentation\/grdb\/configuration","title":"Configuration","type":"struct"},{"title":"Opening Database Connections","type":"groupMarker"},{"children":[{"title":"Creating a DatabasePool","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepool\/init(path:configuration:)","title":"init(path: String, configuration: Configuration) throws","type":"init"},{"title":"Creating a DatabaseSnapshot","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepool\/makesnapshot()","title":"func makeSnapshot() throws -> DatabaseSnapshot","type":"method"},{"title":"Accessing the Database","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepool\/asyncconcurrentread(_:)","title":"func asyncConcurrentRead((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/writeintransaction(_:_:)","title":"func writeInTransaction(Database.TransactionKind?, (Database) throws -> Database.TransactionCompletion) throws","type":"method"},{"title":"Managing SQLite Connections","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepool\/invalidatereadonlyconnections()","title":"func invalidateReadOnlyConnections()","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/releasememory()","title":"func releaseMemory()","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/releasememoryeventually()","title":"func releaseMemoryEventually()","type":"method"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepool\/configuration","title":"var configuration: Configuration","type":"property"},{"path":"\/documentation\/grdb\/databasepool\/path","title":"var path: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepool\/asyncread(_:)","title":"func asyncRead((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/asyncunsaferead(_:)","title":"func asyncUnsafeRead((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/backup(to:pagesperstep:progress:)","title":"func backup(to: some DatabaseWriter, pagesPerStep: CInt, progress: ((DatabaseBackupProgress) throws -> Void)?) throws","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/close()","title":"func close() throws","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/interrupt()","title":"func interrupt()","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/read(_:)-3i0xu","title":"func read<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/read(_:)-kdnn","title":"func read<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/readpublisher(receiveon:value:)","title":"func readPublisher<Output>(receiveOn: some Scheduler, value: (Database) throws -> Output) -> DatabasePublishers.Read<Output>","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/unsaferead(_:)-4r5zk","title":"func unsafeRead<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/unsaferead(_:)-5px9b","title":"func unsafeRead<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/unsafereentrantread(_:)","title":"func unsafeReentrantRead<T>((Database) throws -> T) throws -> T","type":"method"}],"path":"\/documentation\/grdb\/databasepool\/databasereader-implementations","title":"DatabaseReader Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepool\/add(transactionobserver:extent:)","title":"func add(transactionObserver: some TransactionObserver, extent: Database.TransactionObservationExtent)","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/asyncbarrierwritewithouttransaction(_:)","title":"func asyncBarrierWriteWithoutTransaction((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/asyncwrite(_:completion:)","title":"func asyncWrite<T>((Database) throws -> T, completion: (Database, Result<T, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/asyncwritewithouttransaction(_:)","title":"func asyncWriteWithoutTransaction((Database) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/barrierwritewithouttransaction(_:)-12iei","title":"func barrierWriteWithoutTransaction<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/barrierwritewithouttransaction(_:)-1x2rx","title":"func barrierWriteWithoutTransaction<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/concurrentread(_:)","title":"func concurrentRead<T>((Database) throws -> T) -> DatabaseFuture<T>","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/erase()","title":"func erase() throws","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/remove(transactionobserver:)","title":"func remove(transactionObserver: some TransactionObserver)","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/spawnconcurrentread(_:)","title":"func spawnConcurrentRead((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/unsafereentrantwrite(_:)","title":"func unsafeReentrantWrite<T>((Database) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/vacuum()","title":"func vacuum() throws","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/vacuum(into:)","title":"func vacuum(into: String) throws","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/write(_:)-89rj6","title":"func write<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/write(_:)-9khl1","title":"func write<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/writepublisher(receiveon:updates:)","title":"func writePublisher<Output>(receiveOn: some Scheduler, updates: (Database) throws -> Output) -> DatabasePublishers.Write<Output>","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/writepublisher(receiveon:updates:thenread:)","title":"func writePublisher<S, T, Output>(receiveOn: S, updates: (Database) throws -> T, thenRead: (Database, T) throws -> Output) -> DatabasePublishers.Write<Output>","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/writewithouttransaction(_:)-1j4hy","title":"func writeWithoutTransaction<T>((Database) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/grdb\/databasepool\/writewithouttransaction(_:)-3fc3y","title":"func writeWithoutTransaction<T>((Database) throws -> T) async throws -> T","type":"method"}],"path":"\/documentation\/grdb\/databasepool\/databasewriter-implementations","title":"DatabaseWriter Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasepool","title":"DatabasePool","type":"class"},{"children":[{"title":"Creating a DatabaseQueue","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasequeue\/init(configuration:)","title":"init(configuration: Configuration) throws","type":"init"},{"path":"\/documentation\/grdb\/databasequeue\/init(path:configuration:)","title":"init(path: String, configuration: Configuration) throws","type":"init"},{"title":"Accessing the Database","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasequeue\/indatabase(_:)","title":"func inDatabase<T>((Database) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/intransaction(_:_:)","title":"func inTransaction(Database.TransactionKind?, (Database) throws -> Database.TransactionCompletion) throws","type":"method"},{"title":"Managing the SQLite Connection","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasequeue\/releasememory()","title":"func releaseMemory()","type":"method"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasequeue\/configuration","title":"var configuration: Configuration","type":"property"},{"path":"\/documentation\/grdb\/databasequeue\/path","title":"var path: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasequeue\/asyncread(_:)","title":"func asyncRead((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/asyncunsaferead(_:)","title":"func asyncUnsafeRead((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/backup(to:pagesperstep:progress:)","title":"func backup(to: some DatabaseWriter, pagesPerStep: CInt, progress: ((DatabaseBackupProgress) throws -> Void)?) throws","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/close()","title":"func close() throws","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/interrupt()","title":"func interrupt()","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/read(_:)-227bn","title":"func read<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/read(_:)-25jvr","title":"func read<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/readpublisher(receiveon:value:)","title":"func readPublisher<Output>(receiveOn: some Scheduler, value: (Database) throws -> Output) -> DatabasePublishers.Read<Output>","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/unsaferead(_:)-38ecj","title":"func unsafeRead<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/unsaferead(_:)-4j0ie","title":"func unsafeRead<T>((Database) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/unsafereentrantread(_:)","title":"func unsafeReentrantRead<T>((Database) throws -> T) rethrows -> T","type":"method"}],"path":"\/documentation\/grdb\/databasequeue\/databasereader-implementations","title":"DatabaseReader Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasequeue\/add(transactionobserver:extent:)","title":"func add(transactionObserver: some TransactionObserver, extent: Database.TransactionObservationExtent)","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/asyncbarrierwritewithouttransaction(_:)","title":"func asyncBarrierWriteWithoutTransaction((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/asyncwrite(_:completion:)","title":"func asyncWrite<T>((Database) throws -> T, completion: (Database, Result<T, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/asyncwritewithouttransaction(_:)","title":"func asyncWriteWithoutTransaction((Database) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/barrierwritewithouttransaction(_:)-57agn","title":"func barrierWriteWithoutTransaction<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/barrierwritewithouttransaction(_:)-8de9u","title":"func barrierWriteWithoutTransaction<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/concurrentread(_:)","title":"func concurrentRead<T>((Database) throws -> T) -> DatabaseFuture<T>","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/erase()","title":"func erase() throws","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/remove(transactionobserver:)","title":"func remove(transactionObserver: some TransactionObserver)","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/spawnconcurrentread(_:)","title":"func spawnConcurrentRead((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/unsafereentrantwrite(_:)","title":"func unsafeReentrantWrite<T>((Database) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/vacuum()","title":"func vacuum() throws","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/vacuum(into:)","title":"func vacuum(into: String) throws","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/write(_:)-13zho","title":"func write<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/write(_:)-60xu8","title":"func write<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/writepublisher(receiveon:updates:)","title":"func writePublisher<Output>(receiveOn: some Scheduler, updates: (Database) throws -> Output) -> DatabasePublishers.Write<Output>","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/writepublisher(receiveon:updates:thenread:)","title":"func writePublisher<S, T, Output>(receiveOn: S, updates: (Database) throws -> T, thenRead: (Database, T) throws -> Output) -> DatabasePublishers.Write<Output>","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/writewithouttransaction(_:)-1h18c","title":"func writeWithoutTransaction<T>((Database) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/grdb\/databasequeue\/writewithouttransaction(_:)-8wky1","title":"func writeWithoutTransaction<T>((Database) throws -> T) async throws -> T","type":"method"}],"path":"\/documentation\/grdb\/databasequeue\/databasewriter-implementations","title":"DatabaseWriter Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasequeue","title":"DatabaseQueue","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasesnapshot\/configuration","title":"var configuration: Configuration","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasesnapshot\/asyncread(_:)","title":"func asyncRead((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasesnapshot\/asyncunsaferead(_:)","title":"func asyncUnsafeRead((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasesnapshot\/backup(to:pagesperstep:progress:)","title":"func backup(to: some DatabaseWriter, pagesPerStep: CInt, progress: ((DatabaseBackupProgress) throws -> Void)?) throws","type":"method"},{"path":"\/documentation\/grdb\/databasesnapshot\/close()","title":"func close() throws","type":"method"},{"path":"\/documentation\/grdb\/databasesnapshot\/interrupt()","title":"func interrupt()","type":"method"},{"path":"\/documentation\/grdb\/databasesnapshot\/read(_:)-793a4","title":"func read<T>((Database) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/grdb\/databasesnapshot\/read(_:)-92c5t","title":"func read<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasesnapshot\/readpublisher(receiveon:value:)","title":"func readPublisher<Output>(receiveOn: some Scheduler, value: (Database) throws -> Output) -> DatabasePublishers.Read<Output>","type":"method"},{"path":"\/documentation\/grdb\/databasesnapshot\/unsaferead(_:)-687um","title":"func unsafeRead<T>((Database) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/grdb\/databasesnapshot\/unsaferead(_:)-h451","title":"func unsafeRead<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasesnapshot\/unsafereentrantread(_:)","title":"func unsafeReentrantRead<T>((Database) throws -> T) throws -> T","type":"method"}],"path":"\/documentation\/grdb\/databasesnapshot\/databasereader-implementations","title":"DatabaseReader Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasesnapshot","title":"DatabaseSnapshot","type":"class"},{"children":[{"title":"Database Information","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasereader\/configuration","title":"var configuration: Configuration","type":"property"},{"title":"Reading from the Database","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasereader\/asyncread(_:)","title":"func asyncRead((Result<Database, Error>) -> Void)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/databasereader\/read(_:)-4w6gy","title":"func read<T>((Database) throws -> T) async throws -> T","type":"method"}],"title":"DatabaseReader Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/databasereader\/read(_:)-3806d","title":"func read<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasereader\/read(_:)-4w6gy","title":"func read<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasereader\/readpublisher(receiveon:value:)","title":"func readPublisher<Output>(receiveOn: some Scheduler, value: (Database) throws -> Output) -> DatabasePublishers.Read<Output>","type":"method"},{"title":"Unsafe Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasereader\/asyncunsaferead(_:)","title":"func asyncUnsafeRead((Result<Database, Error>) -> Void)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/databasereader\/unsaferead(_:)-11mk0","title":"func unsafeRead<T>((Database) throws -> T) async throws -> T","type":"method"}],"title":"DatabaseReader Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/databasereader\/unsaferead(_:)-5i7tf","title":"func unsafeRead<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasereader\/unsaferead(_:)-11mk0","title":"func unsafeRead<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasereader\/unsafereentrantread(_:)","title":"func unsafeReentrantRead<T>((Database) throws -> T) throws -> T","type":"method"},{"title":"Other Database Operations","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasereader\/backup(to:pagesperstep:progress:)","title":"func backup(to: some DatabaseWriter, pagesPerStep: CInt, progress: ((DatabaseBackupProgress) throws -> Void)?) throws","type":"method"},{"path":"\/documentation\/grdb\/databasereader\/close()","title":"func close() throws","type":"method"},{"path":"\/documentation\/grdb\/databasereader\/interrupt()","title":"func interrupt()","type":"method"},{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/anydatabasereader\/init(_:)","title":"init(some DatabaseReader)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/anydatabasereader\/configuration","title":"var configuration: Configuration","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/anydatabasereader\/asyncread(_:)","title":"func asyncRead((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/anydatabasereader\/asyncunsaferead(_:)","title":"func asyncUnsafeRead((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/anydatabasereader\/backup(to:pagesperstep:progress:)","title":"func backup(to: some DatabaseWriter, pagesPerStep: CInt, progress: ((DatabaseBackupProgress) throws -> Void)?) throws","type":"method"},{"path":"\/documentation\/grdb\/anydatabasereader\/close()","title":"func close() throws","type":"method"},{"path":"\/documentation\/grdb\/anydatabasereader\/interrupt()","title":"func interrupt()","type":"method"},{"path":"\/documentation\/grdb\/anydatabasereader\/read(_:)-57m78","title":"func read<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/anydatabasereader\/read(_:)-8szku","title":"func read<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/anydatabasereader\/readpublisher(receiveon:value:)","title":"func readPublisher<Output>(receiveOn: some Scheduler, value: (Database) throws -> Output) -> DatabasePublishers.Read<Output>","type":"method"},{"path":"\/documentation\/grdb\/anydatabasereader\/unsaferead(_:)-82vcd","title":"func unsafeRead<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/anydatabasereader\/unsaferead(_:)-9rzlv","title":"func unsafeRead<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/anydatabasereader\/unsafereentrantread(_:)","title":"func unsafeReentrantRead<T>((Database) throws -> T) throws -> T","type":"method"}],"path":"\/documentation\/grdb\/anydatabasereader\/databasereader-implementations","title":"DatabaseReader Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/anydatabasereader","title":"AnyDatabaseReader","type":"class"}],"path":"\/documentation\/grdb\/databasereader","title":"DatabaseReader","type":"protocol"},{"children":[{"title":"Writing into the Database","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasewriter\/asyncwrite(_:completion:)","title":"func asyncWrite<T>((Database) throws -> T, completion: (Database, Result<T, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasewriter\/asyncwritewithouttransaction(_:)","title":"func asyncWriteWithoutTransaction((Database) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasewriter\/write(_:)-76inz","title":"func write<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasewriter\/write(_:)-88g7e","title":"func write<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasewriter\/writepublisher(receiveon:updates:)","title":"func writePublisher<Output>(receiveOn: some Scheduler, updates: (Database) throws -> Output) -> DatabasePublishers.Write<Output>","type":"method"},{"path":"\/documentation\/grdb\/databasewriter\/writepublisher(receiveon:updates:thenread:)","title":"func writePublisher<S, T, Output>(receiveOn: S, updates: (Database) throws -> T, thenRead: (Database, T) throws -> Output) -> DatabasePublishers.Write<Output>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/databasewriter\/writewithouttransaction(_:)-tckw","title":"func writeWithoutTransaction<T>((Database) throws -> T) async throws -> T","type":"method"}],"title":"DatabaseWriter Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/databasewriter\/writewithouttransaction(_:)-4qh1w","title":"func writeWithoutTransaction<T>((Database) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/grdb\/databasewriter\/writewithouttransaction(_:)-tckw","title":"func writeWithoutTransaction<T>((Database) throws -> T) async throws -> T","type":"method"},{"title":"Reading from the Database","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasewriter\/concurrentread(_:)","title":"func concurrentRead<T>((Database) throws -> T) -> DatabaseFuture<T>","type":"method"},{"path":"\/documentation\/grdb\/databasewriter\/spawnconcurrentread(_:)","title":"func spawnConcurrentRead((Result<Database, Error>) -> Void)","type":"method"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasefuture\/wait()","title":"func wait() throws -> Value","type":"method"}],"path":"\/documentation\/grdb\/databasefuture","title":"DatabaseFuture","type":"class"},{"title":"Exclusive Access to the Database","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasewriter\/asyncbarrierwritewithouttransaction(_:)","title":"func asyncBarrierWriteWithoutTransaction((Result<Database, Error>) -> Void)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/databasewriter\/barrierwritewithouttransaction(_:)-7u4xw","title":"func barrierWriteWithoutTransaction<T>((Database) throws -> T) async throws -> T","type":"method"}],"title":"DatabaseWriter Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/databasewriter\/barrierwritewithouttransaction(_:)-280j1","title":"func barrierWriteWithoutTransaction<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/databasewriter\/barrierwritewithouttransaction(_:)-7u4xw","title":"func barrierWriteWithoutTransaction<T>((Database) throws -> T) async throws -> T","type":"method"},{"title":"Observing Database Transactions","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasewriter\/add(transactionobserver:extent:)","title":"func add(transactionObserver: some TransactionObserver, extent: Database.TransactionObservationExtent)","type":"method"},{"path":"\/documentation\/grdb\/databasewriter\/remove(transactionobserver:)","title":"func remove(transactionObserver: some TransactionObserver)","type":"method"},{"title":"Unsafe Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasewriter\/unsafereentrantwrite(_:)","title":"func unsafeReentrantWrite<T>((Database) throws -> T) rethrows -> T","type":"method"},{"title":"Other Database Operations","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasewriter\/erase()-w5n7","title":"func erase() throws","type":"method"},{"path":"\/documentation\/grdb\/databasewriter\/erase()-7jv3d","title":"func erase() async throws","type":"method"},{"path":"\/documentation\/grdb\/databasewriter\/vacuum()-310uw","title":"func vacuum() throws","type":"method"},{"path":"\/documentation\/grdb\/databasewriter\/vacuum()-9inj0","title":"func vacuum() async throws","type":"method"},{"path":"\/documentation\/grdb\/databasewriter\/vacuum(into:)-5lo41","title":"func vacuum(into: String) throws","type":"method"},{"path":"\/documentation\/grdb\/databasewriter\/vacuum(into:)-9c5mb","title":"func vacuum(into: String) async throws","type":"method"},{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/anydatabasewriter\/init(_:)","title":"init(some DatabaseWriter)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/anydatabasewriter\/configuration","title":"var configuration: Configuration","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/anydatabasewriter\/asyncread(_:)","title":"func asyncRead((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/asyncunsaferead(_:)","title":"func asyncUnsafeRead((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/backup(to:pagesperstep:progress:)","title":"func backup(to: some DatabaseWriter, pagesPerStep: CInt, progress: ((DatabaseBackupProgress) throws -> Void)?) throws","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/close()","title":"func close() throws","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/interrupt()","title":"func interrupt()","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/read(_:)-3gi88","title":"func read<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/read(_:)-ha1y","title":"func read<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/readpublisher(receiveon:value:)","title":"func readPublisher<Output>(receiveOn: some Scheduler, value: (Database) throws -> Output) -> DatabasePublishers.Read<Output>","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/unsaferead(_:)-26n4t","title":"func unsafeRead<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/unsaferead(_:)-2eezq","title":"func unsafeRead<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/unsafereentrantread(_:)","title":"func unsafeReentrantRead<T>((Database) throws -> T) throws -> T","type":"method"}],"path":"\/documentation\/grdb\/anydatabasewriter\/databasereader-implementations","title":"DatabaseReader Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/anydatabasewriter\/add(transactionobserver:extent:)","title":"func add(transactionObserver: some TransactionObserver, extent: Database.TransactionObservationExtent)","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/asyncbarrierwritewithouttransaction(_:)","title":"func asyncBarrierWriteWithoutTransaction((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/asyncwrite(_:completion:)","title":"func asyncWrite<T>((Database) throws -> T, completion: (Database, Result<T, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/asyncwritewithouttransaction(_:)","title":"func asyncWriteWithoutTransaction((Database) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/barrierwritewithouttransaction(_:)-32ibj","title":"func barrierWriteWithoutTransaction<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/barrierwritewithouttransaction(_:)-8sxth","title":"func barrierWriteWithoutTransaction<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/concurrentread(_:)","title":"func concurrentRead<T>((Database) throws -> T) -> DatabaseFuture<T>","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/erase()","title":"func erase() throws","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/remove(transactionobserver:)","title":"func remove(transactionObserver: some TransactionObserver)","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/spawnconcurrentread(_:)","title":"func spawnConcurrentRead((Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/unsafereentrantwrite(_:)","title":"func unsafeReentrantWrite<T>((Database) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/vacuum()","title":"func vacuum() throws","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/vacuum(into:)","title":"func vacuum(into: String) throws","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/write(_:)-7c5p","title":"func write<T>((Database) throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/write(_:)-8hbqt","title":"func write<T>((Database) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/writepublisher(receiveon:updates:)","title":"func writePublisher<Output>(receiveOn: some Scheduler, updates: (Database) throws -> Output) -> DatabasePublishers.Write<Output>","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/writepublisher(receiveon:updates:thenread:)","title":"func writePublisher<S, T, Output>(receiveOn: S, updates: (Database) throws -> T, thenRead: (Database, T) throws -> Output) -> DatabasePublishers.Write<Output>","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/writewithouttransaction(_:)-49aiv","title":"func writeWithoutTransaction<T>((Database) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/grdb\/anydatabasewriter\/writewithouttransaction(_:)-4h70i","title":"func writeWithoutTransaction<T>((Database) throws -> T) async throws -> T","type":"method"}],"path":"\/documentation\/grdb\/anydatabasewriter\/databasewriter-implementations","title":"DatabaseWriter Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/anydatabasewriter","title":"AnyDatabaseWriter","type":"class"}],"path":"\/documentation\/grdb\/databasewriter","title":"DatabaseWriter","type":"protocol"},{"title":"Using Database Connections","type":"groupMarker"},{"children":[{"title":"Database Information","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/changescount","title":"var changesCount: Int","type":"property"},{"path":"\/documentation\/grdb\/database\/configuration","title":"let configuration: Configuration","type":"property"},{"path":"\/documentation\/grdb\/database\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/grdb\/database\/description","title":"let description: String","type":"property"},{"path":"\/documentation\/grdb\/database\/lasterrorcode","title":"var lastErrorCode: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/database\/lasterrormessage","title":"var lastErrorMessage: String?","type":"property"},{"path":"\/documentation\/grdb\/database\/lastinsertedrowid","title":"var lastInsertedRowID: Int64","type":"property"},{"path":"\/documentation\/grdb\/database\/maximumstatementargumentcount","title":"var maximumStatementArgumentCount: Int","type":"property"},{"path":"\/documentation\/grdb\/database\/sqliteconnection","title":"var sqliteConnection: SQLiteConnection?","type":"property"},{"path":"\/documentation\/grdb\/database\/totalchangescount","title":"var totalChangesCount: Int","type":"property"},{"path":"\/documentation\/grdb\/sqliteconnection","title":"SQLiteConnection","type":"typealias"},{"title":"Database Statements","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/allstatements(literal:)","title":"func allStatements(literal: SQL) throws -> SQLStatementCursor","type":"method"},{"path":"\/documentation\/grdb\/database\/allstatements(sql:arguments:)","title":"func allStatements(sql: String, arguments: StatementArguments?) throws -> SQLStatementCursor","type":"method"},{"path":"\/documentation\/grdb\/database\/cachedstatement(literal:)","title":"func cachedStatement(literal: SQL) throws -> Statement","type":"method"},{"path":"\/documentation\/grdb\/database\/cachedstatement(sql:)","title":"func cachedStatement(sql: String) throws -> Statement","type":"method"},{"path":"\/documentation\/grdb\/database\/execute(literal:)","title":"func execute(literal: SQL) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/execute(sql:arguments:)","title":"func execute(sql: String, arguments: StatementArguments) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/makestatement(literal:)","title":"func makeStatement(literal: SQL) throws -> Statement","type":"method"},{"path":"\/documentation\/grdb\/database\/makestatement(sql:)","title":"func makeStatement(sql: String) throws -> Statement","type":"method"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) -> DropWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/dropfirst()","title":"func dropFirst() -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/droplast()","title":"func dropLast() throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/droplast(_:)","title":"func dropLast(Int) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/enumerated()","title":"func enumerated() -> EnumeratedCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) -> FilterCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/flatmap(_:)-2tbmy","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/flatmap(_:)-avr9","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/map(_:)","title":"func map<T>((Self.Element) throws -> T) -> MapCursor<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/next()","title":"func next() throws -> Statement?","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/prefix(_:)","title":"func prefix(Int) -> PrefixCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) -> PrefixWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> Void) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/sqlstatementcursor\/suffix(_:)","title":"func suffix(Int) throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/grdb\/sqlstatementcursor\/cursor-implementations","title":"Cursor Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/sqlstatementcursor","title":"SQLStatementCursor","type":"class"},{"title":"Database Transactions","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/begintransaction(_:)","title":"func beginTransaction(Database.TransactionKind?) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/commit()","title":"func commit() throws","type":"method"},{"path":"\/documentation\/grdb\/database\/insavepoint(_:)","title":"func inSavepoint(() throws -> Database.TransactionCompletion) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/intransaction(_:_:)","title":"func inTransaction(Database.TransactionKind?, () throws -> Database.TransactionCompletion) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/isinsidetransaction","title":"var isInsideTransaction: Bool","type":"property"},{"path":"\/documentation\/grdb\/database\/rollback()","title":"func rollback() throws","type":"method"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/transactioncompletion\/commit","title":"case commit","type":"case"},{"path":"\/documentation\/grdb\/database\/transactioncompletion\/rollback","title":"case rollback","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/transactioncompletion\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/database\/transactioncompletion\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/database\/transactioncompletion","title":"Database.TransactionCompletion","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/transactionkind\/deferred","title":"case deferred","type":"case"},{"path":"\/documentation\/grdb\/database\/transactionkind\/exclusive","title":"case exclusive","type":"case"},{"path":"\/documentation\/grdb\/database\/transactionkind\/immediate","title":"case immediate","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/transactionkind\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/transactionkind\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/database\/transactionkind\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/transactionkind\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/transactionkind\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/grdb\/database\/transactionkind\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/database\/transactionkind","title":"Database.TransactionKind","type":"enum"},{"title":"Observing Database Transactions","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/add(transactionobserver:extent:)","title":"func add(transactionObserver: some TransactionObserver, extent: Database.TransactionObservationExtent)","type":"method"},{"path":"\/documentation\/grdb\/database\/afternexttransaction(oncommit:onrollback:)","title":"func afterNextTransaction(onCommit: (Database) -> Void, onRollback: (Database) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/database\/remove(transactionobserver:)","title":"func remove(transactionObserver: some TransactionObserver)","type":"method"},{"children":[{"title":"Handling Database Changes","type":"groupMarker"},{"path":"\/documentation\/grdb\/transactionobserver\/observes(eventsofkind:)","title":"func observes(eventsOfKind: DatabaseEventKind) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/transactionobserver\/databasedidchange(with:)","title":"func databaseDidChange(with: DatabaseEvent)","type":"method"},{"path":"\/documentation\/grdb\/transactionobserver\/stopobservingdatabasechangesuntilnexttransaction()","title":"func stopObservingDatabaseChangesUntilNextTransaction()","type":"method"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseevent\/databasename","title":"var databaseName: String","type":"property"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.property","title":"let kind: DatabaseEvent.Kind","type":"property"},{"path":"\/documentation\/grdb\/databaseevent\/rowid","title":"let rowID: Int64","type":"property"},{"path":"\/documentation\/grdb\/databaseevent\/tablename","title":"var tableName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseevent\/copy()","title":"func copy() -> DatabaseEvent","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/delete","title":"case delete","type":"case"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/insert","title":"case insert","type":"case"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/update","title":"case update","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/init(rawvalue:)","title":"init?(rawValue: CInt)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum","title":"DatabaseEvent.Kind","type":"enum"}],"path":"\/documentation\/grdb\/databaseevent","title":"DatabaseEvent","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseeventkind\/delete(tablename:)","title":"case delete(tableName: String)","type":"case"},{"path":"\/documentation\/grdb\/databaseeventkind\/insert(tablename:)","title":"case insert(tableName: String)","type":"case"},{"path":"\/documentation\/grdb\/databaseeventkind\/update(tablename:columnnames:)","title":"case update(tableName: String, columnNames: Set<String>)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseeventkind\/tablename","title":"var tableName: String","type":"property"}],"path":"\/documentation\/grdb\/databaseeventkind","title":"DatabaseEventKind","type":"enum"},{"title":"Handling Transactions","type":"groupMarker"},{"children":[{"title":"TransactionObserver Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/transactionobserver\/databasewillcommit()-7mksu","title":"func databaseWillCommit() throws","type":"method"},{"path":"\/documentation\/grdb\/transactionobserver\/databasedidcommit(_:)","title":"func databaseDidCommit(Database)","type":"method"},{"path":"\/documentation\/grdb\/transactionobserver\/databasedidrollback(_:)","title":"func databaseDidRollback(Database)","type":"method"}],"path":"\/documentation\/grdb\/transactionobserver","title":"TransactionObserver","type":"protocol"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/transactionobservationextent\/databaselifetime","title":"case databaseLifetime","type":"case"},{"path":"\/documentation\/grdb\/database\/transactionobservationextent\/nexttransaction","title":"case nextTransaction","type":"case"},{"path":"\/documentation\/grdb\/database\/transactionobservationextent\/observerlifetime","title":"case observerLifetime","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/transactionobservationextent\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/database\/transactionobservationextent\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/database\/transactionobservationextent","title":"Database.TransactionObservationExtent","type":"enum"},{"title":"Collations","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/add(collation:)","title":"func add(collation: DatabaseCollation)","type":"method"},{"path":"\/documentation\/grdb\/database\/reindex(collation:)-171fj","title":"func reindex(collation: Database.CollationName) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/reindex(collation:)-2hxil","title":"func reindex(collation: DatabaseCollation) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/remove(collation:)","title":"func remove(collation: DatabaseCollation)","type":"method"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/collationname\/init(rawvalue:)","title":"init(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/collationname\/rawvalue","title":"let rawValue: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/collationname\/binary","title":"static let binary: Database.CollationName","type":"property"},{"path":"\/documentation\/grdb\/database\/collationname\/nocase","title":"static let nocase: Database.CollationName","type":"property"},{"path":"\/documentation\/grdb\/database\/collationname\/rtrim","title":"static let rtrim: Database.CollationName","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/collationname\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/database\/collationname\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/collationname\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/collationname\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/grdb\/database\/collationname\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/database\/collationname","title":"Database.CollationName","type":"struct"},{"children":[{"title":"Creating a Custom Collation","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasecollation\/init(_:function:)","title":"init(String, function: (String, String) -> ComparisonResult)","type":"init"},{"path":"\/documentation\/grdb\/databasecollation\/name","title":"let name: String","type":"property"},{"title":"Built-in Collations","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasecollation\/caseinsensitivecompare","title":"static let caseInsensitiveCompare: DatabaseCollation","type":"property"},{"path":"\/documentation\/grdb\/databasecollation\/localizedcaseinsensitivecompare","title":"static let localizedCaseInsensitiveCompare: DatabaseCollation","type":"property"},{"path":"\/documentation\/grdb\/databasecollation\/localizedcompare","title":"static let localizedCompare: DatabaseCollation","type":"property"},{"path":"\/documentation\/grdb\/databasecollation\/localizedstandardcompare","title":"static let localizedStandardCompare: DatabaseCollation","type":"property"},{"path":"\/documentation\/grdb\/databasecollation\/unicodecompare","title":"static let unicodeCompare: DatabaseCollation","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasecollation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/databasecollation\/==(_:_:)","title":"static func == (DatabaseCollation, DatabaseCollation) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/databasecollation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasecollation\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/grdb\/databasecollation\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasecollation","title":"DatabaseCollation","type":"class"},{"title":"SQL Functions","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/add(function:)","title":"func add(function: DatabaseFunction)","type":"method"},{"path":"\/documentation\/grdb\/database\/remove(function:)","title":"func remove(function: DatabaseFunction)","type":"method"},{"children":[{"title":"Creating a Custom SQL Function or Aggregate","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasefunction\/init(_:argumentcount:pure:function:)","title":"init(String, argumentCount: Int?, pure: Bool, function: ([DatabaseValue]) throws -> (DatabaseValueConvertible)?)","type":"init"},{"path":"\/documentation\/grdb\/databasefunction\/init(_:argumentcount:pure:aggregate:)","title":"init<Aggregate>(String, argumentCount: Int?, pure: Bool, aggregate: Aggregate.Type)","type":"init"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseaggregate\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseaggregate\/finalize()","title":"func finalize() throws -> (DatabaseValueConvertible)?","type":"method"},{"path":"\/documentation\/grdb\/databaseaggregate\/step(_:)","title":"func step([DatabaseValue]) throws","type":"method"}],"path":"\/documentation\/grdb\/databaseaggregate","title":"DatabaseAggregate","type":"protocol"},{"title":"Calling an SQL Function or Aggregate","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasefunction\/callasfunction(_:)","title":"func callAsFunction(SQLExpressible...) -> SQLExpression","type":"method"},{"title":"Built-in Functions","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasefunction\/capitalize","title":"static let capitalize: DatabaseFunction","type":"property"},{"path":"\/documentation\/grdb\/databasefunction\/localizedcapitalize","title":"static let localizedCapitalize: DatabaseFunction","type":"property"},{"path":"\/documentation\/grdb\/databasefunction\/localizedlowercase","title":"static let localizedLowercase: DatabaseFunction","type":"property"},{"path":"\/documentation\/grdb\/databasefunction\/localizeduppercase","title":"static let localizedUppercase: DatabaseFunction","type":"property"},{"path":"\/documentation\/grdb\/databasefunction\/lowercase","title":"static let lowercase: DatabaseFunction","type":"property"},{"path":"\/documentation\/grdb\/databasefunction\/uppercase","title":"static let uppercase: DatabaseFunction","type":"property"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasefunction\/name","title":"var name: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasefunction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/databasefunction\/==(_:_:)","title":"static func == (DatabaseFunction, DatabaseFunction) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/databasefunction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasefunction\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/grdb\/databasefunction\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasefunction","title":"DatabaseFunction","type":"class"},{"title":"Notifications","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/resumenotification","title":"static let resumeNotification: Notification.Name","type":"property"},{"path":"\/documentation\/grdb\/database\/suspendnotification","title":"static let suspendNotification: Notification.Name","type":"property"},{"title":"Other Database Operations","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/backup(to:pagesperstep:progress:)","title":"func backup(to: Database, pagesPerStep: CInt, progress: ((DatabaseBackupProgress) throws -> Void)?) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/checkpoint(_:on:)","title":"func checkpoint(Database.CheckpointMode, on: String?) throws -> (walFrameCount: Int, checkpointedFrameCount: Int)","type":"method"},{"path":"\/documentation\/grdb\/database\/clearschemacache()","title":"func clearSchemaCache()","type":"method"},{"path":"\/documentation\/grdb\/database\/logerror","title":"static var logError: Database.LogErrorFunction?","type":"property"},{"path":"\/documentation\/grdb\/database\/releasememory()","title":"func releaseMemory()","type":"method"},{"path":"\/documentation\/grdb\/database\/trace(options:_:)","title":"func trace(options: Database.TracingOptions, ((Database.TraceEvent) -> Void)?)","type":"method"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/checkpointmode\/full","title":"case full","type":"case"},{"path":"\/documentation\/grdb\/database\/checkpointmode\/passive","title":"case passive","type":"case"},{"path":"\/documentation\/grdb\/database\/checkpointmode\/restart","title":"case restart","type":"case"},{"path":"\/documentation\/grdb\/database\/checkpointmode\/truncate","title":"case truncate","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/checkpointmode\/init(rawvalue:)","title":"init?(rawValue: CInt)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/checkpointmode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/database\/checkpointmode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/checkpointmode\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/checkpointmode\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/grdb\/database\/checkpointmode\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/database\/checkpointmode","title":"Database.CheckpointMode","type":"enum"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasebackupprogress\/completedpagecount","title":"var completedPageCount: Int","type":"property"},{"path":"\/documentation\/grdb\/databasebackupprogress\/iscompleted","title":"let isCompleted: Bool","type":"property"},{"path":"\/documentation\/grdb\/databasebackupprogress\/remainingpagecount","title":"let remainingPageCount: Int","type":"property"},{"path":"\/documentation\/grdb\/databasebackupprogress\/totalpagecount","title":"let totalPageCount: Int","type":"property"}],"path":"\/documentation\/grdb\/databasebackupprogress","title":"DatabaseBackupProgress","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/traceevent\/statement\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/grdb\/database\/traceevent\/statement\/expandedsql","title":"var expandedSQL: String","type":"property"},{"path":"\/documentation\/grdb\/database\/traceevent\/statement\/sql","title":"var sql: String","type":"property"}],"path":"\/documentation\/grdb\/database\/traceevent\/statement","title":"Database.TraceEvent.Statement","type":"struct"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/traceevent\/profile(statement:duration:)","title":"case profile(statement: Database.TraceEvent.Statement, duration: TimeInterval)","type":"case"},{"path":"\/documentation\/grdb\/database\/traceevent\/statement(_:)","title":"case statement(Database.TraceEvent.Statement)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/traceevent\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/grdb\/database\/traceevent\/expandeddescription","title":"var expandedDescription: String","type":"property"}],"path":"\/documentation\/grdb\/database\/traceevent","title":"Database.TraceEvent","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/init(rawvalue:)","title":"init(rawValue: CInt)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/rawvalue","title":"let rawValue: CInt","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/profile","title":"static let profile: Database.TracingOptions","type":"property"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/statement","title":"static let statement: Database.TracingOptions","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/database\/tracingoptions\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/grdb\/database\/tracingoptions\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/grdb\/database\/tracingoptions\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/grdb\/database\/tracingoptions\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/database\/tracingoptions","title":"Database.TracingOptions","type":"struct"},{"title":"Sunsetted Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/create(index:on:columns:unique:ifnotexists:condition:)","title":"func create(index: String, on: String, columns: [String], unique: Bool, ifNotExists: Bool, condition: (SQLExpressible)?) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/create(table:temporary:ifnotexists:withoutrowid:body:)","title":"func create(table: String, temporary: Bool, ifNotExists: Bool, withoutRowID: Bool, body: (TableDefinition) throws -> Void) throws","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/busycallback","title":"Database.BusyCallback","type":"typealias"},{"path":"\/documentation\/grdb\/database\/logerrorfunction","title":"Database.LogErrorFunction","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/busymode\/callback(_:)","title":"case callback(Database.BusyCallback)","type":"case"},{"path":"\/documentation\/grdb\/database\/busymode\/immediateerror","title":"case immediateError","type":"case"},{"path":"\/documentation\/grdb\/database\/busymode\/timeout(_:)","title":"case timeout(TimeInterval)","type":"case"}],"path":"\/documentation\/grdb\/database\/busymode","title":"Database.BusyMode","type":"enum"}],"path":"\/documentation\/grdb\/database","title":"Database","type":"class"},{"children":[{"title":"Creating DatabaseError","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseerror\/init(resultcode:message:sql:arguments:publicstatementarguments:)","title":"init(resultCode: ResultCode, message: String?, sql: String?, arguments: StatementArguments?, publicStatementArguments: Bool)","type":"init"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/resultcode\/~=(_:_:)-3zjeq","title":"static func ~= (ResultCode, ResultCode) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/resultcode\/~=(_:_:)-7pido","title":"static func ~= (ResultCode, Error) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/resultcode\/init(rawvalue:)","title":"init(rawValue: CInt)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/resultcode\/primaryresultcode","title":"var primaryResultCode: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/rawvalue","title":"let rawValue: CInt","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_abort","title":"static let SQLITE_ABORT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_abort_rollback","title":"static let SQLITE_ABORT_ROLLBACK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_auth","title":"static let SQLITE_AUTH: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_auth_user","title":"static let SQLITE_AUTH_USER: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_busy","title":"static let SQLITE_BUSY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_busy_recovery","title":"static let SQLITE_BUSY_RECOVERY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_busy_snapshot","title":"static let SQLITE_BUSY_SNAPSHOT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_busy_timeout","title":"static let SQLITE_BUSY_TIMEOUT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_cantopen","title":"static let SQLITE_CANTOPEN: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_cantopen_convpath","title":"static let SQLITE_CANTOPEN_CONVPATH: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_cantopen_dirtywal","title":"static let SQLITE_CANTOPEN_DIRTYWAL: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_cantopen_fullpath","title":"static let SQLITE_CANTOPEN_FULLPATH: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_cantopen_isdir","title":"static let SQLITE_CANTOPEN_ISDIR: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_cantopen_notempdir","title":"static let SQLITE_CANTOPEN_NOTEMPDIR: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_cantopen_symlink","title":"static let SQLITE_CANTOPEN_SYMLINK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_constraint","title":"static let SQLITE_CONSTRAINT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_constraint_check","title":"static let SQLITE_CONSTRAINT_CHECK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_constraint_commithook","title":"static let SQLITE_CONSTRAINT_COMMITHOOK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_constraint_datatype","title":"static let SQLITE_CONSTRAINT_DATATYPE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_constraint_foreignkey","title":"static let SQLITE_CONSTRAINT_FOREIGNKEY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_constraint_function","title":"static let SQLITE_CONSTRAINT_FUNCTION: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_constraint_notnull","title":"static let SQLITE_CONSTRAINT_NOTNULL: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_constraint_pinned","title":"static let SQLITE_CONSTRAINT_PINNED: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_constraint_primarykey","title":"static let SQLITE_CONSTRAINT_PRIMARYKEY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_constraint_rowid","title":"static let SQLITE_CONSTRAINT_ROWID: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_constraint_trigger","title":"static let SQLITE_CONSTRAINT_TRIGGER: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_constraint_unique","title":"static let SQLITE_CONSTRAINT_UNIQUE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_constraint_vtab","title":"static let SQLITE_CONSTRAINT_VTAB: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_corrupt","title":"static let SQLITE_CORRUPT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_corrupt_index","title":"static let SQLITE_CORRUPT_INDEX: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_corrupt_sequence","title":"static let SQLITE_CORRUPT_SEQUENCE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_corrupt_vtab","title":"static let SQLITE_CORRUPT_VTAB: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_done","title":"static let SQLITE_DONE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_empty","title":"static let SQLITE_EMPTY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_error","title":"static let SQLITE_ERROR: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_error_missing_collseq","title":"static let SQLITE_ERROR_MISSING_COLLSEQ: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_error_retry","title":"static let SQLITE_ERROR_RETRY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_error_snapshot","title":"static let SQLITE_ERROR_SNAPSHOT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_format","title":"static let SQLITE_FORMAT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_full","title":"static let SQLITE_FULL: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_internal","title":"static let SQLITE_INTERNAL: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_interrupt","title":"static let SQLITE_INTERRUPT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr","title":"static let SQLITE_IOERR: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_access","title":"static let SQLITE_IOERR_ACCESS: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_auth","title":"static let SQLITE_IOERR_AUTH: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_begin_atomic","title":"static let SQLITE_IOERR_BEGIN_ATOMIC: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_blocked","title":"static let SQLITE_IOERR_BLOCKED: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_checkreservedlock","title":"static let SQLITE_IOERR_CHECKRESERVEDLOCK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_close","title":"static let SQLITE_IOERR_CLOSE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_commit_atomic","title":"static let SQLITE_IOERR_COMMIT_ATOMIC: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_convpath","title":"static let SQLITE_IOERR_CONVPATH: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_corruptfs","title":"static let SQLITE_IOERR_CORRUPTFS: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_data","title":"static let SQLITE_IOERR_DATA: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_delete","title":"static let SQLITE_IOERR_DELETE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_delete_noent","title":"static let SQLITE_IOERR_DELETE_NOENT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_dir_close","title":"static let SQLITE_IOERR_DIR_CLOSE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_dir_fsync","title":"static let SQLITE_IOERR_DIR_FSYNC: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_fstat","title":"static let SQLITE_IOERR_FSTAT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_fsync","title":"static let SQLITE_IOERR_FSYNC: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_gettemppath","title":"static let SQLITE_IOERR_GETTEMPPATH: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_lock","title":"static let SQLITE_IOERR_LOCK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_mmap","title":"static let SQLITE_IOERR_MMAP: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_nomem","title":"static let SQLITE_IOERR_NOMEM: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_rdlock","title":"static let SQLITE_IOERR_RDLOCK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_read","title":"static let SQLITE_IOERR_READ: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_rollback_atomic","title":"static let SQLITE_IOERR_ROLLBACK_ATOMIC: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_seek","title":"static let SQLITE_IOERR_SEEK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_shmlock","title":"static let SQLITE_IOERR_SHMLOCK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_shmmap","title":"static let SQLITE_IOERR_SHMMAP: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_shmopen","title":"static let SQLITE_IOERR_SHMOPEN: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_shmsize","title":"static let SQLITE_IOERR_SHMSIZE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_short_read","title":"static let SQLITE_IOERR_SHORT_READ: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_truncate","title":"static let SQLITE_IOERR_TRUNCATE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_unlock","title":"static let SQLITE_IOERR_UNLOCK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_vnode","title":"static let SQLITE_IOERR_VNODE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ioerr_write","title":"static let SQLITE_IOERR_WRITE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_locked","title":"static let SQLITE_LOCKED: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_locked_sharedcache","title":"static let SQLITE_LOCKED_SHAREDCACHE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_locked_vtab","title":"static let SQLITE_LOCKED_VTAB: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_mismatch","title":"static let SQLITE_MISMATCH: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_misuse","title":"static let SQLITE_MISUSE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_nolfs","title":"static let SQLITE_NOLFS: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_nomem","title":"static let SQLITE_NOMEM: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_notadb","title":"static let SQLITE_NOTADB: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_notfound","title":"static let SQLITE_NOTFOUND: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_notice","title":"static let SQLITE_NOTICE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_notice_recover_rollback","title":"static let SQLITE_NOTICE_RECOVER_ROLLBACK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_notice_recover_wal","title":"static let SQLITE_NOTICE_RECOVER_WAL: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ok","title":"static let SQLITE_OK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ok_load_permanently","title":"static let SQLITE_OK_LOAD_PERMANENTLY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_ok_symlink","title":"static let SQLITE_OK_SYMLINK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_perm","title":"static let SQLITE_PERM: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_protocol","title":"static let SQLITE_PROTOCOL: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_range","title":"static let SQLITE_RANGE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_readonly","title":"static let SQLITE_READONLY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_readonly_cantinit","title":"static let SQLITE_READONLY_CANTINIT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_readonly_cantlock","title":"static let SQLITE_READONLY_CANTLOCK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_readonly_dbmoved","title":"static let SQLITE_READONLY_DBMOVED: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_readonly_directory","title":"static let SQLITE_READONLY_DIRECTORY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_readonly_recovery","title":"static let SQLITE_READONLY_RECOVERY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_readonly_rollback","title":"static let SQLITE_READONLY_ROLLBACK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_row","title":"static let SQLITE_ROW: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_schema","title":"static let SQLITE_SCHEMA: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_toobig","title":"static let SQLITE_TOOBIG: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_warning","title":"static let SQLITE_WARNING: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/resultcode\/sqlite_warning_autoindex","title":"static let SQLITE_WARNING_AUTOINDEX: ResultCode","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/resultcode\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/grdb\/resultcode\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/resultcode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/resultcode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/resultcode","title":"ResultCode","type":"struct"},{"title":"Error Information","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseerror\/arguments","title":"let arguments: StatementArguments?","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/extendedresultcode","title":"let extendedResultCode: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/isinterruptionerror","title":"var isInterruptionError: Bool","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/message","title":"let message: String?","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/resultcode","title":"var resultCode: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sql","title":"let sql: String?","type":"property"},{"title":"Converting DatabaseError to String","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseerror\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/expandeddescription","title":"var expandedDescription: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_abort","title":"static let SQLITE_ABORT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_abort_rollback","title":"static let SQLITE_ABORT_ROLLBACK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_auth","title":"static let SQLITE_AUTH: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_auth_user","title":"static let SQLITE_AUTH_USER: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_busy","title":"static let SQLITE_BUSY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_busy_recovery","title":"static let SQLITE_BUSY_RECOVERY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_busy_snapshot","title":"static let SQLITE_BUSY_SNAPSHOT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_busy_timeout","title":"static let SQLITE_BUSY_TIMEOUT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_cantopen","title":"static let SQLITE_CANTOPEN: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_cantopen_convpath","title":"static let SQLITE_CANTOPEN_CONVPATH: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_cantopen_dirtywal","title":"static let SQLITE_CANTOPEN_DIRTYWAL: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_cantopen_fullpath","title":"static let SQLITE_CANTOPEN_FULLPATH: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_cantopen_isdir","title":"static let SQLITE_CANTOPEN_ISDIR: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_cantopen_notempdir","title":"static let SQLITE_CANTOPEN_NOTEMPDIR: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_cantopen_symlink","title":"static let SQLITE_CANTOPEN_SYMLINK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_constraint","title":"static let SQLITE_CONSTRAINT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_constraint_check","title":"static let SQLITE_CONSTRAINT_CHECK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_constraint_commithook","title":"static let SQLITE_CONSTRAINT_COMMITHOOK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_constraint_datatype","title":"static let SQLITE_CONSTRAINT_DATATYPE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_constraint_foreignkey","title":"static let SQLITE_CONSTRAINT_FOREIGNKEY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_constraint_function","title":"static let SQLITE_CONSTRAINT_FUNCTION: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_constraint_notnull","title":"static let SQLITE_CONSTRAINT_NOTNULL: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_constraint_pinned","title":"static let SQLITE_CONSTRAINT_PINNED: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_constraint_primarykey","title":"static let SQLITE_CONSTRAINT_PRIMARYKEY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_constraint_rowid","title":"static let SQLITE_CONSTRAINT_ROWID: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_constraint_trigger","title":"static let SQLITE_CONSTRAINT_TRIGGER: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_constraint_unique","title":"static let SQLITE_CONSTRAINT_UNIQUE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_constraint_vtab","title":"static let SQLITE_CONSTRAINT_VTAB: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_corrupt","title":"static let SQLITE_CORRUPT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_corrupt_index","title":"static let SQLITE_CORRUPT_INDEX: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_corrupt_sequence","title":"static let SQLITE_CORRUPT_SEQUENCE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_corrupt_vtab","title":"static let SQLITE_CORRUPT_VTAB: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_done","title":"static let SQLITE_DONE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_empty","title":"static let SQLITE_EMPTY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_error","title":"static let SQLITE_ERROR: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_error_missing_collseq","title":"static let SQLITE_ERROR_MISSING_COLLSEQ: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_error_retry","title":"static let SQLITE_ERROR_RETRY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_error_snapshot","title":"static let SQLITE_ERROR_SNAPSHOT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_format","title":"static let SQLITE_FORMAT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_full","title":"static let SQLITE_FULL: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_internal","title":"static let SQLITE_INTERNAL: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_interrupt","title":"static let SQLITE_INTERRUPT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr","title":"static let SQLITE_IOERR: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_access","title":"static let SQLITE_IOERR_ACCESS: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_auth","title":"static let SQLITE_IOERR_AUTH: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_begin_atomic","title":"static let SQLITE_IOERR_BEGIN_ATOMIC: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_blocked","title":"static let SQLITE_IOERR_BLOCKED: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_checkreservedlock","title":"static let SQLITE_IOERR_CHECKRESERVEDLOCK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_close","title":"static let SQLITE_IOERR_CLOSE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_commit_atomic","title":"static let SQLITE_IOERR_COMMIT_ATOMIC: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_convpath","title":"static let SQLITE_IOERR_CONVPATH: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_corruptfs","title":"static let SQLITE_IOERR_CORRUPTFS: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_data","title":"static let SQLITE_IOERR_DATA: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_delete","title":"static let SQLITE_IOERR_DELETE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_delete_noent","title":"static let SQLITE_IOERR_DELETE_NOENT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_dir_close","title":"static let SQLITE_IOERR_DIR_CLOSE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_dir_fsync","title":"static let SQLITE_IOERR_DIR_FSYNC: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_fstat","title":"static let SQLITE_IOERR_FSTAT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_fsync","title":"static let SQLITE_IOERR_FSYNC: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_gettemppath","title":"static let SQLITE_IOERR_GETTEMPPATH: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_lock","title":"static let SQLITE_IOERR_LOCK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_mmap","title":"static let SQLITE_IOERR_MMAP: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_nomem","title":"static let SQLITE_IOERR_NOMEM: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_rdlock","title":"static let SQLITE_IOERR_RDLOCK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_read","title":"static let SQLITE_IOERR_READ: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_rollback_atomic","title":"static let SQLITE_IOERR_ROLLBACK_ATOMIC: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_seek","title":"static let SQLITE_IOERR_SEEK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_shmlock","title":"static let SQLITE_IOERR_SHMLOCK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_shmmap","title":"static let SQLITE_IOERR_SHMMAP: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_shmopen","title":"static let SQLITE_IOERR_SHMOPEN: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_shmsize","title":"static let SQLITE_IOERR_SHMSIZE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_short_read","title":"static let SQLITE_IOERR_SHORT_READ: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_truncate","title":"static let SQLITE_IOERR_TRUNCATE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_unlock","title":"static let SQLITE_IOERR_UNLOCK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_vnode","title":"static let SQLITE_IOERR_VNODE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ioerr_write","title":"static let SQLITE_IOERR_WRITE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_locked","title":"static let SQLITE_LOCKED: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_locked_sharedcache","title":"static let SQLITE_LOCKED_SHAREDCACHE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_locked_vtab","title":"static let SQLITE_LOCKED_VTAB: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_mismatch","title":"static let SQLITE_MISMATCH: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_misuse","title":"static let SQLITE_MISUSE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_nolfs","title":"static let SQLITE_NOLFS: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_nomem","title":"static let SQLITE_NOMEM: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_notadb","title":"static let SQLITE_NOTADB: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_notfound","title":"static let SQLITE_NOTFOUND: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_notice","title":"static let SQLITE_NOTICE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_notice_recover_rollback","title":"static let SQLITE_NOTICE_RECOVER_ROLLBACK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_notice_recover_wal","title":"static let SQLITE_NOTICE_RECOVER_WAL: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ok","title":"static let SQLITE_OK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ok_load_permanently","title":"static let SQLITE_OK_LOAD_PERMANENTLY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_ok_symlink","title":"static let SQLITE_OK_SYMLINK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_perm","title":"static let SQLITE_PERM: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_protocol","title":"static let SQLITE_PROTOCOL: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_range","title":"static let SQLITE_RANGE: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_readonly","title":"static let SQLITE_READONLY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_readonly_cantinit","title":"static let SQLITE_READONLY_CANTINIT: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_readonly_cantlock","title":"static let SQLITE_READONLY_CANTLOCK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_readonly_dbmoved","title":"static let SQLITE_READONLY_DBMOVED: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_readonly_directory","title":"static let SQLITE_READONLY_DIRECTORY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_readonly_recovery","title":"static let SQLITE_READONLY_RECOVERY: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_readonly_rollback","title":"static let SQLITE_READONLY_ROLLBACK: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_row","title":"static let SQLITE_ROW: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_schema","title":"static let SQLITE_SCHEMA: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_toobig","title":"static let SQLITE_TOOBIG: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_warning","title":"static let SQLITE_WARNING: ResultCode","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/sqlite_warning_autoindex","title":"static let SQLITE_WARNING_AUTOINDEX: ResultCode","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseerror\/errorcode-1wtln","title":"var errorCode: Int","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/errorcode-5dp9g","title":"var errorCode: Int","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/erroruserinfo-8uflv","title":"var errorUserInfo: [String : Any]","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/erroruserinfo-974gn","title":"var errorUserInfo: [String : Any]","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseerror\/errordomain-2jwfd","title":"static var errorDomain: String","type":"property"},{"path":"\/documentation\/grdb\/databaseerror\/errordomain-6ja0i","title":"static var errorDomain: String","type":"property"}],"path":"\/documentation\/grdb\/databaseerror\/customnserror-implementations","title":"CustomNSError Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseerror\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/grdb\/databaseerror\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/grdb\/databaseerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databaseerror","title":"DatabaseError","type":"struct"}],"path":"\/documentation\/grdb\/databaseconnections","title":"Database Connections","type":"symbol"},{"children":[{"title":"Fundamental Database Types","type":"groupMarker"},{"children":[{"title":"Executing a Prepared Statement","type":"groupMarker"},{"path":"\/documentation\/grdb\/statement\/execute(arguments:)","title":"func execute(arguments: StatementArguments?) throws","type":"method"},{"title":"Arguments","type":"groupMarker"},{"path":"\/documentation\/grdb\/statement\/arguments","title":"var arguments: StatementArguments","type":"property"},{"path":"\/documentation\/grdb\/statement\/setarguments(_:)","title":"func setArguments(StatementArguments) throws","type":"method"},{"path":"\/documentation\/grdb\/statement\/setuncheckedarguments(_:)","title":"func setUncheckedArguments(StatementArguments)","type":"method"},{"path":"\/documentation\/grdb\/statement\/validatearguments(_:)","title":"func validateArguments(StatementArguments) throws","type":"method"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/statementarguments\/&+(_:_:)","title":"static func &+ (StatementArguments, StatementArguments) -> StatementArguments","type":"op"},{"path":"\/documentation\/grdb\/statementarguments\/+(_:_:)","title":"static func + (StatementArguments, StatementArguments) -> StatementArguments","type":"op"},{"path":"\/documentation\/grdb\/statementarguments\/+=(_:_:)","title":"static func += (inout StatementArguments, StatementArguments)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/statementarguments\/init()","title":"init()","type":"init"},{"path":"\/documentation\/grdb\/statementarguments\/init(_:)-1adxp","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/grdb\/statementarguments\/init(_:)-4t9et","title":"init([String : (DatabaseValueConvertible)?])","type":"init"},{"path":"\/documentation\/grdb\/statementarguments\/init(_:)-4v4c0","title":"init?([Any])","type":"init"},{"path":"\/documentation\/grdb\/statementarguments\/init(_:)-5wf7z","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/grdb\/statementarguments\/init(_:)-6opp1","title":"init?([AnyHashable : Any])","type":"init"},{"path":"\/documentation\/grdb\/statementarguments\/init(_:)-9vkvt","title":"init<S>(S)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/statementarguments\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/statementarguments\/append(contentsof:)","title":"func append(contentsOf: StatementArguments) -> [String : DatabaseValue]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/statementarguments\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/grdb\/statementarguments\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/statementarguments\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/statementarguments\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/statementarguments\/init(arrayliteral:)","title":"init(arrayLiteral: (DatabaseValueConvertible)?...)","type":"init"}],"path":"\/documentation\/grdb\/statementarguments\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/statementarguments\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (String, (DatabaseValueConvertible)?)...)","type":"init"}],"path":"\/documentation\/grdb\/statementarguments\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/statementarguments","title":"StatementArguments","type":"struct"},{"title":"Statement Informations","type":"groupMarker"},{"path":"\/documentation\/grdb\/statement\/columncount","title":"var columnCount: Int","type":"property"},{"path":"\/documentation\/grdb\/statement\/columnnames","title":"var columnNames: [String]","type":"property"},{"path":"\/documentation\/grdb\/statement\/databaseregion","title":"var databaseRegion: DatabaseRegion","type":"property"},{"path":"\/documentation\/grdb\/statement\/index(ofcolumn:)","title":"func index(ofColumn: String) -> Int?","type":"method"},{"path":"\/documentation\/grdb\/statement\/isreadonly","title":"var isReadonly: Bool","type":"property"},{"path":"\/documentation\/grdb\/statement\/sql","title":"var sql: String","type":"property"},{"path":"\/documentation\/grdb\/statement\/sqlitestatement","title":"let sqliteStatement: SQLiteStatement","type":"property"},{"path":"\/documentation\/grdb\/sqlitestatement","title":"SQLiteStatement","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/statement\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/grdb\/statement\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/statement","title":"Statement","type":"class"},{"children":[{"title":"Creating Rows","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/init()","title":"convenience init()","type":"init"},{"path":"\/documentation\/grdb\/row\/init(_:)-5uezw","title":"convenience init([String : (DatabaseValueConvertible)?])","type":"init"},{"path":"\/documentation\/grdb\/row\/init(_:)-65by6","title":"convenience init?([AnyHashable : Any])","type":"init"},{"title":"Copying a Row","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/copy()","title":"func copy() -> Row","type":"method"},{"title":"Row Informations","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/columnnames","title":"var columnNames: LazyMapCollection<Row, String>","type":"property"},{"path":"\/documentation\/grdb\/row\/containsnonnullvalue","title":"var containsNonNullValue: Bool","type":"property"},{"path":"\/documentation\/grdb\/row\/count-5flaw","title":"let count: Int","type":"property"},{"path":"\/documentation\/grdb\/row\/databasevalues","title":"var databaseValues: LazyMapCollection<Row, DatabaseValue>","type":"property"},{"path":"\/documentation\/grdb\/row\/hascolumn(_:)","title":"func hasColumn(String) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/row\/hasnull(atindex:)","title":"func hasNull(atIndex: Int) -> Bool","type":"method"},{"title":"Accessing Row Values by Int Index","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-9c1fw","title":"subscript(Int) -> (DatabaseValueConvertible)?","type":"subscript"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-3jhwm","title":"subscript<Value>(Int) -> Value","type":"subscript"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-7krrg","title":"subscript<Value>(Int) -> Value","type":"subscript"},{"path":"\/documentation\/grdb\/row\/withunsafedata(atindex:_:)","title":"func withUnsafeData<T>(atIndex: Int, (Data?) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/row\/datanocopy(atindex:)","title":"func dataNoCopy(atIndex: Int) -> Data?","type":"method"},{"title":"Accessing Row Values by Column Name","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-3tp8o","title":"subscript(String) -> (DatabaseValueConvertible)?","type":"subscript"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-4k8od","title":"subscript<Value>(String) -> Value","type":"subscript"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-9rbo7","title":"subscript<Value>(String) -> Value","type":"subscript"},{"path":"\/documentation\/grdb\/row\/withunsafedata(named:_:)","title":"func withUnsafeData<T>(named: String, (Data?) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/row\/datanocopy(named:)","title":"func dataNoCopy(named: String) -> Data?","type":"method"},{"title":"Accessing Row Values by Column","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-9txgm","title":"subscript(some ColumnExpression) -> (DatabaseValueConvertible)?","type":"subscript"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-2esg7","title":"subscript<Value>(some ColumnExpression) -> Value","type":"subscript"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-wl9a","title":"subscript<Value>(some ColumnExpression) -> Value","type":"subscript"},{"path":"\/documentation\/grdb\/row\/withunsafedata(at:_:)","title":"func withUnsafeData<T>(at: some ColumnExpression, (Data?) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/row\/datanocopy(_:)","title":"func dataNoCopy(some ColumnExpression) -> Data?","type":"method"},{"title":"Row Scopes & Associated Rows","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/prefetchedrows","title":"var prefetchedRows: Row.PrefetchedRowsView","type":"property"},{"path":"\/documentation\/grdb\/row\/scopes","title":"var scopes: Row.ScopesView","type":"property"},{"path":"\/documentation\/grdb\/row\/scopestree","title":"var scopesTree: Row.ScopesTreeView","type":"property"},{"path":"\/documentation\/grdb\/row\/unadapted","title":"var unadapted: Row","type":"property"},{"path":"\/documentation\/grdb\/row\/unscoped","title":"var unscoped: Row","type":"property"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-4dx01","title":"subscript<Record>(String) -> Record?","type":"subscript"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-8god3","title":"subscript<Record>(String) -> Record","type":"subscript"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-jwnx","title":"subscript<Records>(String) -> Records","type":"subscript"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-6ge6t","title":"subscript<Record>(String) -> Set<Record>","type":"subscript"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/prefetchedrowsview\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/grdb\/row\/prefetchedrowsview\/keys","title":"var keys: Set<String>","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/prefetchedrowsview\/subscript(_:)","title":"subscript(String) -> [Row]?","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/prefetchedrowsview\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/row\/prefetchedrowsview\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/row\/prefetchedrowsview","title":"Row.PrefetchedRowsView","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/scopestreeview\/names","title":"var names: Set<String>","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/scopestreeview\/subscript(_:)","title":"subscript(String) -> Row?","type":"subscript"}],"path":"\/documentation\/grdb\/row\/scopestreeview","title":"Row.ScopesTreeView","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/scopesview\/names","title":"var names: Dictionary<String, _LayoutedRowAdapter>.Keys","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/scopesview\/subscript(_:)-5jyd1","title":"subscript(String) -> Row?","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/scopesview\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/grdb\/row\/scopesview\/endindex","title":"var endIndex: Row.ScopesView.Index","type":"property"},{"path":"\/documentation\/grdb\/row\/scopesview\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/grdb\/row\/scopesview\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/grdb\/row\/scopesview\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/grdb\/row\/scopesview\/startindex","title":"var startIndex: Row.ScopesView.Index","type":"property"},{"path":"\/documentation\/grdb\/row\/scopesview\/underestimatedcount-5416g","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/scopesview\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/index(after:)","title":"func index(after: Row.ScopesView.Index) -> Row.ScopesView.Index","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/map(_:)-8kfb7","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/scopesview\/subscript(_:)-104f","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/grdb\/row\/scopesview\/subscript(_:)-37fmh","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/grdb\/row\/scopesview\/subscript(_:)-7gwxw","title":"subscript(Row.ScopesView.Index) -> (name: String, row: Row)","type":"subscript"},{"path":"\/documentation\/grdb\/row\/scopesview\/subscript(_:)-9s4i4","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/scopesview\/index","title":"Row.ScopesView.Index","type":"typealias"}],"path":"\/documentation\/grdb\/row\/scopesview\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/scopesview\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/grdb\/row\/scopesview\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/grdb\/row\/scopesview\/underestimatedcount-6n6i9","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/scopesview\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/flatmap(_:)-19vrr","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/flatmap(_:)-2y1sw","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/flatmap(_:)-8dtpg","title":"func flatMap<SegmentOfResult>((Self.Iterator.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<AnyCursor<Self.Iterator.Element>, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/map(_:)-1j0wr","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/sorted(using:)-4510e","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/sorted(using:)-fwz8","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/grdb\/row\/scopesview\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/grdb\/row\/scopesview\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/row\/scopesview","title":"Row.ScopesView","type":"struct"},{"title":"Fetching Rows from Raw SQL","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/fetchcursor(_:sql:arguments:adapter:)","title":"static func fetchCursor(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> RowCursor","type":"method"},{"path":"\/documentation\/grdb\/row\/fetchall(_:sql:arguments:adapter:)","title":"static func fetchAll(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> [Row]","type":"method"},{"path":"\/documentation\/grdb\/row\/fetchset(_:sql:arguments:adapter:)","title":"static func fetchSet(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Set<Row>","type":"method"},{"path":"\/documentation\/grdb\/row\/fetchone(_:sql:arguments:adapter:)","title":"static func fetchOne(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Row?","type":"method"},{"title":"Fetching Rows from a Prepared Statement","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/fetchcursor(_:arguments:adapter:)","title":"static func fetchCursor(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> RowCursor","type":"method"},{"path":"\/documentation\/grdb\/row\/fetchall(_:arguments:adapter:)","title":"static func fetchAll(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> [Row]","type":"method"},{"path":"\/documentation\/grdb\/row\/fetchset(_:arguments:adapter:)","title":"static func fetchSet(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Set<Row>","type":"method"},{"path":"\/documentation\/grdb\/row\/fetchone(_:arguments:adapter:)","title":"static func fetchOne(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Row?","type":"method"},{"title":"Fetching Rows from a Request","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/fetchcursor(_:_:)","title":"static func fetchCursor(Database, some FetchRequest) throws -> RowCursor","type":"method"},{"path":"\/documentation\/grdb\/row\/fetchall(_:_:)","title":"static func fetchAll(Database, some FetchRequest) throws -> [Row]","type":"method"},{"path":"\/documentation\/grdb\/row\/fetchset(_:_:)","title":"static func fetchSet(Database, some FetchRequest) throws -> Set<Row>","type":"method"},{"path":"\/documentation\/grdb\/row\/fetchone(_:_:)","title":"static func fetchOne(Database, some FetchRequest) throws -> Row?","type":"method"},{"title":"Row as RandomAccessCollection","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/count-5flaw","title":"let count: Int","type":"property"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-68yae","title":"subscript(Row.Index) -> (String, DatabaseValue)","type":"subscript"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/index\/'...(_:)-1wju6","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/'...(_:)-8wgfy","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/_(_:_:)-3gc5w","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/_(_:_:)-586tj","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/_(_:_:)-8iyke","title":"static func < (Row.Index, Row.Index) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/_=(_:_:)-839pq","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/_=(_:_:)-iqz3","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/row\/index\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/index\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/==(_:_:)-63cwo","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/==(_:_:)-9vace","title":"static func == (Row.Index, Row.Index) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/row\/index\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/index\/advanced(by:)","title":"func advanced(by: Int) -> Row.Index","type":"method"},{"path":"\/documentation\/grdb\/row\/index\/distance(to:)","title":"func distance(to: Row.Index) -> Int","type":"method"}],"path":"\/documentation\/grdb\/row\/index\/strideable-implementations","title":"Strideable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/row\/index","title":"Row.Index","type":"struct"},{"title":"Adapting Rows","type":"groupMarker"},{"children":[{"title":"Splitting a Row","type":"groupMarker"},{"path":"\/documentation\/grdb\/splittingrowadapters(columncounts:)","title":"func splittingRowAdapters(columnCounts: [Int]) -> [RowAdapter]","type":"func"},{"title":"Built-in Adapters","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/columnmapping\/init(_:)","title":"init([String : String])","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/columnmapping\/addingscopes(_:)","title":"func addingScopes([String : RowAdapter]) -> RowAdapter","type":"method"}],"path":"\/documentation\/grdb\/columnmapping\/rowadapter-implementations","title":"RowAdapter Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/columnmapping","title":"ColumnMapping","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/emptyrowadapter\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/emptyrowadapter\/addingscopes(_:)","title":"func addingScopes([String : RowAdapter]) -> RowAdapter","type":"method"}],"path":"\/documentation\/grdb\/emptyrowadapter\/rowadapter-implementations","title":"RowAdapter Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/emptyrowadapter","title":"EmptyRowAdapter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/rangerowadapter\/init(_:)-24qux","title":"init(CountableRange<Int>)","type":"init"},{"path":"\/documentation\/grdb\/rangerowadapter\/init(_:)-6g4bw","title":"init(CountableClosedRange<Int>)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/rangerowadapter\/addingscopes(_:)","title":"func addingScopes([String : RowAdapter]) -> RowAdapter","type":"method"}],"path":"\/documentation\/grdb\/rangerowadapter\/rowadapter-implementations","title":"RowAdapter Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/rangerowadapter","title":"RangeRowAdapter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/renamecolumnadapter\/init(_:)","title":"init((String) -> String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/renamecolumnadapter\/addingscopes(_:)","title":"func addingScopes([String : RowAdapter]) -> RowAdapter","type":"method"}],"path":"\/documentation\/grdb\/renamecolumnadapter\/rowadapter-implementations","title":"RowAdapter Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/renamecolumnadapter","title":"RenameColumnAdapter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/scopeadapter\/init(_:)","title":"init([String : RowAdapter])","type":"init"},{"path":"\/documentation\/grdb\/scopeadapter\/init(base:scopes:)","title":"init(base: some RowAdapter, scopes: [String : RowAdapter])","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/scopeadapter\/addingscopes(_:)","title":"func addingScopes([String : RowAdapter]) -> RowAdapter","type":"method"}],"path":"\/documentation\/grdb\/scopeadapter\/rowadapter-implementations","title":"RowAdapter Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/scopeadapter","title":"ScopeAdapter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/suffixrowadapter\/init(fromindex:)","title":"init(fromIndex: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/suffixrowadapter\/addingscopes(_:)","title":"func addingScopes([String : RowAdapter]) -> RowAdapter","type":"method"}],"path":"\/documentation\/grdb\/suffixrowadapter\/rowadapter-implementations","title":"RowAdapter Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/suffixrowadapter","title":"SuffixRowAdapter","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/rowadapter\/addingscopes(_:)","title":"func addingScopes([String : RowAdapter]) -> RowAdapter","type":"method"}],"path":"\/documentation\/grdb\/rowadapter","title":"RowAdapter","type":"protocol"},{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/rowcursor\/element","title":"RowCursor.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/rowcursor\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/rowcursor\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/contains(_:)","title":"func contains(Self.Element) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) -> DropWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/dropfirst()","title":"func dropFirst() -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/droplast()","title":"func dropLast() throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/droplast(_:)","title":"func dropLast(Int) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/enumerated()","title":"func enumerated() -> EnumeratedCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) -> FilterCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/flatmap(_:)-31x2l","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/flatmap(_:)-4gybv","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/joined()","title":"func joined() -> FlattenCursor<MapCursor<Self, AnyCursor<Self.Element.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/map(_:)","title":"func map<T>((Self.Element) throws -> T) -> MapCursor<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/next()","title":"func next() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/prefix(_:)","title":"func prefix(Int) -> PrefixCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) -> PrefixWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> Void) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/rowcursor\/suffix(_:)","title":"func suffix(Int) throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/grdb\/rowcursor\/cursor-implementations","title":"Cursor Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/rowcursor\/arguments","title":"var arguments: StatementArguments","type":"property"},{"path":"\/documentation\/grdb\/rowcursor\/columncount","title":"var columnCount: Int","type":"property"},{"path":"\/documentation\/grdb\/rowcursor\/columnnames","title":"var columnNames: [String]","type":"property"},{"path":"\/documentation\/grdb\/rowcursor\/databaseregion","title":"var databaseRegion: DatabaseRegion","type":"property"},{"path":"\/documentation\/grdb\/rowcursor\/sql","title":"var sql: String","type":"property"}],"path":"\/documentation\/grdb\/rowcursor\/databasecursor-implementations","title":"DatabaseCursor Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/rowcursor","title":"RowCursor","type":"class"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/grdb\/row\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/grdb\/row\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/row\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/grdb\/row\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/grdb\/row\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/grdb\/row\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/count-73h3i","title":"var count: Int","type":"property"},{"path":"\/documentation\/grdb\/row\/endindex","title":"var endIndex: Row.Index","type":"property"},{"path":"\/documentation\/grdb\/row\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/grdb\/row\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/grdb\/row\/startindex","title":"var startIndex: Row.Index","type":"property"},{"path":"\/documentation\/grdb\/row\/underestimatedcount-9fek9","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/grdb\/row\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/grdb\/row\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/row\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/grdb\/row\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/grdb\/row\/map(_:)-1rl81","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/grdb\/row\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/row\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/row\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/grdb\/row\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/grdb\/row\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-4ituo","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-5wj08","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-5ybfe","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/grdb\/row\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/grdb\/row\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/grdb\/row\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/row\/==(_:_:)","title":"static func == (Row, Row) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/row\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/init(dictionaryliteral:)","title":"convenience init(dictionaryLiteral: (String, (DatabaseValueConvertible)?)...)","type":"init"}],"path":"\/documentation\/grdb\/row\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/grdb\/row\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/index\/'...(_:)-1wju6","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/'...(_:)-8wgfy","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/_(_:_:)-3gc5w","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/_(_:_:)-586tj","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/_(_:_:)-8iyke","title":"static func < (Row.Index, Row.Index) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/_=(_:_:)-839pq","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/_=(_:_:)-iqz3","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/row\/index\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/index\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/==(_:_:)-63cwo","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/row\/index\/==(_:_:)-9vace","title":"static func == (Row.Index, Row.Index) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/row\/index\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/index\/advanced(by:)","title":"func advanced(by: Int) -> Row.Index","type":"method"},{"path":"\/documentation\/grdb\/row\/index\/distance(to:)","title":"func distance(to: Row.Index) -> Int","type":"method"}],"path":"\/documentation\/grdb\/row\/index\/strideable-implementations","title":"Strideable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/row\/index","title":"Row.Index","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/subscript(_:)-68yae","title":"subscript(Row.Index) -> (String, DatabaseValue)","type":"subscript"}],"path":"\/documentation\/grdb\/row\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/grdb\/row\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/grdb\/row\/underestimatedcount-1au6n","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/row\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/grdb\/row\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/grdb\/row\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/grdb\/row\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/grdb\/row\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/grdb\/row\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/grdb\/row\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/row\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/row\/flatmap(_:)-3er8o","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/grdb\/row\/flatmap(_:)-3vdxj","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/grdb\/row\/flatmap(_:)-7pj2w","title":"func flatMap<SegmentOfResult>((Self.Iterator.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<AnyCursor<Self.Iterator.Element>, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/row\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/grdb\/row\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/grdb\/row\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/grdb\/row\/map(_:)-4pqbe","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/grdb\/row\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/row\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/row\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/grdb\/row\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/grdb\/row\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/row\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/row\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/row\/sorted(using:)-1p122","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/row\/sorted(using:)-1vf0f","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/row\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/grdb\/row\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/grdb\/row\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/row","title":"Row","type":"class"},{"children":[{"title":"Creating a DatabaseValue","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/init(value:)","title":"init?(value: Any)","type":"init"},{"path":"\/documentation\/grdb\/databasevalue\/null","title":"static let null: DatabaseValue","type":"property"},{"title":"Accessing the SQLite storage","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/grdb\/databasevalue\/storage-swift.property","title":"let storage: DatabaseValue.Storage","type":"property"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/storage-swift.enum\/blob(_:)","title":"case blob(Data)","type":"case"},{"path":"\/documentation\/grdb\/databasevalue\/storage-swift.enum\/double(_:)","title":"case double(Double)","type":"case"},{"path":"\/documentation\/grdb\/databasevalue\/storage-swift.enum\/int64(_:)","title":"case int64(Int64)","type":"case"},{"path":"\/documentation\/grdb\/databasevalue\/storage-swift.enum\/null","title":"case null","type":"case"},{"path":"\/documentation\/grdb\/databasevalue\/storage-swift.enum\/string(_:)","title":"case string(String)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/storage-swift.enum\/value","title":"var value: (DatabaseValueConvertible)?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/storage-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/storage-swift.enum\/==(_:_:)","title":"static func == (DatabaseValue.Storage, DatabaseValue.Storage) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/databasevalue\/storage-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasevalue\/storage-swift.enum","title":"DatabaseValue.Storage","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/grdb\/databasevalue\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/databasevalue","title":"var databaseValue: DatabaseValue","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/fetchall(_:_:)","title":"static func fetchAll(Database, some FetchRequest) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/fetchall(_:arguments:adapter:)","title":"static func fetchAll(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/fetchall(_:sql:arguments:adapter:)","title":"static func fetchAll(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/fetchcursor(_:_:)","title":"static func fetchCursor(Database, some FetchRequest) throws -> DatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/fetchcursor(_:arguments:adapter:)","title":"static func fetchCursor(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> DatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/fetchcursor(_:sql:arguments:adapter:)","title":"static func fetchCursor(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> DatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/fetchone(_:_:)","title":"static func fetchOne(Database, some FetchRequest) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/fetchone(_:arguments:adapter:)","title":"static func fetchOne(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/fetchone(_:sql:arguments:adapter:)","title":"static func fetchOne(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/fetchset(_:_:)","title":"static func fetchSet(Database, some FetchRequest) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/fetchset(_:arguments:adapter:)","title":"static func fetchSet(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/fetchset(_:sql:arguments:adapter:)","title":"static func fetchSet(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/fromdatabasevalue(_:)","title":"static func fromDatabaseValue(DatabaseValue) -> DatabaseValue?","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/frommissingcolumn()","title":"static func fromMissingColumn() -> Self?","type":"method"}],"path":"\/documentation\/grdb\/databasevalue\/databasevalueconvertible-implementations","title":"DatabaseValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/!=(_:_:)-205na","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/==(_:_:)-4zs44","title":"static func == (DatabaseValue, DatabaseValue) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/databasevalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/grdb\/databasevalue\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/sqlexpression-7aett","title":"var sqlExpression: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/databasevalue\/sqlexpression-7le4v","title":"var sqlExpression: SQLExpression","type":"property"}],"path":"\/documentation\/grdb\/databasevalue\/sqlexpressible-implementations","title":"SQLExpressible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/sqlordering","title":"var sqlOrdering: SQLOrdering","type":"property"}],"path":"\/documentation\/grdb\/databasevalue\/sqlorderingterm-implementations","title":"SQLOrderingTerm Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/sqlselection","title":"var sqlSelection: SQLSelection","type":"property"}],"path":"\/documentation\/grdb\/databasevalue\/sqlselectable-implementations","title":"SQLSelectable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/!(_:)","title":"static func ! (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/!=(_:_:)-1748n","title":"static func != (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/!=(_:_:)-4unmj","title":"static func != (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/!=(_:_:)-6w5sg","title":"static func != ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/!=(_:_:)-8v1bo","title":"static func != (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/!=(_:_:)-ohi3","title":"static func != (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/!==(_:_:)-2tdcu","title":"static func !== ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/!==(_:_:)-48emk","title":"static func !== (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/!==(_:_:)-77rru","title":"static func !== (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/&&(_:_:)-59y2l","title":"static func && (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/&&(_:_:)-9md75","title":"static func && (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/&&(_:_:)-joo7","title":"static func && (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/*(_:_:)-2c90q","title":"static func * (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/*(_:_:)-2dxd6","title":"static func * (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/*(_:_:)-6ndvi","title":"static func * (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/+(_:_:)-1lndy","title":"static func + (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/+(_:_:)-38olq","title":"static func + (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/+(_:_:)-3w78r","title":"static func + (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/-(_:)","title":"static func - (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/-(_:_:)-3xmlg","title":"static func - (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/-(_:_:)-775u","title":"static func - (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/-(_:_:)-8vbel","title":"static func - (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/\/(_:_:)-1y5sk","title":"static func \/ (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/\/(_:_:)-6yufy","title":"static func \/ (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/\/(_:_:)-7xo4h","title":"static func \/ (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/==(_:_:)-1qies","title":"static func == (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/==(_:_:)-58hey","title":"static func == (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/==(_:_:)-6ku91","title":"static func == ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/==(_:_:)-7jryq","title":"static func == (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/==(_:_:)-9kwq1","title":"static func == (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/===(_:_:)-2f5zq","title":"static func === (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/===(_:_:)-3hma6","title":"static func === ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/===(_:_:)-3rhe0","title":"static func === (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/_(_:_:)-2wjxh","title":"static func > (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/_(_:_:)-4km22","title":"static func < (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/_(_:_:)-6zq4x","title":"static func < (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/_(_:_:)-7pr83","title":"static func > (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/_(_:_:)-8knlm","title":"static func < (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/_(_:_:)-xtso","title":"static func > (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/_=(_:_:)-31pxc","title":"static func <= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/_=(_:_:)-47tt9","title":"static func <= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/_=(_:_:)-49sx2","title":"static func >= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/_=(_:_:)-4s1zf","title":"static func >= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/_=(_:_:)-5um67","title":"static func >= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/_=(_:_:)-8kkrr","title":"static func <= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/__(_:_:)-25x8r","title":"static func || (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/__(_:_:)-2wia9","title":"static func ?? (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/__(_:_:)-4gn63","title":"static func || (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/databasevalue\/__(_:_:)-4htnn","title":"static func || (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/asc","title":"var asc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/databasevalue\/ascnullslast","title":"var ascNullsLast: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/databasevalue\/capitalized","title":"var capitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/databasevalue\/desc","title":"var desc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/databasevalue\/descnullsfirst","title":"var descNullsFirst: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/databasevalue\/localizedcapitalized","title":"var localizedCapitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/databasevalue\/localizedlowercased","title":"var localizedLowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/databasevalue\/localizeduppercased","title":"var localizedUppercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/databasevalue\/lowercased","title":"var lowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/databasevalue\/uppercased","title":"var uppercased: SQLExpression","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/collating(_:)-5nudm","title":"func collating(Database.CollationName) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/collating(_:)-9br9r","title":"func collating(DatabaseCollation) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/forkey(_:)","title":"func forKey(String) -> SQLSelection","type":"method"},{"path":"\/documentation\/grdb\/databasevalue\/like(_:escape:)","title":"func like(some SQLExpressible, escape: (SQLExpressible)?) -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/databasevalue\/sqlspecificexpressible-implementations","title":"SQLSpecificExpressible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalue\/bind(to:at:)","title":"func bind(to: SQLiteStatement, at: CInt) -> CInt","type":"method"}],"path":"\/documentation\/grdb\/databasevalue\/statementbinding-implementations","title":"StatementBinding Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasevalue","title":"DatabaseValue","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasecursor\/arguments","title":"var arguments: StatementArguments","type":"property"},{"path":"\/documentation\/grdb\/databasecursor\/columncount","title":"var columnCount: Int","type":"property"},{"path":"\/documentation\/grdb\/databasecursor\/columnnames","title":"var columnNames: [String]","type":"property"},{"path":"\/documentation\/grdb\/databasecursor\/databaseregion","title":"var databaseRegion: DatabaseRegion","type":"property"},{"path":"\/documentation\/grdb\/databasecursor\/sql","title":"var sql: String","type":"property"}],"path":"\/documentation\/grdb\/databasecursor","title":"DatabaseCursor","type":"protocol"},{"title":"SQL Literals and Requests","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasequestionmarks(count:)","title":"func databaseQuestionMarks(count: Int) -> String","type":"func"},{"children":[{"title":"Creating an SQL Literal from a Literal Value","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"path":"\/documentation\/grdb\/sql\/init(unicodescalarliteral:)-7p0al","title":"init(unicodeScalarLiteral: String)","type":"init"},{"path":"\/documentation\/grdb\/sql\/init(extendedgraphemeclusterliteral:)-1oham","title":"init(extendedGraphemeClusterLiteral: String)","type":"init"},{"title":"Creating an SQL Literal from an Interpolation","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/init(stringinterpolation:)","title":"init(stringInterpolation: SQLInterpolation)","type":"init"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlinterpolation\/init(literalcapacity:interpolationcount:)","title":"init(literalCapacity: Int, interpolationCount: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-10nsv","title":"func appendInterpolation((SQLSelectable)?)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-15c21","title":"func appendInterpolation<S>(S)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-1gt2s","title":"func appendInterpolation(DatabaseCollation)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-1qdgp","title":"func appendInterpolation(Database.CollationName)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-1ruz1","title":"func appendInterpolation(SQLOrderingTerm)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-3ikkh","title":"func appendInterpolation(some SQLOrderingTerm)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-3rfeo","title":"func appendInterpolation(some SQLSelectable)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-3xsut","title":"func appendInterpolation<S>(S)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-44wpl","title":"func appendInterpolation(TableRecord.Type)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-4qwko","title":"func appendInterpolation(SQL)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-58myo","title":"func appendInterpolation((SQLExpressible)?)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-5t8vy","title":"func appendInterpolation(some SQLSubqueryable)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-61b8s","title":"func appendInterpolation(some CodingKey)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-69037","title":"func appendInterpolation((some TableRecord).Type)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-790jm","title":"func appendInterpolation(CommonTableExpression<some Any>)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-791m8","title":"func appendInterpolation(CodingKey)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-7n2an","title":"func appendInterpolation(some SQLExpressible & SQLOrderingTerm & SQLSelectable)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-8dszx","title":"func appendInterpolation<S>(S)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-92kw7","title":"func appendInterpolation(some SQLExpressible & SQLOrderingTerm & SQLSelectable & CodingKey)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(_:)-9mcge","title":"func appendInterpolation<S>(S)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(columnsof:tablealias:)","title":"func appendInterpolation(columnsOf: (some TableRecord).Type, tableAlias: String?)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(definitionfor:)","title":"func appendInterpolation(definitionFor: CommonTableExpression<some Any>)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(literal:)","title":"func appendInterpolation(literal: SQL)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(sql:arguments:)","title":"func appendInterpolation(sql: String, arguments: StatementArguments)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(tableof:)-4n2n3","title":"func appendInterpolation(tableOf: TableRecord)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendinterpolation(tableof:)-ms13","title":"func appendInterpolation(tableOf: some TableRecord)","type":"method"},{"path":"\/documentation\/grdb\/sqlinterpolation\/appendliteral(_:)","title":"func appendLiteral(String)","type":"method"}],"path":"\/documentation\/grdb\/sqlinterpolation","title":"SQLInterpolation","type":"struct"},{"title":"Creating an SQL Literal from an SQL String","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/init(sql:arguments:)","title":"init(sql: String, arguments: StatementArguments)","type":"init"},{"title":"Creating an SQL Literal from an SQL Expression","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/init(_:)","title":"init(some SQLSpecificExpressible)","type":"init"},{"title":"Concatenating SQL Literals","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/append(literal:)","title":"func append(literal: SQL)","type":"method"},{"path":"\/documentation\/grdb\/sql\/append(sql:arguments:)","title":"func append(sql: String, arguments: StatementArguments)","type":"method"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/+(_:_:)-26lt3","title":"static func + (SQL, SQL) -> SQL","type":"op"},{"path":"\/documentation\/grdb\/sql\/+=(_:_:)","title":"static func += (inout SQL, SQL)","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/build(_:)","title":"func build(Database) throws -> (sql: String, arguments: StatementArguments)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/init(extendedgraphemeclusterliteral:)-1oham","title":"init(extendedGraphemeClusterLiteral: String)","type":"init"},{"path":"\/documentation\/grdb\/sql\/init(extendedgraphemeclusterliteral:)-76yve","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/grdb\/sql\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/init(stringinterpolation:)","title":"init(stringInterpolation: SQLInterpolation)","type":"init"}],"path":"\/documentation\/grdb\/sql\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/grdb\/sql\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/init(unicodescalarliteral:)-7p0al","title":"init(unicodeScalarLiteral: String)","type":"init"},{"path":"\/documentation\/grdb\/sql\/init(unicodescalarliteral:)-7pkv1","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/grdb\/sql\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/sqlexpression","title":"var sqlExpression: SQLExpression","type":"property"}],"path":"\/documentation\/grdb\/sql\/sqlexpressible-implementations","title":"SQLExpressible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/sqlordering-7f2ja","title":"var sqlOrdering: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sql\/sqlordering-964sk","title":"var sqlOrdering: SQLOrdering","type":"property"}],"path":"\/documentation\/grdb\/sql\/sqlorderingterm-implementations","title":"SQLOrderingTerm Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/sqlselection-1q46s","title":"var sqlSelection: SQLSelection","type":"property"},{"path":"\/documentation\/grdb\/sql\/sqlselection-7g8a","title":"var sqlSelection: SQLSelection","type":"property"}],"path":"\/documentation\/grdb\/sql\/sqlselectable-implementations","title":"SQLSelectable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/!(_:)","title":"static func ! (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/!=(_:_:)-17ect","title":"static func != (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/!=(_:_:)-1hy68","title":"static func != (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/!=(_:_:)-2r03i","title":"static func != ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/!=(_:_:)-8spoc","title":"static func != (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/!=(_:_:)-mvhv","title":"static func != (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/!==(_:_:)-5henq","title":"static func !== ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/!==(_:_:)-7xqlo","title":"static func !== (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/!==(_:_:)-d3nx","title":"static func !== (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/&&(_:_:)-6vcec","title":"static func && (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/&&(_:_:)-8cfrr","title":"static func && (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/&&(_:_:)-9gshz","title":"static func && (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/*(_:_:)-4qm5o","title":"static func * (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/*(_:_:)-5bhdp","title":"static func * (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/*(_:_:)-88ber","title":"static func * (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/+(_:_:)-1v23l","title":"static func + (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/+(_:_:)-3gtmf","title":"static func + (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/+(_:_:)-h3oi","title":"static func + (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/-(_:)","title":"static func - (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/-(_:_:)-75uck","title":"static func - (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/-(_:_:)-7aytu","title":"static func - (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/-(_:_:)-7up9n","title":"static func - (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/\/(_:_:)-2s8jt","title":"static func \/ (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/\/(_:_:)-9a3nh","title":"static func \/ (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/\/(_:_:)-ldu3","title":"static func \/ (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/==(_:_:)-15yq7","title":"static func == (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/==(_:_:)-2kcvc","title":"static func == (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/==(_:_:)-51a6s","title":"static func == ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/==(_:_:)-6q1y5","title":"static func == (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/==(_:_:)-8lnoy","title":"static func == (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/===(_:_:)-4uuzp","title":"static func === ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/===(_:_:)-5jtod","title":"static func === (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/===(_:_:)-6ugcg","title":"static func === (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/_(_:_:)-3964y","title":"static func < (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/_(_:_:)-5ijop","title":"static func > (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/_(_:_:)-79o1n","title":"static func > (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/_(_:_:)-7bmlu","title":"static func > (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/_(_:_:)-7g2sq","title":"static func < (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/_(_:_:)-9s4ms","title":"static func < (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/_=(_:_:)-2nc0u","title":"static func >= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/_=(_:_:)-48jb","title":"static func >= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/_=(_:_:)-59je4","title":"static func >= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/_=(_:_:)-7gk8","title":"static func <= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/_=(_:_:)-7t940","title":"static func <= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/_=(_:_:)-8a0pt","title":"static func <= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/__(_:_:)-2qm25","title":"static func || (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/__(_:_:)-734r5","title":"static func ?? (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/__(_:_:)-850ns","title":"static func || (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sql\/__(_:_:)-9wum3","title":"static func || (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/asc","title":"var asc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sql\/ascnullslast","title":"var ascNullsLast: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sql\/capitalized","title":"var capitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sql\/desc","title":"var desc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sql\/descnullsfirst","title":"var descNullsFirst: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sql\/localizedcapitalized","title":"var localizedCapitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sql\/localizedlowercased","title":"var localizedLowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sql\/localizeduppercased","title":"var localizedUppercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sql\/lowercased","title":"var lowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sql\/uppercased","title":"var uppercased: SQLExpression","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/sql\/collating(_:)-7iswh","title":"func collating(Database.CollationName) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/sql\/collating(_:)-uvlo","title":"func collating(DatabaseCollation) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/sql\/forkey(_:)","title":"func forKey(String) -> SQLSelection","type":"method"},{"path":"\/documentation\/grdb\/sql\/like(_:escape:)","title":"func like(some SQLExpressible, escape: (SQLExpressible)?) -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/sql\/sqlspecificexpressible-implementations","title":"SQLSpecificExpressible Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/sql","title":"SQL","type":"struct"},{"children":[{"title":"Creating an SQL Request from a Literal Value","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"path":"\/documentation\/grdb\/sqlrequest\/init(unicodescalarliteral:)-84mq8","title":"init(unicodeScalarLiteral: String)","type":"init"},{"path":"\/documentation\/grdb\/sqlrequest\/init(extendedgraphemeclusterliteral:)-1sf75","title":"init(extendedGraphemeClusterLiteral: String)","type":"init"},{"title":"Creating an SQL Request from an Interpolation","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/init(stringinterpolation:)","title":"init(stringInterpolation: SQLInterpolation)","type":"init"},{"title":"Creating an SQL Request from an SQL Literal","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/init(literal:adapter:cached:)-4vuxn","title":"init(literal: SQL, adapter: (RowAdapter)?, cached: Bool)","type":"init"},{"path":"\/documentation\/grdb\/sqlrequest\/init(literal:adapter:cached:)-82f97","title":"init(literal: SQL, adapter: (RowAdapter)?, cached: Bool)","type":"init"},{"title":"Creating an SQL Request from an SQL String","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/init(sql:arguments:adapter:cached:)-3qq8t","title":"init(sql: String, arguments: StatementArguments, adapter: (RowAdapter)?, cached: Bool)","type":"init"},{"path":"\/documentation\/grdb\/sqlrequest\/init(sql:arguments:adapter:cached:)-5ecx2","title":"init(sql: String, arguments: StatementArguments, adapter: (RowAdapter)?, cached: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/adapter","title":"var adapter: (RowAdapter)?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/init(extendedgraphemeclusterliteral:)-1sf75","title":"init(extendedGraphemeClusterLiteral: String)","type":"init"},{"path":"\/documentation\/grdb\/sqlrequest\/init(extendedgraphemeclusterliteral:)-7mroi","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/grdb\/sqlrequest\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/init(stringinterpolation:)","title":"init(stringInterpolation: SQLInterpolation)","type":"init"}],"path":"\/documentation\/grdb\/sqlrequest\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/grdb\/sqlrequest\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/init(unicodescalarliteral:)-17xe7","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"},{"path":"\/documentation\/grdb\/sqlrequest\/init(unicodescalarliteral:)-84mq8","title":"init(unicodeScalarLiteral: String)","type":"init"}],"path":"\/documentation\/grdb\/sqlrequest\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/adapted(_:)","title":"func adapted((Database) throws -> RowAdapter) -> AdaptedFetchRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/databaseregion(_:)","title":"func databaseRegion(Database) throws -> DatabaseRegion","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchall(_:)-5cjc8","title":"func fetchAll(Database) throws -> [Self.RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchall(_:)-951rq","title":"func fetchAll(Database) throws -> [Row]","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchall(_:)-9lwzc","title":"func fetchAll(Database) throws -> [Self.RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchall(_:)-9wek5","title":"func fetchAll(Database) throws -> [Self.RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchcount(_:)","title":"func fetchCount(Database) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchcursor(_:)-5bdiw","title":"func fetchCursor(Database) throws -> FastDatabaseValueCursor<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchcursor(_:)-6b412","title":"func fetchCursor(Database) throws -> RowCursor","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchcursor(_:)-99e5t","title":"func fetchCursor(Database) throws -> RecordCursor<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchcursor(_:)-9wq5y","title":"func fetchCursor(Database) throws -> DatabaseValueCursor<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchone(_:)-4iq4b","title":"func fetchOne(Database) throws -> Self.RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchone(_:)-5wnlu","title":"func fetchOne(Database) throws -> Self.RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchone(_:)-8dq75","title":"func fetchOne(Database) throws -> Row?","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchone(_:)-95093","title":"func fetchOne(Database) throws -> Self.RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchset(_:)-2h6mv","title":"func fetchSet(Database) throws -> Set<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchset(_:)-2qwa5","title":"func fetchSet(Database) throws -> Set<Row>","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchset(_:)-3nywd","title":"func fetchSet(Database) throws -> Set<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/fetchset(_:)-4hdu6","title":"func fetchSet(Database) throws -> Set<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/makepreparedrequest(_:forsingleresult:)","title":"func makePreparedRequest(Database, forSingleResult: Bool) throws -> PreparedRequest","type":"method"}],"path":"\/documentation\/grdb\/sqlrequest\/fetchrequest-implementations","title":"FetchRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/sqlordering","title":"var sqlOrdering: SQLOrdering","type":"property"}],"path":"\/documentation\/grdb\/sqlrequest\/sqlorderingterm-implementations","title":"SQLOrderingTerm Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/sqlselection","title":"var sqlSelection: SQLSelection","type":"property"}],"path":"\/documentation\/grdb\/sqlrequest\/sqlselectable-implementations","title":"SQLSelectable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/!(_:)","title":"static func ! (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/!=(_:_:)-2jx4y","title":"static func != (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/!=(_:_:)-3dbi5","title":"static func != ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/!=(_:_:)-56ivn","title":"static func != (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/!=(_:_:)-6iffw","title":"static func != (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/!=(_:_:)-k31x","title":"static func != (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/!==(_:_:)-1b9zc","title":"static func !== (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/!==(_:_:)-35dkh","title":"static func !== (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/!==(_:_:)-3ztki","title":"static func !== ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/&&(_:_:)-6b1ug","title":"static func && (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/&&(_:_:)-98dfe","title":"static func && (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/&&(_:_:)-be7b","title":"static func && (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/*(_:_:)-60jhm","title":"static func * (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/*(_:_:)-61h6l","title":"static func * (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/*(_:_:)-8q1fs","title":"static func * (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/+(_:_:)-42b3l","title":"static func + (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/+(_:_:)-4a1uv","title":"static func + (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/+(_:_:)-9qy5o","title":"static func + (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/-(_:)","title":"static func - (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/-(_:_:)-5o8c5","title":"static func - (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/-(_:_:)-78br9","title":"static func - (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/-(_:_:)-8xboj","title":"static func - (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/\/(_:_:)-74y1s","title":"static func \/ (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/\/(_:_:)-7k6pp","title":"static func \/ (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/\/(_:_:)-c0lc","title":"static func \/ (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/==(_:_:)-3rhpj","title":"static func == (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/==(_:_:)-6k00e","title":"static func == ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/==(_:_:)-8bmcd","title":"static func == (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/==(_:_:)-8k4kr","title":"static func == (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/==(_:_:)-8vamp","title":"static func == (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/===(_:_:)-4zzy9","title":"static func === ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/===(_:_:)-50ptn","title":"static func === (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/===(_:_:)-9wsrj","title":"static func === (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/_(_:_:)-597g3","title":"static func > (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/_(_:_:)-6fnjq","title":"static func > (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/_(_:_:)-6rzrm","title":"static func > (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/_(_:_:)-86wij","title":"static func < (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/_(_:_:)-8uifc","title":"static func < (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/_(_:_:)-945ss","title":"static func < (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/_=(_:_:)-2y5ka","title":"static func >= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/_=(_:_:)-3ai1j","title":"static func <= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/_=(_:_:)-4pvl4","title":"static func <= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/_=(_:_:)-9li3v","title":"static func >= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/_=(_:_:)-9s4wo","title":"static func <= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/_=(_:_:)-zf7o","title":"static func >= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/__(_:_:)-3ozcy","title":"static func ?? (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/__(_:_:)-91fhy","title":"static func || (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/__(_:_:)-9vno1","title":"static func || (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlrequest\/__(_:_:)-eisr","title":"static func || (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/asc","title":"var asc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqlrequest\/ascnullslast","title":"var ascNullsLast: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqlrequest\/capitalized","title":"var capitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlrequest\/desc","title":"var desc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqlrequest\/descnullsfirst","title":"var descNullsFirst: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqlrequest\/localizedcapitalized","title":"var localizedCapitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlrequest\/localizedlowercased","title":"var localizedLowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlrequest\/localizeduppercased","title":"var localizedUppercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlrequest\/lowercased","title":"var lowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlrequest\/uppercased","title":"var uppercased: SQLExpression","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/collating(_:)-6qn9u","title":"func collating(Database.CollationName) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/collating(_:)-9q3kv","title":"func collating(DatabaseCollation) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/forkey(_:)","title":"func forKey(String) -> SQLSelection","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/like(_:escape:)","title":"func like(some SQLExpressible, escape: (SQLExpressible)?) -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/sqlrequest\/sqlspecificexpressible-implementations","title":"SQLSpecificExpressible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/sqlexpression","title":"var sqlExpression: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlrequest\/sqlsubquery","title":"var sqlSubquery: SQLSubquery","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlrequest\/contains(_:)","title":"func contains(some SQLExpressible) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/sqlrequest\/exists()","title":"func exists() -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/sqlrequest\/sqlsubqueryable-implementations","title":"SQLSubqueryable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/sqlrequest","title":"SQLRequest","type":"struct"},{"title":"Database Values","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatecomponents\/init(_:format:)","title":"init(DateComponents, format: DatabaseDateComponents.Format)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatecomponents\/datecomponents","title":"let dateComponents: DateComponents","type":"property"},{"path":"\/documentation\/grdb\/databasedatecomponents\/format-swift.property","title":"let format: DatabaseDateComponents.Format","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatecomponents\/format-swift.enum\/hm","title":"case HM","type":"case"},{"path":"\/documentation\/grdb\/databasedatecomponents\/format-swift.enum\/hms","title":"case HMS","type":"case"},{"path":"\/documentation\/grdb\/databasedatecomponents\/format-swift.enum\/hmss","title":"case HMSS","type":"case"},{"path":"\/documentation\/grdb\/databasedatecomponents\/format-swift.enum\/ymd","title":"case YMD","type":"case"},{"path":"\/documentation\/grdb\/databasedatecomponents\/format-swift.enum\/ymd_hm","title":"case YMD_HM","type":"case"},{"path":"\/documentation\/grdb\/databasedatecomponents\/format-swift.enum\/ymd_hms","title":"case YMD_HMS","type":"case"},{"path":"\/documentation\/grdb\/databasedatecomponents\/format-swift.enum\/ymd_hmss","title":"case YMD_HMSS","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatecomponents\/format-swift.enum\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatecomponents\/format-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/databasedatecomponents\/format-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatecomponents\/format-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatecomponents\/format-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/grdb\/databasedatecomponents\/format-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasedatecomponents\/format-swift.enum","title":"DatabaseDateComponents.Format","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatecomponents\/databasevalue-9cvdu","title":"var databaseValue: DatabaseValue","type":"property"},{"path":"\/documentation\/grdb\/databasedatecomponents\/databasevalue-9jghz","title":"var databaseValue: DatabaseValue","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchall(_:_:)-21c20","title":"static func fetchAll(Database, some FetchRequest) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchall(_:_:)-3u4sw","title":"static func fetchAll(Database, some FetchRequest) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchall(_:arguments:adapter:)-55jmd","title":"static func fetchAll(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchall(_:arguments:adapter:)-j0cv","title":"static func fetchAll(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchall(_:sql:arguments:adapter:)-65sg7","title":"static func fetchAll(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchall(_:sql:arguments:adapter:)-73b0e","title":"static func fetchAll(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchcursor(_:_:)-3wazg","title":"static func fetchCursor(Database, some FetchRequest) throws -> DatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchcursor(_:_:)-lll4","title":"static func fetchCursor(Database, some FetchRequest) throws -> FastDatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchcursor(_:arguments:adapter:)-4xcix","title":"static func fetchCursor(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> FastDatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchcursor(_:arguments:adapter:)-6i2mm","title":"static func fetchCursor(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> DatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchcursor(_:sql:arguments:adapter:)-3ja10","title":"static func fetchCursor(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> DatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchcursor(_:sql:arguments:adapter:)-3xzqf","title":"static func fetchCursor(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> FastDatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchone(_:_:)-7q35q","title":"static func fetchOne(Database, some FetchRequest) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchone(_:_:)-9byie","title":"static func fetchOne(Database, some FetchRequest) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchone(_:arguments:adapter:)-36rwu","title":"static func fetchOne(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchone(_:arguments:adapter:)-5h6rx","title":"static func fetchOne(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchone(_:sql:arguments:adapter:)-1e29j","title":"static func fetchOne(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fetchone(_:sql:arguments:adapter:)-8ymho","title":"static func fetchOne(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fromdatabasevalue(_:)-1fx9l","title":"static func fromDatabaseValue(DatabaseValue) -> Self?","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fromdatabasevalue(_:)-78nnt","title":"static func fromDatabaseValue(DatabaseValue) -> DatabaseDateComponents?","type":"method"},{"path":"\/documentation\/grdb\/databasedatecomponents\/frommissingcolumn()","title":"static func fromMissingColumn() -> Self?","type":"method"}],"path":"\/documentation\/grdb\/databasedatecomponents\/databasevalueconvertible-implementations","title":"DatabaseValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatecomponents\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/grdb\/databasedatecomponents\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatecomponents\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/grdb\/databasedatecomponents\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatecomponents\/sqlexpression","title":"var sqlExpression: SQLExpression","type":"property"}],"path":"\/documentation\/grdb\/databasedatecomponents\/sqlexpressible-implementations","title":"SQLExpressible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatecomponents\/bind(to:at:)","title":"func bind(to: SQLiteStatement, at: CInt) -> CInt","type":"method"}],"path":"\/documentation\/grdb\/databasedatecomponents\/statementbinding-implementations","title":"StatementBinding Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatecomponents\/init(sqlitestatement:index:)","title":"init?(sqliteStatement: SQLiteStatement, index: CInt)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatecomponents\/fromstatement(_:atuncheckedindex:)","title":"static func fromStatement(SQLiteStatement, atUncheckedIndex: CInt) -> Self?","type":"method"}],"path":"\/documentation\/grdb\/databasedatecomponents\/statementcolumnconvertible-implementations","title":"StatementColumnConvertible Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasedatecomponents","title":"DatabaseDateComponents","type":"struct"},{"children":[{"title":"Creating a Value","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/databasevalueconvertible\/fromdatabasevalue(_:)-1p6so","title":"static func fromDatabaseValue(DatabaseValue) -> Self?","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fromdatabasevalue(_:)-78al5","title":"static func fromDatabaseValue(DatabaseValue) -> Self?","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fromdatabasevalue(_:)-7f4hg","title":"static func fromDatabaseValue(DatabaseValue) -> Self?","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fromdatabasevalue(_:)-2biqe","title":"static func fromDatabaseValue(DatabaseValue) -> Self?","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fromdatabasevalue(_:)-4id0u","title":"static func fromDatabaseValue(DatabaseValue) -> Self?","type":"method"}],"title":"DatabaseValueConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/databasevalueconvertible\/fromdatabasevalue(_:)-21zzv","title":"static func fromDatabaseValue(DatabaseValue) -> Self?","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/databasevalueconvertible\/frommissingcolumn()-90xk8","title":"static func fromMissingColumn() -> Self?","type":"method"}],"title":"DatabaseValueConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/databasevalueconvertible\/frommissingcolumn()-7iamp","title":"static func fromMissingColumn() -> Self?","type":"method"},{"title":"Accessing the DatabaseValue","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/databasevalueconvertible\/databasevalue-9rn5o","title":"var databaseValue: DatabaseValue","type":"property"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/databasevalue-9g8yr","title":"var databaseValue: DatabaseValue","type":"property"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/databasevalue-50wqe","title":"var databaseValue: DatabaseValue","type":"property"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/databasevalue-56av9","title":"var databaseValue: DatabaseValue","type":"property"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/databasevalue-5df0f","title":"var databaseValue: DatabaseValue","type":"property"}],"title":"DatabaseValueConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/databasevalueconvertible\/databasevalue-1ob9k","title":"var databaseValue: DatabaseValue","type":"property"},{"title":"Fetching Values from Raw SQL","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchcursor(_:sql:arguments:adapter:)-6elcz","title":"static func fetchCursor(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> DatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchall(_:sql:arguments:adapter:)-1cqyb","title":"static func fetchAll(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchset(_:sql:arguments:adapter:)-5jene","title":"static func fetchSet(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchone(_:sql:arguments:adapter:)-qvqp","title":"static func fetchOne(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"title":"Fetching Values from a Prepared Statement","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchcursor(_:arguments:adapter:)-4l6af","title":"static func fetchCursor(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> DatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchall(_:arguments:adapter:)-3abuc","title":"static func fetchAll(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchset(_:arguments:adapter:)-6y54n","title":"static func fetchSet(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchone(_:arguments:adapter:)-3d7ax","title":"static func fetchOne(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"title":"Fetching Values from a Request","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchcursor(_:_:)-8q4r6","title":"static func fetchCursor(Database, some FetchRequest) throws -> DatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchall(_:_:)-9hkqs","title":"static func fetchAll(Database, some FetchRequest) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchset(_:_:)-1foke","title":"static func fetchSet(Database, some FetchRequest) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchone(_:_:)-o6yj","title":"static func fetchOne(Database, some FetchRequest) throws -> Self?","type":"method"},{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevaluecursor\/element","title":"DatabaseValueCursor.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevaluecursor\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevaluecursor\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/contains(_:)","title":"func contains(Self.Element) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) -> DropWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/dropfirst()","title":"func dropFirst() -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/droplast()","title":"func dropLast() throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/droplast(_:)","title":"func dropLast(Int) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/enumerated()","title":"func enumerated() -> EnumeratedCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) -> FilterCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/flatmap(_:)-3fizw","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/flatmap(_:)-4utz1","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/joined()-2ohxu","title":"func joined() -> FlattenCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/joined()-6j5pp","title":"func joined() -> FlattenCursor<MapCursor<Self, AnyCursor<Self.Element.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/joined(separator:)","title":"func joined(separator: String) throws -> String","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/map(_:)","title":"func map<T>((Self.Element) throws -> T) -> MapCursor<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/max()","title":"func max() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/min()","title":"func min() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/next()","title":"func next() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/prefix(_:)","title":"func prefix(Int) -> PrefixCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) -> PrefixWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> Void) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/databasevaluecursor\/suffix(_:)","title":"func suffix(Int) throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/grdb\/databasevaluecursor\/cursor-implementations","title":"Cursor Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevaluecursor\/arguments","title":"var arguments: StatementArguments","type":"property"},{"path":"\/documentation\/grdb\/databasevaluecursor\/columncount","title":"var columnCount: Int","type":"property"},{"path":"\/documentation\/grdb\/databasevaluecursor\/columnnames","title":"var columnNames: [String]","type":"property"},{"path":"\/documentation\/grdb\/databasevaluecursor\/databaseregion","title":"var databaseRegion: DatabaseRegion","type":"property"},{"path":"\/documentation\/grdb\/databasevaluecursor\/sql","title":"var sql: String","type":"property"}],"path":"\/documentation\/grdb\/databasevaluecursor\/databasecursor-implementations","title":"DatabaseCursor Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasevaluecursor","title":"DatabaseValueCursor","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/databasevalueconvertible\/bind(to:at:)","title":"func bind(to: SQLiteStatement, at: CInt) -> CInt","type":"method"}],"title":"DatabaseValueConvertible Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/grdb\/statementbinding\/bind(to:at:)-3iz8b","title":"func bind(to: SQLiteStatement, at: CInt) -> CInt","type":"method"}],"title":"StatementBinding Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/statementbinding\/bind(to:at:)-vfsj","title":"func bind(to: SQLiteStatement, at: CInt) -> CInt","type":"method"}],"path":"\/documentation\/grdb\/statementbinding","title":"StatementBinding","type":"protocol"}],"path":"\/documentation\/grdb\/databasevalueconvertible","title":"DatabaseValueConvertible","type":"protocol"},{"children":[{"title":"Creating a Value","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/statementcolumnconvertible\/init(sqlitestatement:index:)-2ynor","title":"init?(sqliteStatement: SQLiteStatement, index: CInt)","type":"init"}],"title":"StatementColumnConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/statementcolumnconvertible\/init(sqlitestatement:index:)-354je","title":"init?(sqliteStatement: SQLiteStatement, index: CInt)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/grdb\/statementcolumnconvertible\/fromstatement(_:atuncheckedindex:)-9kkl7","title":"static func fromStatement(SQLiteStatement, atUncheckedIndex: CInt) -> Self?","type":"method"}],"title":"StatementColumnConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/statementcolumnconvertible\/fromstatement(_:atuncheckedindex:)-2i8y6","title":"static func fromStatement(SQLiteStatement, atUncheckedIndex: CInt) -> Self?","type":"method"},{"title":"Fetching Values from Raw SQL","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchcursor(_:sql:arguments:adapter:)-4xfxh","title":"static func fetchCursor(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> FastDatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchall(_:sql:arguments:adapter:)-7bn2i","title":"static func fetchAll(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchset(_:sql:arguments:adapter:)-1ythd","title":"static func fetchSet(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchone(_:sql:arguments:adapter:)-563lc","title":"static func fetchOne(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"title":"Fetching Values from a Prepared Statement","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchcursor(_:arguments:adapter:)-81f9d","title":"static func fetchCursor(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> FastDatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchall(_:arguments:adapter:)-64gua","title":"static func fetchAll(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchset(_:arguments:adapter:)-9fh2b","title":"static func fetchSet(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchone(_:arguments:adapter:)-8cbzp","title":"static func fetchOne(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"title":"Fetching Values from a Request","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchcursor(_:_:)-77a34","title":"static func fetchCursor(Database, some FetchRequest) throws -> FastDatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchall(_:_:)-7tnun","title":"static func fetchAll(Database, some FetchRequest) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchset(_:_:)-4bc1m","title":"static func fetchSet(Database, some FetchRequest) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasevalueconvertible\/fetchone(_:_:)-94q4e","title":"static func fetchOne(Database, some FetchRequest) throws -> Self?","type":"method"},{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/element","title":"FastDatabaseValueCursor.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/contains(_:)","title":"func contains(Self.Element) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) -> DropWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/dropfirst()","title":"func dropFirst() -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/droplast()","title":"func dropLast() throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/droplast(_:)","title":"func dropLast(Int) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/enumerated()","title":"func enumerated() -> EnumeratedCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) -> FilterCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/flatmap(_:)-27wbr","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/flatmap(_:)-2iv61","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/joined()-26kxu","title":"func joined() -> FlattenCursor<MapCursor<Self, AnyCursor<Self.Element.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/joined()-5dbtj","title":"func joined() -> FlattenCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/joined(separator:)","title":"func joined(separator: String) throws -> String","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/map(_:)","title":"func map<T>((Self.Element) throws -> T) -> MapCursor<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/max()","title":"func max() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/min()","title":"func min() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/next()","title":"func next() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/prefix(_:)","title":"func prefix(Int) -> PrefixCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) -> PrefixWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> Void) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/suffix(_:)","title":"func suffix(Int) throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/cursor-implementations","title":"Cursor Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/arguments","title":"var arguments: StatementArguments","type":"property"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/columncount","title":"var columnCount: Int","type":"property"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/columnnames","title":"var columnNames: [String]","type":"property"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/databaseregion","title":"var databaseRegion: DatabaseRegion","type":"property"},{"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/sql","title":"var sql: String","type":"property"}],"path":"\/documentation\/grdb\/fastdatabasevaluecursor\/databasecursor-implementations","title":"DatabaseCursor Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/fastdatabasevaluecursor","title":"FastDatabaseValueCursor","type":"class"}],"path":"\/documentation\/grdb\/statementcolumnconvertible","title":"StatementColumnConvertible","type":"protocol"},{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/anycursor\/init(_:)-1bah0","title":"init(() throws -> Element?)","type":"init"},{"path":"\/documentation\/grdb\/anycursor\/init(_:)-1ryro","title":"init<C>(C)","type":"init"},{"path":"\/documentation\/grdb\/anycursor\/init(_:)-sxgi","title":"convenience init<S>(S)","type":"init"},{"path":"\/documentation\/grdb\/anycursor\/init(iterator:)","title":"convenience init<I>(iterator: I)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/anycursor\/next()","title":"func next() throws -> Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/anycursor\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/anycursor\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/contains(_:)","title":"func contains(Self.Element) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) -> DropWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/dropfirst()","title":"func dropFirst() -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/droplast()","title":"func dropLast() throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/droplast(_:)","title":"func dropLast(Int) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/enumerated()","title":"func enumerated() -> EnumeratedCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) -> FilterCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/flatmap(_:)-1zo4k","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/flatmap(_:)-36t2","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/joined()-19qyy","title":"func joined() -> FlattenCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/joined()-2kwkg","title":"func joined() -> FlattenCursor<MapCursor<Self, AnyCursor<Self.Element.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/joined(separator:)","title":"func joined(separator: String) throws -> String","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/map(_:)","title":"func map<T>((Self.Element) throws -> T) -> MapCursor<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/max()","title":"func max() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/min()","title":"func min() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/prefix(_:)","title":"func prefix(Int) -> PrefixCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) -> PrefixWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> Void) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/anycursor\/suffix(_:)","title":"func suffix(Int) throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/grdb\/anycursor\/cursor-implementations","title":"Cursor Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/anycursor","title":"AnyCursor","type":"class"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/dropfirstcursor\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/dropfirstcursor\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/contains(_:)","title":"func contains(Self.Element) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) -> DropWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/dropfirst()","title":"func dropFirst() -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/droplast()","title":"func dropLast() throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/droplast(_:)","title":"func dropLast(Int) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/enumerated()","title":"func enumerated() -> EnumeratedCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) -> FilterCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/flatmap(_:)-1u7z5","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/flatmap(_:)-3y0mt","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/joined()-1lxn4","title":"func joined() -> FlattenCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/joined()-5dagb","title":"func joined() -> FlattenCursor<MapCursor<Self, AnyCursor<Self.Element.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/joined(separator:)","title":"func joined(separator: String) throws -> String","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/map(_:)","title":"func map<T>((Self.Element) throws -> T) -> MapCursor<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/max()","title":"func max() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/min()","title":"func min() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/next()","title":"func next() throws -> Base.Element?","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/prefix(_:)","title":"func prefix(Int) -> PrefixCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) -> PrefixWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> Void) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/dropfirstcursor\/suffix(_:)","title":"func suffix(Int) throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/grdb\/dropfirstcursor\/cursor-implementations","title":"Cursor Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/dropfirstcursor","title":"DropFirstCursor","type":"class"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/dropwhilecursor\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/dropwhilecursor\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/contains(_:)","title":"func contains(Self.Element) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) -> DropWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/dropfirst()","title":"func dropFirst() -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/droplast()","title":"func dropLast() throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/droplast(_:)","title":"func dropLast(Int) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/enumerated()","title":"func enumerated() -> EnumeratedCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) -> FilterCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/flatmap(_:)-9kh2r","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/flatmap(_:)-9uvzw","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/joined()-5grlj","title":"func joined() -> FlattenCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/joined()-8ou7m","title":"func joined() -> FlattenCursor<MapCursor<Self, AnyCursor<Self.Element.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/joined(separator:)","title":"func joined(separator: String) throws -> String","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/map(_:)","title":"func map<T>((Self.Element) throws -> T) -> MapCursor<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/max()","title":"func max() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/min()","title":"func min() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/next()","title":"func next() throws -> Base.Element?","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/prefix(_:)","title":"func prefix(Int) -> PrefixCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) -> PrefixWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> Void) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/dropwhilecursor\/suffix(_:)","title":"func suffix(Int) throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/grdb\/dropwhilecursor\/cursor-implementations","title":"Cursor Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/dropwhilecursor","title":"DropWhileCursor","type":"class"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/enumeratedcursor\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/enumeratedcursor\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) -> DropWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/dropfirst()","title":"func dropFirst() -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/droplast()","title":"func dropLast() throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/droplast(_:)","title":"func dropLast(Int) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/enumerated()","title":"func enumerated() -> EnumeratedCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) -> FilterCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/flatmap(_:)-4g6a9","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/flatmap(_:)-egv6","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/foreach(_:)","title":"func forEach(((Int, Base.Element)) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/map(_:)","title":"func map<T>((Self.Element) throws -> T) -> MapCursor<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/next()","title":"func next() throws -> (Int, Base.Element)?","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/prefix(_:)","title":"func prefix(Int) -> PrefixCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) -> PrefixWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> Void) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/enumeratedcursor\/suffix(_:)","title":"func suffix(Int) throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/grdb\/enumeratedcursor\/cursor-implementations","title":"Cursor Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/enumeratedcursor","title":"EnumeratedCursor","type":"class"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/filtercursor\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/filtercursor\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/contains(_:)","title":"func contains(Self.Element) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) -> DropWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/dropfirst()","title":"func dropFirst() -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/droplast()","title":"func dropLast() throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/droplast(_:)","title":"func dropLast(Int) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/enumerated()","title":"func enumerated() -> EnumeratedCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) -> FilterCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/flatmap(_:)-2maar","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/flatmap(_:)-7n6pj","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/foreach(_:)","title":"func forEach((Base.Element) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/joined()-6qfty","title":"func joined() -> FlattenCursor<MapCursor<Self, AnyCursor<Self.Element.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/joined()-8azyk","title":"func joined() -> FlattenCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/joined(separator:)","title":"func joined(separator: String) throws -> String","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/map(_:)","title":"func map<T>((Self.Element) throws -> T) -> MapCursor<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/max()","title":"func max() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/min()","title":"func min() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/next()","title":"func next() throws -> Base.Element?","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/prefix(_:)","title":"func prefix(Int) -> PrefixCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) -> PrefixWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> Void) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/filtercursor\/suffix(_:)","title":"func suffix(Int) throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/grdb\/filtercursor\/cursor-implementations","title":"Cursor Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/filtercursor","title":"FilterCursor","type":"class"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/flattencursor\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/flattencursor\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/contains(_:)","title":"func contains(Self.Element) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) -> DropWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/dropfirst()","title":"func dropFirst() -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/droplast()","title":"func dropLast() throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/droplast(_:)","title":"func dropLast(Int) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/enumerated()","title":"func enumerated() -> EnumeratedCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) -> FilterCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/flatmap(_:)-9dne","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/flatmap(_:)-hk1a","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/joined()-1ev6z","title":"func joined() -> FlattenCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/joined()-8uy3u","title":"func joined() -> FlattenCursor<MapCursor<Self, AnyCursor<Self.Element.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/joined(separator:)","title":"func joined(separator: String) throws -> String","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/map(_:)","title":"func map<T>((Self.Element) throws -> T) -> MapCursor<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/max()","title":"func max() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/min()","title":"func min() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/next()","title":"func next() throws -> Base.Element.Element?","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/prefix(_:)","title":"func prefix(Int) -> PrefixCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) -> PrefixWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> Void) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/flattencursor\/suffix(_:)","title":"func suffix(Int) throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/grdb\/flattencursor\/cursor-implementations","title":"Cursor Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/flattencursor","title":"FlattenCursor","type":"class"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/mapcursor\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/mapcursor\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/contains(_:)","title":"func contains(Self.Element) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) -> DropWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/dropfirst()","title":"func dropFirst() -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/droplast()","title":"func dropLast() throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/droplast(_:)","title":"func dropLast(Int) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/enumerated()","title":"func enumerated() -> EnumeratedCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) -> FilterCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/flatmap(_:)-2wlrb","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/flatmap(_:)-7g5nl","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/foreach(_:)","title":"func forEach((Element) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/joined()-134b7","title":"func joined() -> FlattenCursor<MapCursor<Self, AnyCursor<Self.Element.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/joined()-1xctk","title":"func joined() -> FlattenCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/joined(separator:)","title":"func joined(separator: String) throws -> String","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/map(_:)","title":"func map<T>((Self.Element) throws -> T) -> MapCursor<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/max()","title":"func max() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/min()","title":"func min() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/next()","title":"func next() throws -> Element?","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/prefix(_:)","title":"func prefix(Int) -> PrefixCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) -> PrefixWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> Void) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/mapcursor\/suffix(_:)","title":"func suffix(Int) throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/grdb\/mapcursor\/cursor-implementations","title":"Cursor Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/mapcursor","title":"MapCursor","type":"class"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/prefixcursor\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/prefixcursor\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/contains(_:)","title":"func contains(Self.Element) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) -> DropWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/dropfirst()","title":"func dropFirst() -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/droplast()","title":"func dropLast() throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/droplast(_:)","title":"func dropLast(Int) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/enumerated()","title":"func enumerated() -> EnumeratedCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) -> FilterCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/flatmap(_:)-55oxn","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/flatmap(_:)-5hbq5","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/joined()-30757","title":"func joined() -> FlattenCursor<MapCursor<Self, AnyCursor<Self.Element.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/joined()-z3df","title":"func joined() -> FlattenCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/joined(separator:)","title":"func joined(separator: String) throws -> String","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/map(_:)","title":"func map<T>((Self.Element) throws -> T) -> MapCursor<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/max()","title":"func max() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/min()","title":"func min() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/next()","title":"func next() throws -> Base.Element?","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/prefix(_:)","title":"func prefix(Int) -> PrefixCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) -> PrefixWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> Void) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/prefixcursor\/suffix(_:)","title":"func suffix(Int) throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/grdb\/prefixcursor\/cursor-implementations","title":"Cursor Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/prefixcursor","title":"PrefixCursor","type":"class"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/contains(_:)","title":"func contains(Self.Element) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) -> DropWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/dropfirst()","title":"func dropFirst() -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/droplast()","title":"func dropLast() throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/droplast(_:)","title":"func dropLast(Int) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/enumerated()","title":"func enumerated() -> EnumeratedCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) -> FilterCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/flatmap(_:)-5wl8y","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/flatmap(_:)-6o8ex","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/joined()-5c6jd","title":"func joined() -> FlattenCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/joined()-6nzw","title":"func joined() -> FlattenCursor<MapCursor<Self, AnyCursor<Self.Element.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/joined(separator:)","title":"func joined(separator: String) throws -> String","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/map(_:)","title":"func map<T>((Self.Element) throws -> T) -> MapCursor<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/max()","title":"func max() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/min()","title":"func min() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/next()","title":"func next() throws -> Base.Element?","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/prefix(_:)","title":"func prefix(Int) -> PrefixCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) -> PrefixWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> Void) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/prefixwhilecursor\/suffix(_:)","title":"func suffix(Int) throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/grdb\/prefixwhilecursor\/cursor-implementations","title":"Cursor Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/prefixwhilecursor","title":"PrefixWhileCursor","type":"class"},{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/grdb\/cursor\/element","title":"Element","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/cursor\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/cursor\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/cursor\/contains(_:)","title":"func contains(Self.Element) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/cursor\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/cursor\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) -> DropWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/cursor\/dropfirst()","title":"func dropFirst() -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/cursor\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/cursor\/droplast()","title":"func dropLast() throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/cursor\/droplast(_:)","title":"func dropLast(Int) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/cursor\/enumerated()","title":"func enumerated() -> EnumeratedCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/cursor\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) -> FilterCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/cursor\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/cursor\/flatmap(_:)-5ci2v","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/cursor\/flatmap(_:)-8jxlj","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/cursor\/foreach(_:)-41f3j","title":"func forEach((Self.Element) throws -> Void) throws","type":"method"}],"title":"Cursor Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/grdb\/databasecursor\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) throws","type":"method"}],"title":"DatabaseCursor Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/cursor\/foreach(_:)-4ib2m","title":"func forEach((Self.Element) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/cursor\/joined()-5r5ja","title":"func joined() -> FlattenCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/cursor\/joined()-7bnrx","title":"func joined() -> FlattenCursor<MapCursor<Self, AnyCursor<Self.Element.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/cursor\/joined(separator:)","title":"func joined(separator: String) throws -> String","type":"method"},{"path":"\/documentation\/grdb\/cursor\/map(_:)","title":"func map<T>((Self.Element) throws -> T) -> MapCursor<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/cursor\/max()","title":"func max() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/cursor\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/cursor\/min()","title":"func min() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/cursor\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/databasecursor\/next()","title":"func next() throws -> Self.Element?","type":"method"}],"title":"DatabaseCursor Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/cursor\/next()","title":"func next() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/cursor\/prefix(_:)","title":"func prefix(Int) -> PrefixCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/cursor\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) -> PrefixWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/cursor\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/cursor\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> Void) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/cursor\/suffix(_:)","title":"func suffix(Int) throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/grdb\/cursor","title":"Cursor","type":"protocol"},{"children":[{"title":"Counting the Results","type":"groupMarker"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchcount(_:)","title":"func fetchCount(Database) throws -> Int","type":"method"},{"title":"Fetching Database Rows","type":"groupMarker"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchcursor(_:)-9283d","title":"func fetchCursor(Database) throws -> RowCursor","type":"method"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchall(_:)-7p809","title":"func fetchAll(Database) throws -> [Row]","type":"method"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchone(_:)-9fafl","title":"func fetchOne(Database) throws -> Row?","type":"method"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchset(_:)-6bdrd","title":"func fetchSet(Database) throws -> Set<Row>","type":"method"},{"title":"Fetching Database Values","type":"groupMarker"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchcursor(_:)-19f5g","title":"func fetchCursor(Database) throws -> DatabaseValueCursor<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchcursor(_:)-66xoi","title":"func fetchCursor(Database) throws -> FastDatabaseValueCursor<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchall(_:)-1loau","title":"func fetchAll(Database) throws -> [Self.RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchall(_:)-28pne","title":"func fetchAll(Database) throws -> [Self.RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchone(_:)-44mvv","title":"func fetchOne(Database) throws -> Self.RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchone(_:)-5hlkf","title":"func fetchOne(Database) throws -> Self.RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchset(_:)-4hhtm","title":"func fetchSet(Database) throws -> Set<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchset(_:)-9wshm","title":"func fetchSet(Database) throws -> Set<Self.RowDecoder>","type":"method"},{"title":"Fetching Records","type":"groupMarker"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchcursor(_:)-2ah3q","title":"func fetchCursor(Database) throws -> RecordCursor<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchall(_:)-vdos","title":"func fetchAll(Database) throws -> [Self.RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchone(_:)-2bq0k","title":"func fetchOne(Database) throws -> Self.RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/fetchrequest\/fetchset(_:)-4jdrq","title":"func fetchSet(Database) throws -> Set<Self.RowDecoder>","type":"method"},{"title":"Preparing Database Requests","type":"groupMarker"},{"path":"\/documentation\/grdb\/fetchrequest\/makepreparedrequest(_:forsingleresult:)","title":"func makePreparedRequest(Database, forSingleResult: Bool) throws -> PreparedRequest","type":"method"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/preparedrequest\/adapter","title":"var adapter: (RowAdapter)?","type":"property"},{"path":"\/documentation\/grdb\/preparedrequest\/statement","title":"var statement: Statement","type":"property"}],"path":"\/documentation\/grdb\/preparedrequest","title":"PreparedRequest","type":"struct"},{"title":"Database Observation Support","type":"groupMarker"},{"path":"\/documentation\/grdb\/fetchrequest\/databaseregion(_:)","title":"func databaseRegion(Database) throws -> DatabaseRegion","type":"method"},{"title":"Adapting the Fetched Rows","type":"groupMarker"},{"path":"\/documentation\/grdb\/fetchrequest\/adapted(_:)","title":"func adapted((Database) throws -> RowAdapter) -> AdaptedFetchRequest<Self>","type":"method"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/adapted(_:)","title":"func adapted((Database) throws -> RowAdapter) -> AdaptedFetchRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/databaseregion(_:)","title":"func databaseRegion(Database) throws -> DatabaseRegion","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchall(_:)-119eh","title":"func fetchAll(Database) throws -> [Row]","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchall(_:)-19mza","title":"func fetchAll(Database) throws -> [Self.RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchall(_:)-29be5","title":"func fetchAll(Database) throws -> [Self.RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchall(_:)-9wzq7","title":"func fetchAll(Database) throws -> [Self.RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchcount(_:)","title":"func fetchCount(Database) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchcursor(_:)-8glca","title":"func fetchCursor(Database) throws -> RecordCursor<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchcursor(_:)-8mfai","title":"func fetchCursor(Database) throws -> FastDatabaseValueCursor<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchcursor(_:)-fulb","title":"func fetchCursor(Database) throws -> DatabaseValueCursor<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchcursor(_:)-hztc","title":"func fetchCursor(Database) throws -> RowCursor","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchone(_:)-5e4el","title":"func fetchOne(Database) throws -> Row?","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchone(_:)-5x0o8","title":"func fetchOne(Database) throws -> Self.RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchone(_:)-70ghr","title":"func fetchOne(Database) throws -> Self.RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchone(_:)-9c6t5","title":"func fetchOne(Database) throws -> Self.RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchset(_:)-619ui","title":"func fetchSet(Database) throws -> Set<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchset(_:)-85hu6","title":"func fetchSet(Database) throws -> Set<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchset(_:)-aush","title":"func fetchSet(Database) throws -> Set<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchset(_:)-ddd4","title":"func fetchSet(Database) throws -> Set<Row>","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/makepreparedrequest(_:forsingleresult:)","title":"func makePreparedRequest(Database, forSingleResult: Bool) throws -> PreparedRequest","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/rowdecoder","title":"AdaptedFetchRequest.RowDecoder","type":"typealias"}],"path":"\/documentation\/grdb\/adaptedfetchrequest\/fetchrequest-implementations","title":"FetchRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/sqlordering","title":"var sqlOrdering: SQLOrdering","type":"property"}],"path":"\/documentation\/grdb\/adaptedfetchrequest\/sqlorderingterm-implementations","title":"SQLOrderingTerm Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/sqlselection","title":"var sqlSelection: SQLSelection","type":"property"}],"path":"\/documentation\/grdb\/adaptedfetchrequest\/sqlselectable-implementations","title":"SQLSelectable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/!(_:)","title":"static func ! (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/!=(_:_:)-22l2b","title":"static func != (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/!=(_:_:)-2gqex","title":"static func != ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/!=(_:_:)-7g5rs","title":"static func != (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/!=(_:_:)-7jalr","title":"static func != (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/!=(_:_:)-81jed","title":"static func != (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/!==(_:_:)-2vmw8","title":"static func !== (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/!==(_:_:)-5k2w9","title":"static func !== ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/!==(_:_:)-78cs7","title":"static func !== (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/&&(_:_:)-2a4sl","title":"static func && (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/&&(_:_:)-64l3s","title":"static func && (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/&&(_:_:)-8e4k3","title":"static func && (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/*(_:_:)-3e3fc","title":"static func * (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/*(_:_:)-444gu","title":"static func * (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/*(_:_:)-4kpr3","title":"static func * (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/+(_:_:)-5z8e1","title":"static func + (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/+(_:_:)-69ni9","title":"static func + (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/+(_:_:)-6m0r0","title":"static func + (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/-(_:)","title":"static func - (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/-(_:_:)-74ia4","title":"static func - (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/-(_:_:)-7e2xz","title":"static func - (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/-(_:_:)-h5tf","title":"static func - (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/\/(_:_:)-3i5sd","title":"static func \/ (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/\/(_:_:)-8ccbo","title":"static func \/ (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/\/(_:_:)-9gxdj","title":"static func \/ (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/==(_:_:)-2wzwm","title":"static func == ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/==(_:_:)-5rfdv","title":"static func == (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/==(_:_:)-6m4io","title":"static func == (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/==(_:_:)-80gt7","title":"static func == (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/==(_:_:)-9kl3y","title":"static func == (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/===(_:_:)-2qbpb","title":"static func === ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/===(_:_:)-3fd7d","title":"static func === (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/===(_:_:)-6z85d","title":"static func === (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/_(_:_:)-12ni6","title":"static func < (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/_(_:_:)-24sv1","title":"static func < (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/_(_:_:)-259d5","title":"static func > (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/_(_:_:)-26cak","title":"static func > (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/_(_:_:)-4t7oa","title":"static func > (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/_(_:_:)-6jen","title":"static func < (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/_=(_:_:)-31gf","title":"static func >= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/_=(_:_:)-7dwh2","title":"static func >= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/_=(_:_:)-7f8x9","title":"static func <= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/_=(_:_:)-7s7y8","title":"static func >= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/_=(_:_:)-9atqm","title":"static func <= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/_=(_:_:)-9l097","title":"static func <= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/__(_:_:)-1sq8g","title":"static func ?? (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/__(_:_:)-537rk","title":"static func || (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/__(_:_:)-5hz8q","title":"static func || (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/__(_:_:)-69dhi","title":"static func || (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/asc","title":"var asc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/ascnullslast","title":"var ascNullsLast: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/capitalized","title":"var capitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/desc","title":"var desc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/descnullsfirst","title":"var descNullsFirst: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/localizedcapitalized","title":"var localizedCapitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/localizedlowercased","title":"var localizedLowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/localizeduppercased","title":"var localizedUppercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/lowercased","title":"var lowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/uppercased","title":"var uppercased: SQLExpression","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/collating(_:)-25iw1","title":"func collating(DatabaseCollation) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/collating(_:)-5ztlt","title":"func collating(Database.CollationName) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/forkey(_:)","title":"func forKey(String) -> SQLSelection","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/like(_:escape:)","title":"func like(some SQLExpressible, escape: (SQLExpressible)?) -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/adaptedfetchrequest\/sqlspecificexpressible-implementations","title":"SQLSpecificExpressible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/sqlexpression","title":"var sqlExpression: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/sqlsubquery","title":"var sqlSubquery: SQLSubquery","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/contains(_:)","title":"func contains(some SQLExpressible) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/adaptedfetchrequest\/exists()","title":"func exists() -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/adaptedfetchrequest\/sqlsubqueryable-implementations","title":"SQLSubqueryable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/adaptedfetchrequest","title":"AdaptedFetchRequest","type":"struct"},{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/anyfetchrequest\/init(_:)","title":"init(some FetchRequest)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/anyfetchrequest\/asrequest(of:)","title":"func asRequest<RowDecoder>(of: RowDecoder.Type) -> AnyFetchRequest<RowDecoder>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/anyfetchrequest\/adapted(_:)","title":"func adapted((Database) throws -> RowAdapter) -> AdaptedFetchRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/databaseregion(_:)","title":"func databaseRegion(Database) throws -> DatabaseRegion","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchall(_:)-2dvh5","title":"func fetchAll(Database) throws -> [Self.RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchall(_:)-4q9o1","title":"func fetchAll(Database) throws -> [Self.RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchall(_:)-7afca","title":"func fetchAll(Database) throws -> [Row]","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchall(_:)-7cpmf","title":"func fetchAll(Database) throws -> [Self.RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchcount(_:)","title":"func fetchCount(Database) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchcursor(_:)-1622y","title":"func fetchCursor(Database) throws -> FastDatabaseValueCursor<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchcursor(_:)-1w670","title":"func fetchCursor(Database) throws -> RecordCursor<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchcursor(_:)-22bd9","title":"func fetchCursor(Database) throws -> RowCursor","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchcursor(_:)-9ghvh","title":"func fetchCursor(Database) throws -> DatabaseValueCursor<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchone(_:)-5gdbm","title":"func fetchOne(Database) throws -> Self.RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchone(_:)-99y4e","title":"func fetchOne(Database) throws -> Self.RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchone(_:)-9dz2x","title":"func fetchOne(Database) throws -> Row?","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchone(_:)-9oita","title":"func fetchOne(Database) throws -> Self.RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchset(_:)-5avah","title":"func fetchSet(Database) throws -> Set<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchset(_:)-63vjs","title":"func fetchSet(Database) throws -> Set<Row>","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchset(_:)-9fzmv","title":"func fetchSet(Database) throws -> Set<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/fetchset(_:)-9jiny","title":"func fetchSet(Database) throws -> Set<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/makepreparedrequest(_:forsingleresult:)","title":"func makePreparedRequest(Database, forSingleResult: Bool) throws -> PreparedRequest","type":"method"}],"path":"\/documentation\/grdb\/anyfetchrequest\/fetchrequest-implementations","title":"FetchRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/anyfetchrequest\/sqlordering","title":"var sqlOrdering: SQLOrdering","type":"property"}],"path":"\/documentation\/grdb\/anyfetchrequest\/sqlorderingterm-implementations","title":"SQLOrderingTerm Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/anyfetchrequest\/sqlselection","title":"var sqlSelection: SQLSelection","type":"property"}],"path":"\/documentation\/grdb\/anyfetchrequest\/sqlselectable-implementations","title":"SQLSelectable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/anyfetchrequest\/!(_:)","title":"static func ! (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/!=(_:_:)-1eqiw","title":"static func != (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/!=(_:_:)-4ujdv","title":"static func != (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/!=(_:_:)-68kpe","title":"static func != ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/!=(_:_:)-8191y","title":"static func != (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/!=(_:_:)-83oh4","title":"static func != (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/!==(_:_:)-6ien0","title":"static func !== ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/!==(_:_:)-7jr8m","title":"static func !== (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/!==(_:_:)-9fc54","title":"static func !== (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/&&(_:_:)-55ons","title":"static func && (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/&&(_:_:)-6stq2","title":"static func && (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/&&(_:_:)-8cmxn","title":"static func && (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/*(_:_:)-6fpha","title":"static func * (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/*(_:_:)-cddn","title":"static func * (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/*(_:_:)-x0lt","title":"static func * (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/+(_:_:)-1ebis","title":"static func + (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/+(_:_:)-6w11s","title":"static func + (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/+(_:_:)-vc5c","title":"static func + (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/-(_:)","title":"static func - (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/-(_:_:)-4n01l","title":"static func - (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/-(_:_:)-7gf5m","title":"static func - (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/-(_:_:)-7gfej","title":"static func - (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/\/(_:_:)-1kmg5","title":"static func \/ (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/\/(_:_:)-2mk0x","title":"static func \/ (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/\/(_:_:)-5tvma","title":"static func \/ (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/==(_:_:)-1j8uf","title":"static func == (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/==(_:_:)-3mz0d","title":"static func == (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/==(_:_:)-4mtgi","title":"static func == ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/==(_:_:)-62wy7","title":"static func == (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/==(_:_:)-s9jg","title":"static func == (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/===(_:_:)-5sx9t","title":"static func === (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/===(_:_:)-88pf8","title":"static func === ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/===(_:_:)-yaov","title":"static func === (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/_(_:_:)-4y9uk","title":"static func < (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/_(_:_:)-60vn9","title":"static func > (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/_(_:_:)-7mnm3","title":"static func > (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/_(_:_:)-96m6s","title":"static func < (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/_(_:_:)-9vsa9","title":"static func > (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/_(_:_:)-jfov","title":"static func < (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/_=(_:_:)-2fntg","title":"static func >= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/_=(_:_:)-374n8","title":"static func <= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/_=(_:_:)-5h1ak","title":"static func <= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/_=(_:_:)-605nz","title":"static func <= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/_=(_:_:)-7kfcr","title":"static func >= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/_=(_:_:)-84chg","title":"static func >= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/__(_:_:)-615p0","title":"static func || (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/__(_:_:)-6c56d","title":"static func || (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/__(_:_:)-6y6fd","title":"static func ?? (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/anyfetchrequest\/__(_:_:)-93dsf","title":"static func || (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/anyfetchrequest\/asc","title":"var asc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/anyfetchrequest\/ascnullslast","title":"var ascNullsLast: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/anyfetchrequest\/capitalized","title":"var capitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/anyfetchrequest\/desc","title":"var desc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/anyfetchrequest\/descnullsfirst","title":"var descNullsFirst: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/anyfetchrequest\/localizedcapitalized","title":"var localizedCapitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/anyfetchrequest\/localizedlowercased","title":"var localizedLowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/anyfetchrequest\/localizeduppercased","title":"var localizedUppercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/anyfetchrequest\/lowercased","title":"var lowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/anyfetchrequest\/uppercased","title":"var uppercased: SQLExpression","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/anyfetchrequest\/collating(_:)-5xw28","title":"func collating(DatabaseCollation) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/collating(_:)-7x8gi","title":"func collating(Database.CollationName) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/forkey(_:)","title":"func forKey(String) -> SQLSelection","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/like(_:escape:)","title":"func like(some SQLExpressible, escape: (SQLExpressible)?) -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/anyfetchrequest\/sqlspecificexpressible-implementations","title":"SQLSpecificExpressible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/anyfetchrequest\/sqlexpression","title":"var sqlExpression: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/anyfetchrequest\/sqlsubquery","title":"var sqlSubquery: SQLSubquery","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/anyfetchrequest\/contains(_:)","title":"func contains(some SQLExpressible) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/anyfetchrequest\/exists()","title":"func exists() -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/anyfetchrequest\/sqlsubqueryable-implementations","title":"SQLSubqueryable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/anyfetchrequest","title":"AnyFetchRequest","type":"struct"},{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/grdb\/fetchrequest\/rowdecoder","title":"RowDecoder","type":"associatedtype"}],"path":"\/documentation\/grdb\/fetchrequest","title":"FetchRequest","type":"protocol"}],"path":"\/documentation\/grdb\/sqlsupport","title":"SQL, Prepared Statements, Rows, and Values","type":"symbol"},{"title":"Migrations and The Database Schema","type":"groupMarker"},{"children":[{"title":"Database Tables","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/alter(table:body:)","title":"func alter(table: String, body: (TableAlteration) -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/create(table:options:body:)","title":"func create(table: String, options: TableOptions, body: (TableDefinition) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/create(virtualtable:ifnotexists:using:)","title":"func create(virtualTable: String, ifNotExists: Bool, using: String) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/create(virtualtable:ifnotexists:using:_:)","title":"func create<Module>(virtualTable: String, ifNotExists: Bool, using: Module, ((Module.TableDefinition) throws -> Void)?) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/drop(table:)","title":"func drop(table: String) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/dropfts4synchronizationtriggers(fortable:)","title":"func dropFTS4SynchronizationTriggers(forTable: String) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/rename(table:to:)","title":"func rename(table: String, to: String) throws","type":"method"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/columntype\/init(rawvalue:)","title":"init(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/columntype\/rawvalue","title":"let rawValue: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/columntype\/any","title":"static let any: Database.ColumnType","type":"property"},{"path":"\/documentation\/grdb\/database\/columntype\/blob","title":"static let blob: Database.ColumnType","type":"property"},{"path":"\/documentation\/grdb\/database\/columntype\/boolean","title":"static let boolean: Database.ColumnType","type":"property"},{"path":"\/documentation\/grdb\/database\/columntype\/date","title":"static let date: Database.ColumnType","type":"property"},{"path":"\/documentation\/grdb\/database\/columntype\/datetime","title":"static let datetime: Database.ColumnType","type":"property"},{"path":"\/documentation\/grdb\/database\/columntype\/double","title":"static let double: Database.ColumnType","type":"property"},{"path":"\/documentation\/grdb\/database\/columntype\/integer","title":"static let integer: Database.ColumnType","type":"property"},{"path":"\/documentation\/grdb\/database\/columntype\/numeric","title":"static let numeric: Database.ColumnType","type":"property"},{"path":"\/documentation\/grdb\/database\/columntype\/real","title":"static let real: Database.ColumnType","type":"property"},{"path":"\/documentation\/grdb\/database\/columntype\/text","title":"static let text: Database.ColumnType","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/columntype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/database\/columntype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/columntype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/columntype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/grdb\/database\/columntype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/database\/columntype","title":"Database.ColumnType","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/conflictresolution\/abort","title":"case abort","type":"case"},{"path":"\/documentation\/grdb\/database\/conflictresolution\/fail","title":"case fail","type":"case"},{"path":"\/documentation\/grdb\/database\/conflictresolution\/ignore","title":"case ignore","type":"case"},{"path":"\/documentation\/grdb\/database\/conflictresolution\/replace","title":"case replace","type":"case"},{"path":"\/documentation\/grdb\/database\/conflictresolution\/rollback","title":"case rollback","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/conflictresolution\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/conflictresolution\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/database\/conflictresolution\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/conflictresolution\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/conflictresolution\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/grdb\/database\/conflictresolution\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/database\/conflictresolution","title":"Database.ConflictResolution","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/foreignkeyaction\/cascade","title":"case cascade","type":"case"},{"path":"\/documentation\/grdb\/database\/foreignkeyaction\/restrict","title":"case restrict","type":"case"},{"path":"\/documentation\/grdb\/database\/foreignkeyaction\/setdefault","title":"case setDefault","type":"case"},{"path":"\/documentation\/grdb\/database\/foreignkeyaction\/setnull","title":"case setNull","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/foreignkeyaction\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/foreignkeyaction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/database\/foreignkeyaction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/foreignkeyaction\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/foreignkeyaction\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/grdb\/database\/foreignkeyaction\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/database\/foreignkeyaction","title":"Database.ForeignKeyAction","type":"enum"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablealteration\/add(column:_:)","title":"func add(column: String, Database.ColumnType?) -> ColumnDefinition","type":"method"},{"path":"\/documentation\/grdb\/tablealteration\/addcolumn(literal:)","title":"func addColumn(literal: SQL)","type":"method"},{"path":"\/documentation\/grdb\/tablealteration\/addcolumn(sql:)","title":"func addColumn(sql: String)","type":"method"},{"path":"\/documentation\/grdb\/tablealteration\/drop(column:)","title":"func drop(column: String)","type":"method"},{"path":"\/documentation\/grdb\/tablealteration\/rename(column:to:)","title":"func rename(column: String, to: String)","type":"method"}],"path":"\/documentation\/grdb\/tablealteration","title":"TableAlteration","type":"class"},{"children":[{"title":"Define Columns","type":"groupMarker"},{"path":"\/documentation\/grdb\/tabledefinition\/column(_:_:)","title":"func column(String, Database.ColumnType?) -> ColumnDefinition","type":"method"},{"path":"\/documentation\/grdb\/tabledefinition\/column(literal:)","title":"func column(literal: SQL)","type":"method"},{"path":"\/documentation\/grdb\/tabledefinition\/column(sql:)","title":"func column(sql: String)","type":"method"},{"children":[{"title":"Keys","type":"groupMarker"},{"path":"\/documentation\/grdb\/columndefinition\/primarykey(onconflict:autoincrement:)","title":"func primaryKey(onConflict: Database.ConflictResolution?, autoincrement: Bool) -> Self","type":"method"},{"path":"\/documentation\/grdb\/columndefinition\/references(_:column:ondelete:onupdate:deferred:)","title":"func references(String, column: String?, onDelete: Database.ForeignKeyAction?, onUpdate: Database.ForeignKeyAction?, deferred: Bool) -> Self","type":"method"},{"title":"Indexes","type":"groupMarker"},{"path":"\/documentation\/grdb\/columndefinition\/indexed()","title":"func indexed() -> Self","type":"method"},{"path":"\/documentation\/grdb\/columndefinition\/unique(onconflict:)","title":"func unique(onConflict: Database.ConflictResolution?) -> Self","type":"method"},{"title":"Default value","type":"groupMarker"},{"path":"\/documentation\/grdb\/columndefinition\/defaults(to:)","title":"func defaults(to: some DatabaseValueConvertible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/columndefinition\/defaults(sql:)","title":"func defaults(sql: String) -> Self","type":"method"},{"title":"Collations","type":"groupMarker"},{"path":"\/documentation\/grdb\/columndefinition\/collate(_:)-4dljx","title":"func collate(DatabaseCollation) -> Self","type":"method"},{"path":"\/documentation\/grdb\/columndefinition\/collate(_:)-9ywza","title":"func collate(Database.CollationName) -> Self","type":"method"},{"title":"Other Constraints","type":"groupMarker"},{"path":"\/documentation\/grdb\/columndefinition\/check(_:)","title":"func check((Column) -> SQLExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/columndefinition\/check(sql:)","title":"func check(sql: String) -> Self","type":"method"},{"path":"\/documentation\/grdb\/columndefinition\/notnull(onconflict:)","title":"func notNull(onConflict: Database.ConflictResolution?) -> Self","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/columndefinition\/generatedcolumnqualification\/stored","title":"case stored","type":"case"},{"path":"\/documentation\/grdb\/columndefinition\/generatedcolumnqualification\/virtual","title":"case virtual","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/columndefinition\/generatedcolumnqualification\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/columndefinition\/generatedcolumnqualification\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/columndefinition\/generatedcolumnqualification","title":"ColumnDefinition.GeneratedColumnQualification","type":"enum"}],"path":"\/documentation\/grdb\/columndefinition","title":"ColumnDefinition","type":"class"},{"title":"Define Keys","type":"groupMarker"},{"path":"\/documentation\/grdb\/tabledefinition\/autoincrementedprimarykey(_:onconflict:)","title":"func autoIncrementedPrimaryKey(String, onConflict: Database.ConflictResolution?) -> ColumnDefinition","type":"method"},{"path":"\/documentation\/grdb\/tabledefinition\/foreignkey(_:references:columns:ondelete:onupdate:deferred:)","title":"func foreignKey([String], references: String, columns: [String]?, onDelete: Database.ForeignKeyAction?, onUpdate: Database.ForeignKeyAction?, deferred: Bool)","type":"method"},{"path":"\/documentation\/grdb\/tabledefinition\/primarykey(_:onconflict:)","title":"func primaryKey([String], onConflict: Database.ConflictResolution?)","type":"method"},{"path":"\/documentation\/grdb\/tabledefinition\/uniquekey(_:onconflict:)","title":"func uniqueKey([String], onConflict: Database.ConflictResolution?)","type":"method"},{"title":"Define Others Constraints","type":"groupMarker"},{"path":"\/documentation\/grdb\/tabledefinition\/check(_:)","title":"func check(some SQLExpressible)","type":"method"},{"path":"\/documentation\/grdb\/tabledefinition\/check(sql:)","title":"func check(sql: String)","type":"method"},{"path":"\/documentation\/grdb\/tabledefinition\/constraint(literal:)","title":"func constraint(literal: SQL)","type":"method"},{"path":"\/documentation\/grdb\/tabledefinition\/constraint(sql:)","title":"func constraint(sql: String)","type":"method"}],"path":"\/documentation\/grdb\/tabledefinition","title":"TableDefinition","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/tableoptions\/init(rawvalue:)","title":"init(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/tableoptions\/rawvalue","title":"let rawValue: Int","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/tableoptions\/ifnotexists","title":"static let ifNotExists: TableOptions","type":"property"},{"path":"\/documentation\/grdb\/tableoptions\/strict","title":"static let strict: TableOptions","type":"property"},{"path":"\/documentation\/grdb\/tableoptions\/temporary","title":"static let temporary: TableOptions","type":"property"},{"path":"\/documentation\/grdb\/tableoptions\/withoutrowid","title":"static let withoutRowID: TableOptions","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/tableoptions\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/tableoptions\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/tableoptions\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/tableoptions\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/tableoptions\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/grdb\/tableoptions\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/grdb\/tableoptions\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/grdb\/tableoptions\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/grdb\/tableoptions\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tableoptions\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/tableoptions\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tableoptions\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tableoptions\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/grdb\/tableoptions\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/tableoptions\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/grdb\/tableoptions\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/tableoptions\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/tableoptions\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/tableoptions\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/tableoptions\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/tableoptions\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/tableoptions\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/tableoptions\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/grdb\/tableoptions\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/grdb\/tableoptions\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/tableoptions","title":"TableOptions","type":"struct"},{"children":[{"title":"Configuration Virtual Table Creation","type":"groupMarker"},{"path":"\/documentation\/grdb\/virtualtableconfiguration","title":"VirtualTableConfiguration","type":"struct"},{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/grdb\/virtualtablemodule\/tabledefinition","title":"TableDefinition","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/virtualtablemodule\/modulename","title":"var moduleName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/virtualtablemodule\/database(_:didcreate:using:)","title":"func database(Database, didCreate: String, using: Self.TableDefinition) throws","type":"method"},{"path":"\/documentation\/grdb\/virtualtablemodule\/maketabledefinition(configuration:)","title":"func makeTableDefinition(configuration: VirtualTableConfiguration) -> Self.TableDefinition","type":"method"},{"path":"\/documentation\/grdb\/virtualtablemodule\/modulearguments(for:in:)","title":"func moduleArguments(for: Self.TableDefinition, in: Database) throws -> [String]","type":"method"}],"path":"\/documentation\/grdb\/virtualtablemodule","title":"VirtualTableModule","type":"protocol"},{"title":"Database Indexes","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/create(index:on:columns:options:condition:)","title":"func create(index: String, on: String, columns: [String], options: IndexOptions, condition: (SQLExpressible)?) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/drop(index:)","title":"func drop(index: String) throws","type":"method"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexoptions\/init(rawvalue:)","title":"init(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexoptions\/rawvalue","title":"let rawValue: Int","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexoptions\/ifnotexists","title":"static let ifNotExists: IndexOptions","type":"property"},{"path":"\/documentation\/grdb\/indexoptions\/unique","title":"static let unique: IndexOptions","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexoptions\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/indexoptions\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexoptions\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexoptions\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/indexoptions\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/grdb\/indexoptions\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/grdb\/indexoptions\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/grdb\/indexoptions\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/grdb\/indexoptions\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/grdb\/indexoptions\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/indexoptions\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/grdb\/indexoptions\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/grdb\/indexoptions\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/grdb\/indexoptions\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexoptions\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/grdb\/indexoptions\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexoptions\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexoptions\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/indexoptions\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/indexoptions\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/indexoptions\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/indexoptions\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/indexoptions\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/grdb\/indexoptions\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/grdb\/indexoptions\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/indexoptions","title":"IndexOptions","type":"struct"},{"title":"Querying the Database Schema","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/columns(in:)","title":"func columns(in: String) throws -> [ColumnInfo]","type":"method"},{"path":"\/documentation\/grdb\/database\/foreignkeys(on:)","title":"func foreignKeys(on: String) throws -> [ForeignKeyInfo]","type":"method"},{"path":"\/documentation\/grdb\/database\/indexes(on:)","title":"func indexes(on: String) throws -> [IndexInfo]","type":"method"},{"path":"\/documentation\/grdb\/database\/isgrdbinternaltable(_:)","title":"static func isGRDBInternalTable(String) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/database\/issqliteinternaltable(_:)","title":"static func isSQLiteInternalTable(String) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/database\/primarykey(_:)","title":"func primaryKey(String) throws -> PrimaryKeyInfo","type":"method"},{"path":"\/documentation\/grdb\/database\/table(_:hasuniquekey:)","title":"func table<Columns>(String, hasUniqueKey: Columns) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/database\/tableexists(_:)","title":"func tableExists(String) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/database\/triggerexists(_:)","title":"func triggerExists(String) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/database\/viewexists(_:)","title":"func viewExists(String) throws -> Bool","type":"method"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/columninfo\/init(row:)","title":"init(row: Row)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/columninfo\/defaultvaluesql","title":"let defaultValueSQL: String?","type":"property"},{"path":"\/documentation\/grdb\/columninfo\/isnotnull","title":"let isNotNull: Bool","type":"property"},{"path":"\/documentation\/grdb\/columninfo\/name","title":"let name: String","type":"property"},{"path":"\/documentation\/grdb\/columninfo\/primarykeyindex","title":"let primaryKeyIndex: Int","type":"property"},{"path":"\/documentation\/grdb\/columninfo\/type","title":"let type: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/columninfo\/databasecolumndecodingstrategy","title":"static var databaseColumnDecodingStrategy: DatabaseColumnDecodingStrategy","type":"property"},{"path":"\/documentation\/grdb\/columninfo\/databasedatedecodingstrategy","title":"static var databaseDateDecodingStrategy: DatabaseDateDecodingStrategy","type":"property"},{"path":"\/documentation\/grdb\/columninfo\/databasedecodinguserinfo","title":"static var databaseDecodingUserInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/columninfo\/databasejsondecoder(for:)","title":"static func databaseJSONDecoder(for: String) -> JSONDecoder","type":"method"},{"path":"\/documentation\/grdb\/columninfo\/fetchall(_:_:)","title":"static func fetchAll(Database, some FetchRequest) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/columninfo\/fetchall(_:arguments:adapter:)","title":"static func fetchAll(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/columninfo\/fetchall(_:sql:arguments:adapter:)","title":"static func fetchAll(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/columninfo\/fetchcursor(_:_:)","title":"static func fetchCursor(Database, some FetchRequest) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/columninfo\/fetchcursor(_:arguments:adapter:)","title":"static func fetchCursor(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/columninfo\/fetchcursor(_:sql:arguments:adapter:)","title":"static func fetchCursor(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/columninfo\/fetchone(_:_:)","title":"static func fetchOne(Database, some FetchRequest) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/columninfo\/fetchone(_:arguments:adapter:)","title":"static func fetchOne(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/columninfo\/fetchone(_:sql:arguments:adapter:)","title":"static func fetchOne(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Self?","type":"method"}],"path":"\/documentation\/grdb\/columninfo\/fetchablerecord-implementations","title":"FetchableRecord Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/columninfo","title":"ColumnInfo","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/foreignkeyinfo\/destinationcolumns","title":"var destinationColumns: [String]","type":"property"},{"path":"\/documentation\/grdb\/foreignkeyinfo\/destinationtable","title":"let destinationTable: String","type":"property"},{"path":"\/documentation\/grdb\/foreignkeyinfo\/id","title":"var id: Int","type":"property"},{"path":"\/documentation\/grdb\/foreignkeyinfo\/mapping","title":"let mapping: [(origin: String, destination: String)]","type":"property"},{"path":"\/documentation\/grdb\/foreignkeyinfo\/origincolumns","title":"var originColumns: [String]","type":"property"}],"path":"\/documentation\/grdb\/foreignkeyinfo","title":"ForeignKeyInfo","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/init(rawvalue:)","title":"init(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/createindex","title":"static let createIndex: IndexInfo.Origin","type":"property"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/primarykeyconstraint","title":"static let primaryKeyConstraint: IndexInfo.Origin","type":"property"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/uniqueconstraint","title":"static let uniqueConstraint: IndexInfo.Origin","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/fetchall(_:_:)","title":"static func fetchAll(Database, some FetchRequest) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/fetchall(_:arguments:adapter:)","title":"static func fetchAll(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/fetchall(_:sql:arguments:adapter:)","title":"static func fetchAll(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/fetchcursor(_:_:)","title":"static func fetchCursor(Database, some FetchRequest) throws -> DatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/fetchcursor(_:arguments:adapter:)","title":"static func fetchCursor(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> DatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/fetchcursor(_:sql:arguments:adapter:)","title":"static func fetchCursor(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> DatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/fetchone(_:_:)","title":"static func fetchOne(Database, some FetchRequest) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/fetchone(_:arguments:adapter:)","title":"static func fetchOne(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/fetchone(_:sql:arguments:adapter:)","title":"static func fetchOne(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/frommissingcolumn()","title":"static func fromMissingColumn() -> Self?","type":"method"}],"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/databasevalueconvertible-implementations","title":"DatabaseValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/sqlexpression","title":"var sqlExpression: SQLExpression","type":"property"}],"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/sqlexpressible-implementations","title":"SQLExpressible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/bind(to:at:)","title":"func bind(to: SQLiteStatement, at: CInt) -> CInt","type":"method"}],"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct\/statementbinding-implementations","title":"StatementBinding Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/indexinfo\/origin-swift.struct","title":"IndexInfo.Origin","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/indexinfo\/columns","title":"let columns: [String]","type":"property"},{"path":"\/documentation\/grdb\/indexinfo\/isunique","title":"let isUnique: Bool","type":"property"},{"path":"\/documentation\/grdb\/indexinfo\/name","title":"let name: String","type":"property"},{"path":"\/documentation\/grdb\/indexinfo\/origin-swift.property","title":"let origin: IndexInfo.Origin","type":"property"}],"path":"\/documentation\/grdb\/indexinfo","title":"IndexInfo","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/primarykeyinfo\/columns","title":"var columns: [String]","type":"property"},{"path":"\/documentation\/grdb\/primarykeyinfo\/isrowid","title":"var isRowID: Bool","type":"property"},{"path":"\/documentation\/grdb\/primarykeyinfo\/rowidcolumn","title":"var rowIDColumn: String?","type":"property"}],"path":"\/documentation\/grdb\/primarykeyinfo","title":"PrimaryKeyInfo","type":"struct"},{"title":"Integrity Checks","type":"groupMarker"},{"path":"\/documentation\/grdb\/database\/checkforeignkeys()","title":"func checkForeignKeys() throws","type":"method"},{"path":"\/documentation\/grdb\/database\/checkforeignkeys(in:)","title":"func checkForeignKeys(in: String) throws","type":"method"},{"path":"\/documentation\/grdb\/database\/foreignkeyviolations()","title":"func foreignKeyViolations() throws -> RecordCursor<ForeignKeyViolation>","type":"method"},{"path":"\/documentation\/grdb\/database\/foreignkeyviolations(in:)","title":"func foreignKeyViolations(in: String) throws -> RecordCursor<ForeignKeyViolation>","type":"method"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/destinationtable","title":"var destinationTable: String","type":"property"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/foreignkeyid","title":"var foreignKeyId: Int","type":"property"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/originrowid","title":"var originRowID: Int64?","type":"property"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/origintable","title":"var originTable: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/databaseerror(_:)","title":"func databaseError(Database) -> DatabaseError","type":"method"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/failuredescription(_:)","title":"func failureDescription(Database) throws -> String","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/grdb\/foreignkeyviolation\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/init(row:)","title":"init(row: Row)","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/databasecolumndecodingstrategy","title":"static var databaseColumnDecodingStrategy: DatabaseColumnDecodingStrategy","type":"property"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/databasedatedecodingstrategy","title":"static var databaseDateDecodingStrategy: DatabaseDateDecodingStrategy","type":"property"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/databasedecodinguserinfo","title":"static var databaseDecodingUserInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/databasejsondecoder(for:)","title":"static func databaseJSONDecoder(for: String) -> JSONDecoder","type":"method"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/fetchall(_:_:)","title":"static func fetchAll(Database, some FetchRequest) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/fetchall(_:arguments:adapter:)","title":"static func fetchAll(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/fetchall(_:sql:arguments:adapter:)","title":"static func fetchAll(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/fetchcursor(_:_:)","title":"static func fetchCursor(Database, some FetchRequest) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/fetchcursor(_:arguments:adapter:)","title":"static func fetchCursor(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/fetchcursor(_:sql:arguments:adapter:)","title":"static func fetchCursor(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/fetchone(_:_:)","title":"static func fetchOne(Database, some FetchRequest) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/fetchone(_:arguments:adapter:)","title":"static func fetchOne(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/foreignkeyviolation\/fetchone(_:sql:arguments:adapter:)","title":"static func fetchOne(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Self?","type":"method"}],"path":"\/documentation\/grdb\/foreignkeyviolation\/fetchablerecord-implementations","title":"FetchableRecord Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/foreignkeyviolation","title":"ForeignKeyViolation","type":"struct"}],"path":"\/documentation\/grdb\/databaseschema","title":"The Database Schema","type":"symbol"},{"children":[{"title":"DatabaseMigrator","type":"groupMarker"},{"children":[{"title":"Creating a DatabaseMigrator","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasemigrator\/init()","title":"init()","type":"init"},{"title":"Registering Migrations","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasemigrator\/registermigration(_:foreignkeychecks:migrate:)","title":"func registerMigration(String, foreignKeyChecks: DatabaseMigrator.ForeignKeyChecks, migrate: (Database) throws -> Void)","type":"method"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasemigrator\/foreignkeychecks\/deferred","title":"case deferred","type":"case"},{"path":"\/documentation\/grdb\/databasemigrator\/foreignkeychecks\/immediate","title":"case immediate","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasemigrator\/foreignkeychecks\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/databasemigrator\/foreignkeychecks\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasemigrator\/foreignkeychecks","title":"DatabaseMigrator.ForeignKeyChecks","type":"enum"},{"title":"Configuring a DatabaseMigrator","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasemigrator\/erasedatabaseonschemachange","title":"var eraseDatabaseOnSchemaChange: Bool","type":"property"},{"path":"\/documentation\/grdb\/databasemigrator\/disablingdeferredforeignkeychecks()","title":"func disablingDeferredForeignKeyChecks() -> DatabaseMigrator","type":"method"},{"title":"Migrating a Database","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasemigrator\/asyncmigrate(_:completion:)","title":"func asyncMigrate(some DatabaseWriter, completion: (Result<Database, Error>) -> Void)","type":"method"},{"path":"\/documentation\/grdb\/databasemigrator\/migrate(_:)","title":"func migrate(some DatabaseWriter) throws","type":"method"},{"path":"\/documentation\/grdb\/databasemigrator\/migrate(_:upto:)","title":"func migrate(some DatabaseWriter, upTo: String) throws","type":"method"},{"path":"\/documentation\/grdb\/databasemigrator\/migratepublisher(_:receiveon:)","title":"func migratePublisher(some DatabaseWriter, receiveOn: some Scheduler) -> DatabasePublishers.Migrate","type":"method"},{"title":"Querying Migrations","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasemigrator\/migrations","title":"var migrations: [String]","type":"property"},{"path":"\/documentation\/grdb\/databasemigrator\/appliedidentifiers(_:)","title":"func appliedIdentifiers(Database) throws -> Set<String>","type":"method"},{"path":"\/documentation\/grdb\/databasemigrator\/appliedmigrations(_:)","title":"func appliedMigrations(Database) throws -> [String]","type":"method"},{"path":"\/documentation\/grdb\/databasemigrator\/completedmigrations(_:)","title":"func completedMigrations(Database) throws -> [String]","type":"method"},{"path":"\/documentation\/grdb\/databasemigrator\/hasbeensuperseded(_:)","title":"func hasBeenSuperseded(Database) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/databasemigrator\/hascompletedmigrations(_:)","title":"func hasCompletedMigrations(Database) throws -> Bool","type":"method"}],"path":"\/documentation\/grdb\/databasemigrator","title":"DatabaseMigrator","type":"struct"}],"path":"\/documentation\/grdb\/migrations","title":"Migrations","type":"symbol"},{"title":"Record Types and the Query Interface","type":"groupMarker"},{"children":[{"title":"Records","type":"groupMarker"},{"children":[{"title":"Creating Record Instances","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/init()","title":"init()","type":"init"},{"path":"\/documentation\/grdb\/record\/init(row:)","title":"init(row: Row) throws","type":"init"},{"title":"Encoding a Database Row","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/encode(to:)","title":"func encode(to: inout PersistenceContainer) throws","type":"method"},{"title":"Changes Tracking","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/databasechanges","title":"var databaseChanges: [String : DatabaseValue?]","type":"property"},{"path":"\/documentation\/grdb\/record\/hasdatabasechanges","title":"var hasDatabaseChanges: Bool","type":"property"},{"path":"\/documentation\/grdb\/record\/updatechanges(_:)","title":"func updateChanges(Database) throws -> Bool","type":"method"},{"title":"Persistence Callbacks","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/willsave(_:)","title":"func willSave(Database) throws","type":"method"},{"path":"\/documentation\/grdb\/record\/willinsert(_:)","title":"func willInsert(Database) throws","type":"method"},{"path":"\/documentation\/grdb\/record\/willupdate(_:columns:)","title":"func willUpdate(Database, columns: Set<String>) throws","type":"method"},{"path":"\/documentation\/grdb\/record\/willdelete(_:)","title":"func willDelete(Database) throws","type":"method"},{"path":"\/documentation\/grdb\/record\/didsave(_:)","title":"func didSave(PersistenceSuccess)","type":"method"},{"path":"\/documentation\/grdb\/record\/didinsert(_:)","title":"func didInsert(InsertionSuccess)","type":"method"},{"path":"\/documentation\/grdb\/record\/didupdate(_:)","title":"func didUpdate(PersistenceSuccess)","type":"method"},{"path":"\/documentation\/grdb\/record\/diddelete(deleted:)","title":"func didDelete(deleted: Bool)","type":"method"},{"path":"\/documentation\/grdb\/record\/aroundsave(_:save:)","title":"func aroundSave(Database, save: () throws -> PersistenceSuccess) throws","type":"method"},{"path":"\/documentation\/grdb\/record\/aroundinsert(_:insert:)","title":"func aroundInsert(Database, insert: () throws -> InsertionSuccess) throws","type":"method"},{"path":"\/documentation\/grdb\/record\/aroundupdate(_:columns:update:)","title":"func aroundUpdate(Database, columns: Set<String>, update: () throws -> PersistenceSuccess) throws","type":"method"},{"path":"\/documentation\/grdb\/record\/arounddelete(_:delete:)","title":"func aroundDelete(Database, delete: () throws -> Bool) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/databaseselection-6hiji","title":"class var databaseSelection: [SQLSelectable]","type":"property"},{"path":"\/documentation\/grdb\/record\/databasetablename-1ucci","title":"class var databaseTableName: String","type":"property"},{"path":"\/documentation\/grdb\/record\/persistenceconflictpolicy-8869r","title":"class var persistenceConflictPolicy: PersistenceConflictPolicy","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/databasedictionary","title":"var databaseDictionary: [String : DatabaseValue]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/databasechanges(from:)","title":"func databaseChanges(from: some EncodableRecord) throws -> [String : DatabaseValue]","type":"method"},{"path":"\/documentation\/grdb\/record\/databaseequals(_:)","title":"func databaseEquals(Self) -> Bool","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/databasecolumnencodingstrategy","title":"static var databaseColumnEncodingStrategy: DatabaseColumnEncodingStrategy","type":"property"},{"path":"\/documentation\/grdb\/record\/databasedateencodingstrategy","title":"static var databaseDateEncodingStrategy: DatabaseDateEncodingStrategy","type":"property"},{"path":"\/documentation\/grdb\/record\/databaseencodinguserinfo","title":"static var databaseEncodingUserInfo: [CodingUserInfoKey : Any]","type":"property"},{"path":"\/documentation\/grdb\/record\/databaseuuidencodingstrategy","title":"static var databaseUUIDEncodingStrategy: DatabaseUUIDEncodingStrategy","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/databasejsonencoder(for:)","title":"static func databaseJSONEncoder(for: String) -> JSONEncoder","type":"method"}],"path":"\/documentation\/grdb\/record\/encodablerecord-implementations","title":"EncodableRecord Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/databasecolumndecodingstrategy","title":"static var databaseColumnDecodingStrategy: DatabaseColumnDecodingStrategy","type":"property"},{"path":"\/documentation\/grdb\/record\/databasedatedecodingstrategy","title":"static var databaseDateDecodingStrategy: DatabaseDateDecodingStrategy","type":"property"},{"path":"\/documentation\/grdb\/record\/databasedecodinguserinfo","title":"static var databaseDecodingUserInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/databasejsondecoder(for:)","title":"static func databaseJSONDecoder(for: String) -> JSONDecoder","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchall(_:)","title":"static func fetchAll(Database) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchall(_:_:)","title":"static func fetchAll(Database, some FetchRequest) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchall(_:arguments:adapter:)","title":"static func fetchAll(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchall(_:keys:)-2flkn","title":"static func fetchAll<Keys>(Database, keys: Keys) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchall(_:keys:)-6vhnq","title":"static func fetchAll(Database, keys: [[String : (DatabaseValueConvertible)?]]) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchall(_:sql:arguments:adapter:)","title":"static func fetchAll(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchcursor(_:)","title":"static func fetchCursor(Database) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchcursor(_:_:)","title":"static func fetchCursor(Database, some FetchRequest) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchcursor(_:arguments:adapter:)","title":"static func fetchCursor(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchcursor(_:keys:)-2fhlt","title":"static func fetchCursor(Database, keys: [[String : (DatabaseValueConvertible)?]]) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchcursor(_:keys:)-9itbs","title":"static func fetchCursor<Keys>(Database, keys: Keys) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchcursor(_:sql:arguments:adapter:)","title":"static func fetchCursor(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchone(_:)","title":"static func fetchOne(Database) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchone(_:_:)","title":"static func fetchOne(Database, some FetchRequest) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchone(_:arguments:adapter:)","title":"static func fetchOne(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchone(_:key:)-2qu4e","title":"static func fetchOne(Database, key: [String : (DatabaseValueConvertible)?]?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchone(_:key:)-89aaf","title":"static func fetchOne(Database, key: some DatabaseValueConvertible) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchone(_:sql:arguments:adapter:)","title":"static func fetchOne(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Self?","type":"method"}],"path":"\/documentation\/grdb\/record\/fetchablerecord-implementations","title":"FetchableRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/delete(_:)","title":"func delete(Database) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/record\/exists(_:)","title":"func exists(Database) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/record\/insertandfetch(_:onconflict:)","title":"func insertAndFetch(Database, onConflict: Database.ConflictResolution?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/record\/inserted(_:onconflict:)","title":"func inserted(Database, onConflict: Database.ConflictResolution?) throws -> Self","type":"method"},{"path":"\/documentation\/grdb\/record\/saveandfetch(_:onconflict:)","title":"func saveAndFetch(Database, onConflict: Database.ConflictResolution?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/record\/saved(_:onconflict:)","title":"func saved(Database, onConflict: Database.ConflictResolution?) throws -> Self","type":"method"},{"path":"\/documentation\/grdb\/record\/update(_:onconflict:)","title":"func update(Database, onConflict: Database.ConflictResolution?) throws","type":"method"},{"path":"\/documentation\/grdb\/record\/update(_:onconflict:columns:)-12dv4","title":"func update<Columns>(Database, onConflict: Database.ConflictResolution?, columns: Columns) throws","type":"method"},{"path":"\/documentation\/grdb\/record\/update(_:onconflict:columns:)-6p699","title":"func update<Columns>(Database, onConflict: Database.ConflictResolution?, columns: Columns) throws","type":"method"},{"path":"\/documentation\/grdb\/record\/updateandfetch(_:onconflict:)","title":"func updateAndFetch(Database, onConflict: Database.ConflictResolution?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/record\/updateandfetch(_:onconflict:as:)","title":"func updateAndFetch<T>(Database, onConflict: Database.ConflictResolution?, as: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/grdb\/record\/updateandfetch(_:onconflict:columns:selection:fetch:)-1u3tp","title":"func updateAndFetch<T, Columns>(Database, onConflict: Database.ConflictResolution?, columns: Columns, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/record\/updateandfetch(_:onconflict:columns:selection:fetch:)-88ucj","title":"func updateAndFetch<T, Columns>(Database, onConflict: Database.ConflictResolution?, columns: Columns, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/record\/updateandfetch(_:onconflict:selection:fetch:)","title":"func updateAndFetch<T>(Database, onConflict: Database.ConflictResolution?, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/record\/updatechanges(_:onconflict:modify:)","title":"func updateChanges(Database, onConflict: Database.ConflictResolution?, modify: (inout Self) throws -> Void) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/record\/updatechangesandfetch(_:onconflict:as:modify:)","title":"func updateChangesAndFetch<T>(Database, onConflict: Database.ConflictResolution?, as: T.Type, modify: (inout Self) throws -> Void) throws -> T?","type":"method"},{"path":"\/documentation\/grdb\/record\/updatechangesandfetch(_:onconflict:modify:)","title":"func updateChangesAndFetch(Database, onConflict: Database.ConflictResolution?, modify: (inout Self) throws -> Void) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/record\/updatechangesandfetch(_:onconflict:selection:fetch:modify:)","title":"func updateChangesAndFetch<T>(Database, onConflict: Database.ConflictResolution?, selection: [SQLSelectable], fetch: (Statement) throws -> T?, modify: (inout Self) throws -> Void) throws -> T?","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/persistenceconflictpolicy-894c6","title":"static var persistenceConflictPolicy: PersistenceConflictPolicy","type":"property"}],"path":"\/documentation\/grdb\/record\/mutablepersistablerecord-implementations","title":"MutablePersistableRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/insert(_:onconflict:)","title":"func insert(Database, onConflict: Database.ConflictResolution?) throws","type":"method"},{"path":"\/documentation\/grdb\/record\/insertandfetch(_:onconflict:as:)","title":"func insertAndFetch<T>(Database, onConflict: Database.ConflictResolution?, as: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/grdb\/record\/insertandfetch(_:onconflict:selection:fetch:)","title":"func insertAndFetch<T>(Database, onConflict: Database.ConflictResolution?, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/record\/save(_:onconflict:)","title":"func save(Database, onConflict: Database.ConflictResolution?) throws","type":"method"},{"path":"\/documentation\/grdb\/record\/saveandfetch(_:onconflict:as:)","title":"func saveAndFetch<T>(Database, onConflict: Database.ConflictResolution?, as: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/grdb\/record\/saveandfetch(_:onconflict:selection:fetch:)","title":"func saveAndFetch<T>(Database, onConflict: Database.ConflictResolution?, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/record\/upsert(_:)","title":"func upsert(Database) throws","type":"method"},{"path":"\/documentation\/grdb\/record\/upsertandfetch(_:as:onconflict:doupdate:)","title":"func upsertAndFetch<T>(Database, as: T.Type, onConflict: [String], doUpdate: ((TableAlias) -> [ColumnAssignment])?) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/record\/upsertandfetch(_:onconflict:doupdate:)","title":"func upsertAndFetch(Database, onConflict: [String], doUpdate: ((TableAlias) -> [ColumnAssignment])?) throws -> Self","type":"method"}],"path":"\/documentation\/grdb\/record\/persistablerecord-implementations","title":"PersistableRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/request(for:)","title":"func request<A>(for: A) -> QueryInterfaceRequest<A.RowDecoder>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/databaseselection-3uubu","title":"static var databaseSelection: [SQLSelectable]","type":"property"},{"path":"\/documentation\/grdb\/record\/databasetablename-9wapq","title":"static var databaseTableName: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/record\/aliased(_:)","title":"static func aliased(TableAlias) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/all()","title":"static func all() -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/annotated(with:)-4b1tn","title":"static func annotated(with: SQLSelectable...) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/annotated(with:)-5yvat","title":"static func annotated(with: [SQLSelectable]) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/annotated(with:)-66qe5","title":"static func annotated(with: [AssociationAggregate<Self>]) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/annotated(with:)-98ab4","title":"static func annotated(with: AssociationAggregate<Self>...) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/annotated(withoptional:)","title":"static func annotated<A>(withOptional: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/annotated(withrequired:)","title":"static func annotated<A>(withRequired: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/association(to:)","title":"static func association<Destination>(to: CommonTableExpression<Destination>) -> JoinAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/record\/association(to:on:)","title":"static func association<Destination>(to: CommonTableExpression<Destination>, on: (TableAlias, TableAlias) -> SQLExpressible) -> JoinAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/record\/belongsto(_:key:using:)-5ancb","title":"static func belongsTo<Destination>(Destination.Type, key: String?, using: ForeignKey?) -> BelongsToAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/record\/belongsto(_:key:using:)-8o1da","title":"static func belongsTo<Destination>(Table<Destination>, key: String?, using: ForeignKey?) -> BelongsToAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/record\/deleteall(_:)","title":"static func deleteAll(Database) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/record\/deleteall(_:keys:)-3ohfp","title":"static func deleteAll<Keys>(Database, keys: Keys) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/record\/deleteall(_:keys:)-64ixm","title":"static func deleteAll(Database, keys: [[String : (DatabaseValueConvertible)?]]) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/record\/deleteone(_:key:)-2h89u","title":"static func deleteOne(Database, key: [String : (DatabaseValueConvertible)?]) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/record\/deleteone(_:key:)-58d78","title":"static func deleteOne(Database, key: some DatabaseValueConvertible) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/record\/exists(_:key:)-4sjr7","title":"static func exists(Database, key: [String : (DatabaseValueConvertible)?]) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/record\/exists(_:key:)-53r2i","title":"static func exists(Database, key: some DatabaseValueConvertible) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/record\/fetchcount(_:)","title":"static func fetchCount(Database) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/record\/filter(_:)","title":"static func filter(some SQLSpecificExpressible) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/filter(key:)-5i087","title":"static func filter(key: [String : (DatabaseValueConvertible)?]?) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/filter(key:)-8uoch","title":"static func filter(key: some DatabaseValueConvertible) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/filter(keys:)-7e2ce","title":"static func filter(keys: [[String : (DatabaseValueConvertible)?]]) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/filter(keys:)-88c88","title":"static func filter<Keys>(keys: Keys) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/filter(literal:)","title":"static func filter(literal: SQL) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/filter(sql:arguments:)","title":"static func filter(sql: String, arguments: StatementArguments) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/hasmany(_:key:using:)-5kodv","title":"static func hasMany<Destination>(Destination.Type, key: String?, using: ForeignKey?) -> HasManyAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/record\/hasmany(_:key:using:)-92jaa","title":"static func hasMany<Destination>(Table<Destination>, key: String?, using: ForeignKey?) -> HasManyAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/record\/hasmany(_:through:using:key:)","title":"static func hasMany<Pivot, Target>(Target.RowDecoder.Type, through: Pivot, using: Target, key: String?) -> HasManyThroughAssociation<Self, Target.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/record\/hasone(_:key:using:)-3dght","title":"static func hasOne<Destination>(Destination.Type, key: String?, using: ForeignKey?) -> HasOneAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/record\/hasone(_:key:using:)-9f4q6","title":"static func hasOne<Destination>(Table<Destination>, key: String?, using: ForeignKey?) -> HasOneAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/record\/hasone(_:through:using:key:)","title":"static func hasOne<Pivot, Target>(Target.RowDecoder.Type, through: Pivot, using: Target, key: String?) -> HasOneThroughAssociation<Self, Target.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/record\/having(_:)","title":"static func having(AssociationAggregate<Self>) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/including(all:)","title":"static func including<A>(all: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/including(optional:)","title":"static func including<A>(optional: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/including(required:)","title":"static func including<A>(required: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/joining(optional:)","title":"static func joining<A>(optional: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/joining(required:)","title":"static func joining<A>(required: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/limit(_:offset:)","title":"static func limit(Int, offset: Int?) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/matching(_:)","title":"static func matching(FTS3Pattern?) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/none()","title":"static func none() -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/numberofselectedcolumns(_:)","title":"static func numberOfSelectedColumns(Database) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/record\/order(_:)-4bvbo","title":"static func order([SQLOrderingTerm]) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/order(_:)-7izld","title":"static func order(SQLOrderingTerm...) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/order(literal:)","title":"static func order(literal: SQL) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/order(sql:arguments:)","title":"static func order(sql: String, arguments: StatementArguments) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/orderbyprimarykey()","title":"static func orderByPrimaryKey() -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/select(_:)-8gue4","title":"static func select([SQLSelectable]) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/select(_:)-prxo","title":"static func select(SQLSelectable...) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/select(_:as:)-4afi5","title":"static func select<RowDecoder>([SQLSelectable], as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/record\/select(_:as:)-5r9mb","title":"static func select<RowDecoder>(SQLSelectable..., as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/record\/select(literal:)","title":"static func select(literal: SQL) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/select(literal:as:)","title":"static func select<RowDecoder>(literal: SQL, as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/record\/select(sql:arguments:)","title":"static func select(sql: String, arguments: StatementArguments) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/record\/select(sql:arguments:as:)","title":"static func select<RowDecoder>(sql: String, arguments: StatementArguments, as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/record\/selectprimarykey(as:)","title":"static func selectPrimaryKey<PrimaryKey>(as: PrimaryKey.Type) -> QueryInterfaceRequest<PrimaryKey>","type":"method"},{"path":"\/documentation\/grdb\/record\/updateall(_:onconflict:_:)-1qqju","title":"static func updateAll(Database, onConflict: Database.ConflictResolution?, [ColumnAssignment]) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/record\/updateall(_:onconflict:_:)-848j3","title":"static func updateAll(Database, onConflict: Database.ConflictResolution?, ColumnAssignment...) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/record\/with(_:)","title":"static func with<RowDecoder>(CommonTableExpression<RowDecoder>) -> QueryInterfaceRequest<Self>","type":"method"}],"path":"\/documentation\/grdb\/record\/tablerecord-implementations","title":"TableRecord Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/record","title":"Record","type":"class"},{"children":[{"title":"Encoding a Database Row","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/encodablerecord\/encode(to:)-1mrt","title":"func encode(to: inout PersistenceContainer) throws","type":"method"}],"title":"EncodableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/encodablerecord\/encode(to:)-k9pf","title":"func encode(to: inout PersistenceContainer) throws","type":"method"},{"children":[{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/grdb\/persistencecontainer\/subscript(_:)-42djq","title":"subscript(some ColumnExpression) -> (DatabaseValueConvertible)?","type":"subscript"},{"path":"\/documentation\/grdb\/persistencecontainer\/subscript(_:)-x4cg","title":"subscript(String) -> (DatabaseValueConvertible)?","type":"subscript"}],"path":"\/documentation\/grdb\/persistencecontainer","title":"PersistenceContainer","type":"struct"},{"title":"Configuring Persistence for the Standard Encodable Protocol","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/encodablerecord\/databasecolumnencodingstrategy-8st88","title":"static var databaseColumnEncodingStrategy: DatabaseColumnEncodingStrategy","type":"property"}],"title":"EncodableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/encodablerecord\/databasecolumnencodingstrategy-5sx4v","title":"static var databaseColumnEncodingStrategy: DatabaseColumnEncodingStrategy","type":"property"},{"children":[{"children":[{"path":"\/documentation\/grdb\/encodablerecord\/databasedateencodingstrategy-95ae5","title":"static var databaseDateEncodingStrategy: DatabaseDateEncodingStrategy","type":"property"}],"title":"EncodableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/encodablerecord\/databasedateencodingstrategy-2gtc1","title":"static var databaseDateEncodingStrategy: DatabaseDateEncodingStrategy","type":"property"},{"children":[{"children":[{"path":"\/documentation\/grdb\/encodablerecord\/databaseencodinguserinfo-20z9a","title":"static var databaseEncodingUserInfo: [CodingUserInfoKey : Any]","type":"property"}],"title":"EncodableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/encodablerecord\/databaseencodinguserinfo-8upii","title":"static var databaseEncodingUserInfo: [CodingUserInfoKey : Any]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/grdb\/encodablerecord\/databasejsonencoder(for:)-8k2p4","title":"static func databaseJSONEncoder(for: String) -> JSONEncoder","type":"method"}],"title":"EncodableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/encodablerecord\/databasejsonencoder(for:)-6x62c","title":"static func databaseJSONEncoder(for: String) -> JSONEncoder","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/encodablerecord\/databaseuuidencodingstrategy-8rfx2","title":"static var databaseUUIDEncodingStrategy: DatabaseUUIDEncodingStrategy","type":"property"}],"title":"EncodableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/encodablerecord\/databaseuuidencodingstrategy-2t96q","title":"static var databaseUUIDEncodingStrategy: DatabaseUUIDEncodingStrategy","type":"property"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasecolumnencodingstrategy\/converttosnakecase","title":"case convertToSnakeCase","type":"case"},{"path":"\/documentation\/grdb\/databasecolumnencodingstrategy\/custom(_:)","title":"case custom((CodingKey) -> String)","type":"case"},{"path":"\/documentation\/grdb\/databasecolumnencodingstrategy\/usedefaultkeys","title":"case useDefaultKeys","type":"case"}],"path":"\/documentation\/grdb\/databasecolumnencodingstrategy","title":"DatabaseColumnEncodingStrategy","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedateencodingstrategy\/custom(_:)","title":"case custom((Date) -> (DatabaseValueConvertible)?)","type":"case"},{"path":"\/documentation\/grdb\/databasedateencodingstrategy\/deferredtodate","title":"case deferredToDate","type":"case"},{"path":"\/documentation\/grdb\/databasedateencodingstrategy\/formatted(_:)","title":"case formatted(DateFormatter)","type":"case"},{"path":"\/documentation\/grdb\/databasedateencodingstrategy\/iso8601","title":"case iso8601","type":"case"},{"path":"\/documentation\/grdb\/databasedateencodingstrategy\/millisecondssince1970","title":"case millisecondsSince1970","type":"case"},{"path":"\/documentation\/grdb\/databasedateencodingstrategy\/secondssince1970","title":"case secondsSince1970","type":"case"},{"path":"\/documentation\/grdb\/databasedateencodingstrategy\/timeintervalsince1970","title":"case timeIntervalSince1970","type":"case"},{"path":"\/documentation\/grdb\/databasedateencodingstrategy\/timeintervalsincereferencedate","title":"case timeIntervalSinceReferenceDate","type":"case"}],"path":"\/documentation\/grdb\/databasedateencodingstrategy","title":"DatabaseDateEncodingStrategy","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseuuidencodingstrategy\/deferredtouuid","title":"case deferredToUUID","type":"case"},{"path":"\/documentation\/grdb\/databaseuuidencodingstrategy\/lowercasestring","title":"case lowercaseString","type":"case"},{"path":"\/documentation\/grdb\/databaseuuidencodingstrategy\/uppercasestring","title":"case uppercaseString","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseuuidencodingstrategy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/databaseuuidencodingstrategy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databaseuuidencodingstrategy","title":"DatabaseUUIDEncodingStrategy","type":"enum"},{"title":"Converting a Record to a Dictionary","type":"groupMarker"},{"path":"\/documentation\/grdb\/encodablerecord\/databasedictionary","title":"var databaseDictionary: [String : DatabaseValue]","type":"property"},{"title":"Comparing Records","type":"groupMarker"},{"path":"\/documentation\/grdb\/encodablerecord\/databasechanges(from:)","title":"func databaseChanges(from: some EncodableRecord) throws -> [String : DatabaseValue]","type":"method"},{"path":"\/documentation\/grdb\/encodablerecord\/databaseequals(_:)","title":"func databaseEquals(Self) -> Bool","type":"method"}],"path":"\/documentation\/grdb\/encodablerecord","title":"EncodableRecord","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/fetchablerecord\/init(row:)-4ptlh","title":"init(row: Row) throws","type":"init"}],"title":"FetchableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/fetchablerecord\/init(row:)-9w9yp","title":"init(row: Row) throws","type":"init"},{"title":"Fetching Records","type":"groupMarker"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchcursor(_:)","title":"static func fetchCursor(Database) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchall(_:)","title":"static func fetchAll(Database) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchset(_:)","title":"static func fetchSet(Database) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchone(_:)","title":"static func fetchOne(Database) throws -> Self?","type":"method"},{"title":"Fetching Records from Raw SQL","type":"groupMarker"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchcursor(_:sql:arguments:adapter:)","title":"static func fetchCursor(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchall(_:sql:arguments:adapter:)","title":"static func fetchAll(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchset(_:sql:arguments:adapter:)","title":"static func fetchSet(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchone(_:sql:arguments:adapter:)","title":"static func fetchOne(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"title":"Fetching Records from a Prepared Statement","type":"groupMarker"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchcursor(_:arguments:adapter:)","title":"static func fetchCursor(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchall(_:arguments:adapter:)","title":"static func fetchAll(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchset(_:arguments:adapter:)","title":"static func fetchSet(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchone(_:arguments:adapter:)","title":"static func fetchOne(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"title":"Fetching Records from a Request","type":"groupMarker"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchcursor(_:_:)","title":"static func fetchCursor(Database, some FetchRequest) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchall(_:_:)","title":"static func fetchAll(Database, some FetchRequest) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchset(_:_:)","title":"static func fetchSet(Database, some FetchRequest) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchone(_:_:)","title":"static func fetchOne(Database, some FetchRequest) throws -> Self?","type":"method"},{"title":"Fetching Records by Primary Key","type":"groupMarker"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchcursor(_:ids:)","title":"static func fetchCursor<IDS>(Database, ids: IDS) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchall(_:ids:)","title":"static func fetchAll<IDS>(Database, ids: IDS) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchset(_:ids:)","title":"static func fetchSet<IDS>(Database, ids: IDS) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchone(_:id:)","title":"static func fetchOne(Database, id: Self.ID) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchcursor(_:keys:)-2jrm1","title":"static func fetchCursor<Keys>(Database, keys: Keys) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchall(_:keys:)-4c8no","title":"static func fetchAll<Keys>(Database, keys: Keys) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchset(_:keys:)-e6uy","title":"static func fetchSet<Keys>(Database, keys: Keys) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchone(_:key:)-3f3hc","title":"static func fetchOne(Database, key: some DatabaseValueConvertible) throws -> Self?","type":"method"},{"title":"Fetching Record by Key","type":"groupMarker"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchcursor(_:keys:)-5u9hu","title":"static func fetchCursor(Database, keys: [[String : (DatabaseValueConvertible)?]]) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchall(_:keys:)-2addp","title":"static func fetchAll(Database, keys: [[String : (DatabaseValueConvertible)?]]) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchset(_:keys:)-8no3x","title":"static func fetchSet(Database, keys: [[String : (DatabaseValueConvertible)?]]) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/grdb\/fetchablerecord\/fetchone(_:key:)-92b9m","title":"static func fetchOne(Database, key: [String : (DatabaseValueConvertible)?]?) throws -> Self?","type":"method"},{"title":"Configuring Row Decoding for the Standard Decodable Protocol","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/fetchablerecord\/databasecolumndecodingstrategy-674c7","title":"static var databaseColumnDecodingStrategy: DatabaseColumnDecodingStrategy","type":"property"}],"title":"FetchableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/fetchablerecord\/databasecolumndecodingstrategy-6uefz","title":"static var databaseColumnDecodingStrategy: DatabaseColumnDecodingStrategy","type":"property"},{"children":[{"children":[{"path":"\/documentation\/grdb\/fetchablerecord\/databasedatedecodingstrategy-5mze5","title":"static var databaseDateDecodingStrategy: DatabaseDateDecodingStrategy","type":"property"}],"title":"FetchableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/fetchablerecord\/databasedatedecodingstrategy-78y03","title":"static var databaseDateDecodingStrategy: DatabaseDateDecodingStrategy","type":"property"},{"children":[{"children":[{"path":"\/documentation\/grdb\/fetchablerecord\/databasedecodinguserinfo-1xpb1","title":"static var databaseDecodingUserInfo: [CodingUserInfoKey : Any]","type":"property"}],"title":"FetchableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/fetchablerecord\/databasedecodinguserinfo-77jim","title":"static var databaseDecodingUserInfo: [CodingUserInfoKey : Any]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/grdb\/fetchablerecord\/databasejsondecoder(for:)-1yrhs","title":"static func databaseJSONDecoder(for: String) -> JSONDecoder","type":"method"}],"title":"FetchableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/fetchablerecord\/databasejsondecoder(for:)-7lmxd","title":"static func databaseJSONDecoder(for: String) -> JSONDecoder","type":"method"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasecolumndecodingstrategy\/convertfromsnakecase","title":"case convertFromSnakeCase","type":"case"},{"path":"\/documentation\/grdb\/databasecolumndecodingstrategy\/custom(_:)","title":"case custom((String) -> CodingKey)","type":"case"},{"path":"\/documentation\/grdb\/databasecolumndecodingstrategy\/usedefaultkeys","title":"case useDefaultKeys","type":"case"}],"path":"\/documentation\/grdb\/databasecolumndecodingstrategy","title":"DatabaseColumnDecodingStrategy","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasedatedecodingstrategy\/custom(_:)","title":"case custom((DatabaseValue) -> Date?)","type":"case"},{"path":"\/documentation\/grdb\/databasedatedecodingstrategy\/deferredtodate","title":"case deferredToDate","type":"case"},{"path":"\/documentation\/grdb\/databasedatedecodingstrategy\/formatted(_:)","title":"case formatted(DateFormatter)","type":"case"},{"path":"\/documentation\/grdb\/databasedatedecodingstrategy\/iso8601","title":"case iso8601","type":"case"},{"path":"\/documentation\/grdb\/databasedatedecodingstrategy\/millisecondssince1970","title":"case millisecondsSince1970","type":"case"},{"path":"\/documentation\/grdb\/databasedatedecodingstrategy\/timeintervalsince1970","title":"case timeIntervalSince1970","type":"case"},{"path":"\/documentation\/grdb\/databasedatedecodingstrategy\/timeintervalsincereferencedate","title":"case timeIntervalSinceReferenceDate","type":"case"}],"path":"\/documentation\/grdb\/databasedatedecodingstrategy","title":"DatabaseDateDecodingStrategy","type":"enum"},{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/recordcursor\/element","title":"RecordCursor.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/recordcursor\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/recordcursor\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/contains(_:)","title":"func contains(Self.Element) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) -> DropWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/dropfirst()","title":"func dropFirst() -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/droplast()","title":"func dropLast() throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/droplast(_:)","title":"func dropLast(Int) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/enumerated()","title":"func enumerated() -> EnumeratedCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) -> FilterCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/flatmap(_:)-6xqvn","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>>","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/flatmap(_:)-8vayh","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) throws","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/joined()-3p8m7","title":"func joined() -> FlattenCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/joined()-5smvs","title":"func joined() -> FlattenCursor<MapCursor<Self, AnyCursor<Self.Element.Element>>>","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/joined(separator:)","title":"func joined(separator: String) throws -> String","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/map(_:)","title":"func map<T>((Self.Element) throws -> T) -> MapCursor<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/max()","title":"func max() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/min()","title":"func min() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/next()","title":"func next() throws -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/prefix(_:)","title":"func prefix(Int) -> PrefixCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) -> PrefixWhileCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> Void) throws -> Result","type":"method"},{"path":"\/documentation\/grdb\/recordcursor\/suffix(_:)","title":"func suffix(Int) throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/grdb\/recordcursor\/cursor-implementations","title":"Cursor Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/recordcursor\/arguments","title":"var arguments: StatementArguments","type":"property"},{"path":"\/documentation\/grdb\/recordcursor\/columncount","title":"var columnCount: Int","type":"property"},{"path":"\/documentation\/grdb\/recordcursor\/columnnames","title":"var columnNames: [String]","type":"property"},{"path":"\/documentation\/grdb\/recordcursor\/databaseregion","title":"var databaseRegion: DatabaseRegion","type":"property"},{"path":"\/documentation\/grdb\/recordcursor\/sql","title":"var sql: String","type":"property"}],"path":"\/documentation\/grdb\/recordcursor\/databasecursor-implementations","title":"DatabaseCursor Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/recordcursor","title":"RecordCursor","type":"class"}],"path":"\/documentation\/grdb\/fetchablerecord","title":"FetchableRecord","type":"protocol"},{"children":[{"title":"Testing if a Record Exists in the Database","type":"groupMarker"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/exists(_:)","title":"func exists(Database) throws -> Bool","type":"method"},{"title":"Inserting a Record","type":"groupMarker"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/insert(_:onconflict:)","title":"func insert(Database, onConflict: Database.ConflictResolution?) throws","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/inserted(_:onconflict:)","title":"func inserted(Database, onConflict: Database.ConflictResolution?) throws -> Self","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/upsert(_:)","title":"func upsert(Database) throws","type":"method"},{"title":"Inserting a Record and Fetching the Inserted Row","type":"groupMarker"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/insertandfetch(_:onconflict:)","title":"func insertAndFetch(Database, onConflict: Database.ConflictResolution?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/insertandfetch(_:onconflict:as:)","title":"func insertAndFetch<T>(Database, onConflict: Database.ConflictResolution?, as: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/insertandfetch(_:onconflict:selection:fetch:)","title":"func insertAndFetch<T>(Database, onConflict: Database.ConflictResolution?, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/upsertandfetch(_:onconflict:doupdate:)","title":"func upsertAndFetch(Database, onConflict: [String], doUpdate: ((TableAlias) -> [ColumnAssignment])?) throws -> Self","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/upsertandfetch(_:as:onconflict:doupdate:)","title":"func upsertAndFetch<T>(Database, as: T.Type, onConflict: [String], doUpdate: ((TableAlias) -> [ColumnAssignment])?) throws -> T","type":"method"},{"title":"Updating a Record","type":"groupMarker"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/update(_:onconflict:)","title":"func update(Database, onConflict: Database.ConflictResolution?) throws","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/update(_:onconflict:columns:)-4foo1","title":"func update<Columns>(Database, onConflict: Database.ConflictResolution?, columns: Columns) throws","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/update(_:onconflict:columns:)-5hxyx","title":"func update<Columns>(Database, onConflict: Database.ConflictResolution?, columns: Columns) throws","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/updatechanges(_:onconflict:from:)","title":"func updateChanges<Record>(Database, onConflict: Database.ConflictResolution?, from: Record) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/updatechanges(_:onconflict:modify:)","title":"func updateChanges(Database, onConflict: Database.ConflictResolution?, modify: (inout Self) throws -> Void) throws -> Bool","type":"method"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/persistenceerror\/recordnotfound(databasetablename:key:)","title":"case recordNotFound(databaseTableName: String, key: [String : DatabaseValue])","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/persistenceerror\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/grdb\/persistenceerror\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/persistenceerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/grdb\/persistenceerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/persistenceerror","title":"PersistenceError","type":"enum"},{"title":"Updating a Record and Fetching the Updated Row","type":"groupMarker"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/updateandfetch(_:onconflict:)","title":"func updateAndFetch(Database, onConflict: Database.ConflictResolution?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/updateandfetch(_:onconflict:as:)","title":"func updateAndFetch<T>(Database, onConflict: Database.ConflictResolution?, as: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/updateandfetch(_:onconflict:columns:selection:fetch:)-7s7y1","title":"func updateAndFetch<T, Columns>(Database, onConflict: Database.ConflictResolution?, columns: Columns, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/updateandfetch(_:onconflict:columns:selection:fetch:)-30d2v","title":"func updateAndFetch<T, Columns>(Database, onConflict: Database.ConflictResolution?, columns: Columns, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/updateandfetch(_:onconflict:selection:fetch:)","title":"func updateAndFetch<T>(Database, onConflict: Database.ConflictResolution?, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/updatechangesandfetch(_:onconflict:modify:)","title":"func updateChangesAndFetch(Database, onConflict: Database.ConflictResolution?, modify: (inout Self) throws -> Void) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/updatechangesandfetch(_:onconflict:as:modify:)","title":"func updateChangesAndFetch<T>(Database, onConflict: Database.ConflictResolution?, as: T.Type, modify: (inout Self) throws -> Void) throws -> T?","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/updatechangesandfetch(_:onconflict:selection:fetch:modify:)","title":"func updateChangesAndFetch<T>(Database, onConflict: Database.ConflictResolution?, selection: [SQLSelectable], fetch: (Statement) throws -> T?, modify: (inout Self) throws -> Void) throws -> T?","type":"method"},{"title":"Saving a Record","type":"groupMarker"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/save(_:onconflict:)","title":"func save(Database, onConflict: Database.ConflictResolution?) throws","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/saved(_:onconflict:)","title":"func saved(Database, onConflict: Database.ConflictResolution?) throws -> Self","type":"method"},{"title":"Saving a Record and Fetching the Saved Row","type":"groupMarker"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/saveandfetch(_:onconflict:)","title":"func saveAndFetch(Database, onConflict: Database.ConflictResolution?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/saveandfetch(_:onconflict:as:)","title":"func saveAndFetch<T>(Database, onConflict: Database.ConflictResolution?, as: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/saveandfetch(_:onconflict:selection:fetch:)","title":"func saveAndFetch<T>(Database, onConflict: Database.ConflictResolution?, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"title":"Deleting a Record","type":"groupMarker"},{"path":"\/documentation\/grdb\/mutablepersistablerecord\/delete(_:)","title":"func delete(Database) throws -> Bool","type":"method"},{"title":"Persistence Callbacks","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/mutablepersistablerecord\/willdelete(_:)-2nq4q","title":"func willDelete(Database) throws","type":"method"}],"title":"MutablePersistableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/mutablepersistablerecord\/willdelete(_:)-7rmqk","title":"func willDelete(Database) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/mutablepersistablerecord\/willinsert(_:)-5qw8w","title":"func willInsert(Database) throws","type":"method"}],"title":"MutablePersistableRecord Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/grdb\/persistablerecord\/willinsert(_:)-1krrv","title":"func willInsert(Database) throws","type":"method"}],"title":"PersistableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/mutablepersistablerecord\/willinsert(_:)-1xfwo","title":"func willInsert(Database) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/mutablepersistablerecord\/willsave(_:)-621bq","title":"func willSave(Database) throws","type":"method"}],"title":"MutablePersistableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/mutablepersistablerecord\/willsave(_:)-6jitc","title":"func willSave(Database) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/mutablepersistablerecord\/willupdate(_:columns:)-hrqj","title":"func willUpdate(Database, columns: Set<String>) throws","type":"method"}],"title":"MutablePersistableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/mutablepersistablerecord\/willupdate(_:columns:)-3oko4","title":"func willUpdate(Database, columns: Set<String>) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/mutablepersistablerecord\/diddelete(deleted:)-7cykm","title":"func didDelete(deleted: Bool)","type":"method"}],"title":"MutablePersistableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/mutablepersistablerecord\/diddelete(deleted:)-7sq9c","title":"func didDelete(deleted: Bool)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/mutablepersistablerecord\/didinsert(_:)-4xims","title":"func didInsert(InsertionSuccess)","type":"method"}],"title":"MutablePersistableRecord Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/grdb\/persistablerecord\/didinsert(_:)-779l6","title":"func didInsert(InsertionSuccess)","type":"method"}],"title":"PersistableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/mutablepersistablerecord\/didinsert(_:)-109jm","title":"func didInsert(InsertionSuccess)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/mutablepersistablerecord\/didsave(_:)-1pcf5","title":"func didSave(PersistenceSuccess)","type":"method"}],"title":"MutablePersistableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/mutablepersistablerecord\/didsave(_:)-177yz","title":"func didSave(PersistenceSuccess)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/mutablepersistablerecord\/didupdate(_:)-8cnrn","title":"func didUpdate(PersistenceSuccess)","type":"method"}],"title":"MutablePersistableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/mutablepersistablerecord\/didupdate(_:)-1oql8","title":"func didUpdate(PersistenceSuccess)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/mutablepersistablerecord\/arounddelete(_:delete:)-1mmtr","title":"func aroundDelete(Database, delete: () throws -> Bool) throws","type":"method"}],"title":"MutablePersistableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/mutablepersistablerecord\/arounddelete(_:delete:)-8w9ei","title":"func aroundDelete(Database, delete: () throws -> Bool) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/mutablepersistablerecord\/aroundinsert(_:insert:)-3qmds","title":"func aroundInsert(Database, insert: () throws -> InsertionSuccess) throws","type":"method"}],"title":"MutablePersistableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/mutablepersistablerecord\/aroundinsert(_:insert:)-67r8o","title":"func aroundInsert(Database, insert: () throws -> InsertionSuccess) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/mutablepersistablerecord\/aroundsave(_:save:)-7w6j3","title":"func aroundSave(Database, save: () throws -> PersistenceSuccess) throws","type":"method"}],"title":"MutablePersistableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/mutablepersistablerecord\/aroundsave(_:save:)-5o9jz","title":"func aroundSave(Database, save: () throws -> PersistenceSuccess) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/mutablepersistablerecord\/aroundupdate(_:columns:update:)-1edzl","title":"func aroundUpdate(Database, columns: Set<String>, update: () throws -> PersistenceSuccess) throws","type":"method"}],"title":"MutablePersistableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/mutablepersistablerecord\/aroundupdate(_:columns:update:)-ka41","title":"func aroundUpdate(Database, columns: Set<String>, update: () throws -> PersistenceSuccess) throws","type":"method"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/insertionsuccess\/persistencecontainer","title":"var persistenceContainer: PersistenceContainer","type":"property"},{"path":"\/documentation\/grdb\/insertionsuccess\/rowid","title":"var rowID: Int64","type":"property"},{"path":"\/documentation\/grdb\/insertionsuccess\/rowidcolumn","title":"var rowIDColumn: String?","type":"property"}],"path":"\/documentation\/grdb\/insertionsuccess","title":"InsertionSuccess","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/persistencesuccess\/persistencecontainer","title":"var persistenceContainer: PersistenceContainer","type":"property"}],"path":"\/documentation\/grdb\/persistencesuccess","title":"PersistenceSuccess","type":"struct"},{"title":"Configuring Persistence","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/mutablepersistablerecord\/persistenceconflictpolicy-5dlm8","title":"static var persistenceConflictPolicy: PersistenceConflictPolicy","type":"property"}],"title":"MutablePersistableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/mutablepersistablerecord\/persistenceconflictpolicy-1isyv","title":"static var persistenceConflictPolicy: PersistenceConflictPolicy","type":"property"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/persistenceconflictpolicy\/init(insert:update:)","title":"init(insert: Database.ConflictResolution, update: Database.ConflictResolution)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/persistenceconflictpolicy\/conflictresolutionforinsert","title":"let conflictResolutionForInsert: Database.ConflictResolution","type":"property"},{"path":"\/documentation\/grdb\/persistenceconflictpolicy\/conflictresolutionforupdate","title":"let conflictResolutionForUpdate: Database.ConflictResolution","type":"property"}],"path":"\/documentation\/grdb\/persistenceconflictpolicy","title":"PersistenceConflictPolicy","type":"struct"}],"path":"\/documentation\/grdb\/mutablepersistablerecord","title":"MutablePersistableRecord","type":"protocol"},{"children":[{"title":"Inserting a Record","type":"groupMarker"},{"path":"\/documentation\/grdb\/persistablerecord\/insert(_:onconflict:)","title":"func insert(Database, onConflict: Database.ConflictResolution?) throws","type":"method"},{"path":"\/documentation\/grdb\/persistablerecord\/upsert(_:)","title":"func upsert(Database) throws","type":"method"},{"title":"Inserting a Record and Fetching the Inserted Row","type":"groupMarker"},{"path":"\/documentation\/grdb\/persistablerecord\/insertandfetch(_:onconflict:as:)","title":"func insertAndFetch<T>(Database, onConflict: Database.ConflictResolution?, as: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/grdb\/persistablerecord\/insertandfetch(_:onconflict:selection:fetch:)","title":"func insertAndFetch<T>(Database, onConflict: Database.ConflictResolution?, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/grdb\/persistablerecord\/upsertandfetch(_:onconflict:doupdate:)","title":"func upsertAndFetch(Database, onConflict: [String], doUpdate: ((TableAlias) -> [ColumnAssignment])?) throws -> Self","type":"method"},{"path":"\/documentation\/grdb\/persistablerecord\/upsertandfetch(_:as:onconflict:doupdate:)","title":"func upsertAndFetch<T>(Database, as: T.Type, onConflict: [String], doUpdate: ((TableAlias) -> [ColumnAssignment])?) throws -> T","type":"method"},{"title":"Saving a Record","type":"groupMarker"},{"path":"\/documentation\/grdb\/persistablerecord\/save(_:onconflict:)","title":"func save(Database, onConflict: Database.ConflictResolution?) throws","type":"method"},{"title":"Saving a Record and Fetching the Saved Row","type":"groupMarker"},{"path":"\/documentation\/grdb\/persistablerecord\/saveandfetch(_:onconflict:as:)","title":"func saveAndFetch<T>(Database, onConflict: Database.ConflictResolution?, as: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/grdb\/persistablerecord\/saveandfetch(_:onconflict:selection:fetch:)","title":"func saveAndFetch<T>(Database, onConflict: Database.ConflictResolution?, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"title":"Persistence Callbacks","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/persistablerecord\/willinsert(_:)-1krrv","title":"func willInsert(Database) throws","type":"method"}],"title":"PersistableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/persistablerecord\/willinsert(_:)-5x6sh","title":"func willInsert(Database) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/persistablerecord\/didinsert(_:)-779l6","title":"func didInsert(InsertionSuccess)","type":"method"}],"title":"PersistableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/persistablerecord\/didinsert(_:)-9jpoy","title":"func didInsert(InsertionSuccess)","type":"method"}],"path":"\/documentation\/grdb\/persistablerecord","title":"PersistableRecord","type":"protocol"},{"children":[{"title":"Configuring the Generated SQL","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/tablerecord\/databasetablename-8io8v","title":"static var databaseTableName: String","type":"property"}],"title":"TableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/tablerecord\/databasetablename-3tcw2","title":"static var databaseTableName: String","type":"property"},{"children":[{"children":[{"path":"\/documentation\/grdb\/tablerecord\/databaseselection-6bvg","title":"static var databaseSelection: [SQLSelectable]","type":"property"}],"title":"TableRecord Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/tablerecord\/databaseselection-7iphs","title":"static var databaseSelection: [SQLSelectable]","type":"property"},{"path":"\/documentation\/grdb\/tablerecord\/numberofselectedcolumns(_:)","title":"static func numberOfSelectedColumns(Database) throws -> Int","type":"method"},{"title":"Counting Records","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablerecord\/fetchcount(_:)","title":"static func fetchCount(Database) throws -> Int","type":"method"},{"title":"Testing for Record Existence","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablerecord\/exists(_:id:)","title":"static func exists(Database, id: Self.ID) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/exists(_:key:)-60hf2","title":"static func exists(Database, key: some DatabaseValueConvertible) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/exists(_:key:)-6ha6","title":"static func exists(Database, key: [String : (DatabaseValueConvertible)?]) throws -> Bool","type":"method"},{"title":"Deleting Records","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablerecord\/deleteall(_:)","title":"static func deleteAll(Database) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/deleteall(_:ids:)","title":"static func deleteAll<IDS>(Database, ids: IDS) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/deleteall(_:keys:)-jbkm","title":"static func deleteAll<Keys>(Database, keys: Keys) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/deleteall(_:keys:)-5s1jg","title":"static func deleteAll(Database, keys: [[String : (DatabaseValueConvertible)?]]) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/deleteone(_:id:)","title":"static func deleteOne(Database, id: Self.ID) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/deleteone(_:key:)-413u8","title":"static func deleteOne(Database, key: some DatabaseValueConvertible) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/deleteone(_:key:)-5pdh5","title":"static func deleteOne(Database, key: [String : (DatabaseValueConvertible)?]) throws -> Bool","type":"method"},{"title":"Updating Records","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablerecord\/updateall(_:onconflict:_:)-7vv9x","title":"static func updateAll(Database, onConflict: Database.ConflictResolution?, ColumnAssignment...) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/updateall(_:onconflict:_:)-7atfw","title":"static func updateAll(Database, onConflict: Database.ConflictResolution?, [ColumnAssignment]) throws -> Int","type":"method"},{"title":"Building Query Interface Requests","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablerecord\/aliased(_:)","title":"static func aliased(TableAlias) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/all()","title":"static func all() -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/annotated(with:)-3zi1n","title":"static func annotated(with: [SQLSelectable]) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/annotated(with:)-4xoen","title":"static func annotated(with: AssociationAggregate<Self>...) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/annotated(with:)-8ce7u","title":"static func annotated(with: [AssociationAggregate<Self>]) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/annotated(with:)-79389","title":"static func annotated(with: SQLSelectable...) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/annotated(withoptional:)","title":"static func annotated<A>(withOptional: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/annotated(withrequired:)","title":"static func annotated<A>(withRequired: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/filter(_:)","title":"static func filter(some SQLSpecificExpressible) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/filter(id:)","title":"static func filter(id: Self.ID) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/filter(ids:)","title":"static func filter<IDS>(ids: IDS) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/filter(key:)-9ey53","title":"static func filter(key: [String : (DatabaseValueConvertible)?]?) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/filter(key:)-34lau","title":"static func filter(key: some DatabaseValueConvertible) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/filter(keys:)-4hq8y","title":"static func filter(keys: [[String : (DatabaseValueConvertible)?]]) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/filter(keys:)-7skw1","title":"static func filter<Keys>(keys: Keys) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/filter(literal:)","title":"static func filter(literal: SQL) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/filter(sql:arguments:)","title":"static func filter(sql: String, arguments: StatementArguments) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/having(_:)","title":"static func having(AssociationAggregate<Self>) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/including(all:)","title":"static func including<A>(all: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/including(optional:)","title":"static func including<A>(optional: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/including(required:)","title":"static func including<A>(required: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/joining(optional:)","title":"static func joining<A>(optional: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/joining(required:)","title":"static func joining<A>(required: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/limit(_:offset:)","title":"static func limit(Int, offset: Int?) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/matching(_:)","title":"static func matching(FTS3Pattern?) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/none()","title":"static func none() -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/order(_:)-9rc11","title":"static func order([SQLOrderingTerm]) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/order(_:)-2033k","title":"static func order(SQLOrderingTerm...) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/order(literal:)","title":"static func order(literal: SQL) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/order(sql:arguments:)","title":"static func order(sql: String, arguments: StatementArguments) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/orderbyprimarykey()","title":"static func orderByPrimaryKey() -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/request(for:)","title":"func request<A>(for: A) -> QueryInterfaceRequest<A.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/select(_:)-1gvtj","title":"static func select([SQLSelectable]) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/select(_:)-5oylt","title":"static func select(SQLSelectable...) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/select(_:as:)-1puz3","title":"static func select<RowDecoder>(SQLSelectable..., as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/select(_:as:)-tjh0","title":"static func select<RowDecoder>([SQLSelectable], as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/select(literal:)","title":"static func select(literal: SQL) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/select(literal:as:)","title":"static func select<RowDecoder>(literal: SQL, as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/select(sql:arguments:)","title":"static func select(sql: String, arguments: StatementArguments) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/select(sql:arguments:as:)","title":"static func select<RowDecoder>(sql: String, arguments: StatementArguments, as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/selectprimarykey(as:)","title":"static func selectPrimaryKey<PrimaryKey>(as: PrimaryKey.Type) -> QueryInterfaceRequest<PrimaryKey>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/with(_:)","title":"static func with<RowDecoder>(CommonTableExpression<RowDecoder>) -> QueryInterfaceRequest<Self>","type":"method"},{"title":"Defining Associations","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablerecord\/association(to:)","title":"static func association<Destination>(to: CommonTableExpression<Destination>) -> JoinAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/association(to:on:)","title":"static func association<Destination>(to: CommonTableExpression<Destination>, on: (TableAlias, TableAlias) -> SQLExpressible) -> JoinAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/belongsto(_:key:using:)-13t5r","title":"static func belongsTo<Destination>(Destination.Type, key: String?, using: ForeignKey?) -> BelongsToAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/belongsto(_:key:using:)-81six","title":"static func belongsTo<Destination>(Table<Destination>, key: String?, using: ForeignKey?) -> BelongsToAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/hasmany(_:key:using:)-45axo","title":"static func hasMany<Destination>(Destination.Type, key: String?, using: ForeignKey?) -> HasManyAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/hasmany(_:key:using:)-10d4k","title":"static func hasMany<Destination>(Table<Destination>, key: String?, using: ForeignKey?) -> HasManyAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/hasmany(_:through:using:key:)","title":"static func hasMany<Pivot, Target>(Target.RowDecoder.Type, through: Pivot, using: Target, key: String?) -> HasManyThroughAssociation<Self, Target.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/hasone(_:key:using:)-4g9tm","title":"static func hasOne<Destination>(Destination.Type, key: String?, using: ForeignKey?) -> HasOneAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/hasone(_:key:using:)-4v5xa","title":"static func hasOne<Destination>(Table<Destination>, key: String?, using: ForeignKey?) -> HasOneAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/grdb\/tablerecord\/hasone(_:through:using:key:)","title":"static func hasOne<Pivot, Target>(Target.RowDecoder.Type, through: Pivot, using: Target, key: String?) -> HasOneThroughAssociation<Self, Target.RowDecoder>","type":"method"}],"path":"\/documentation\/grdb\/tablerecord","title":"TableRecord","type":"protocol"},{"title":"Associations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/association\/forkey(_:)-54yh6","title":"func forKey(some CodingKey) -> Self","type":"method"}],"title":"Association Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/grdb\/associationtomany\/forkey(_:)","title":"func forKey(String) -> Self","type":"method"}],"title":"AssociationToMany Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/grdb\/associationtoone\/forkey(_:)","title":"func forKey(String) -> Self","type":"method"}],"title":"AssociationToOne Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/association\/forkey(_:)-247af","title":"func forKey(String) -> Self","type":"method"},{"path":"\/documentation\/grdb\/association\/forkey(_:)-54yh6","title":"func forKey(some CodingKey) -> Self","type":"method"},{"title":"Associations To One","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/belongstoassociation\/group(_:)","title":"func group([SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/group(literal:)","title":"func group(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/group(sql:arguments:)","title":"func group(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/groupwhenconnected(_:)","title":"func groupWhenConnected((Database) throws -> [SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/having(literal:)","title":"func having(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/having(sql:arguments:)","title":"func having(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/havingwhenconnected(_:)","title":"func havingWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"}],"path":"\/documentation\/grdb\/belongstoassociation\/aggregatingrequest-implementations","title":"AggregatingRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/belongstoassociation\/forkey(_:)","title":"func forKey(String) -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/belongstoassociation\/originrowdecoder","title":"BelongsToAssociation.OriginRowDecoder","type":"typealias"}],"path":"\/documentation\/grdb\/belongstoassociation\/association-implementations","title":"Association Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/belongstoassociation\/annotated(with:)","title":"func annotated(with: [AssociationAggregate<Self.RowDecoder>]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/distinct()","title":"func distinct() -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/having(_:)","title":"func having(AssociationAggregate<Self.RowDecoder>) -> Self","type":"method"}],"path":"\/documentation\/grdb\/belongstoassociation\/derivablerequest-implementations","title":"DerivableRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/belongstoassociation\/filter(_:)","title":"func filter(some SQLSpecificExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/filter(literal:)","title":"func filter(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/filter(sql:arguments:)","title":"func filter(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/filterwhenconnected(_:)","title":"func filterWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/none()","title":"func none() -> Self","type":"method"}],"path":"\/documentation\/grdb\/belongstoassociation\/filteredrequest-implementations","title":"FilteredRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/belongstoassociation\/annotated(withoptional:)","title":"func annotated<A>(withOptional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/annotated(withrequired:)","title":"func annotated<A>(withRequired: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/including(all:)","title":"func including<A>(all: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/including(optional:)","title":"func including<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/including(required:)","title":"func including<A>(required: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/joining(optional:)","title":"func joining<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/joining(required:)","title":"func joining<A>(required: A) -> Self","type":"method"}],"path":"\/documentation\/grdb\/belongstoassociation\/joinablerequest-implementations","title":"JoinableRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/belongstoassociation\/order(_:)","title":"func order([SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/order(literal:)","title":"func order(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/order(sql:arguments:)","title":"func order(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/orderwhenconnected(_:)","title":"func orderWhenConnected((Database) throws -> [SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/reversed()","title":"func reversed() -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/unordered()","title":"func unordered() -> Self","type":"method"}],"path":"\/documentation\/grdb\/belongstoassociation\/orderedrequest-implementations","title":"OrderedRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/belongstoassociation\/annotatedwhenconnected(with:)","title":"func annotatedWhenConnected(with: (Database) throws -> [SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/select(_:)","title":"func select([SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/select(literal:)","title":"func select(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/select(sql:arguments:)","title":"func select(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/selectwhenconnected(_:)","title":"func selectWhenConnected((Database) throws -> [SQLSelectable]) -> Self","type":"method"}],"path":"\/documentation\/grdb\/belongstoassociation\/selectionrequest-implementations","title":"SelectionRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/belongstoassociation\/databasetablename","title":"var databaseTableName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/belongstoassociation\/aliased(_:)","title":"func aliased(TableAlias) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/filter(key:)","title":"func filter(key: [String : (DatabaseValueConvertible)?]?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/filter(keys:)","title":"func filter(keys: [[String : (DatabaseValueConvertible)?]]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/groupbyprimarykey()","title":"func groupByPrimaryKey() -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/matching(_:)","title":"func matching(FTS3Pattern?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/belongstoassociation\/orderbyprimarykey()","title":"func orderByPrimaryKey() -> Self","type":"method"}],"path":"\/documentation\/grdb\/belongstoassociation\/tablerequest-implementations","title":"TableRequest Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/belongstoassociation\/rowdecoder","title":"BelongsToAssociation.RowDecoder","type":"typealias"}],"path":"\/documentation\/grdb\/belongstoassociation\/typedrequest-implementations","title":"TypedRequest Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/belongstoassociation","title":"BelongsToAssociation","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasoneassociation\/group(_:)","title":"func group([SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/group(literal:)","title":"func group(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/group(sql:arguments:)","title":"func group(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/groupwhenconnected(_:)","title":"func groupWhenConnected((Database) throws -> [SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/having(literal:)","title":"func having(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/having(sql:arguments:)","title":"func having(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/havingwhenconnected(_:)","title":"func havingWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasoneassociation\/aggregatingrequest-implementations","title":"AggregatingRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasoneassociation\/forkey(_:)","title":"func forKey(String) -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasoneassociation\/originrowdecoder","title":"HasOneAssociation.OriginRowDecoder","type":"typealias"}],"path":"\/documentation\/grdb\/hasoneassociation\/association-implementations","title":"Association Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasoneassociation\/annotated(with:)","title":"func annotated(with: [AssociationAggregate<Self.RowDecoder>]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/distinct()","title":"func distinct() -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/having(_:)","title":"func having(AssociationAggregate<Self.RowDecoder>) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasoneassociation\/derivablerequest-implementations","title":"DerivableRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasoneassociation\/filter(_:)","title":"func filter(some SQLSpecificExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/filter(literal:)","title":"func filter(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/filter(sql:arguments:)","title":"func filter(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/filterwhenconnected(_:)","title":"func filterWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/none()","title":"func none() -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasoneassociation\/filteredrequest-implementations","title":"FilteredRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasoneassociation\/annotated(withoptional:)","title":"func annotated<A>(withOptional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/annotated(withrequired:)","title":"func annotated<A>(withRequired: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/including(all:)","title":"func including<A>(all: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/including(optional:)","title":"func including<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/including(required:)","title":"func including<A>(required: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/joining(optional:)","title":"func joining<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/joining(required:)","title":"func joining<A>(required: A) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasoneassociation\/joinablerequest-implementations","title":"JoinableRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasoneassociation\/order(_:)","title":"func order([SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/order(literal:)","title":"func order(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/order(sql:arguments:)","title":"func order(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/orderwhenconnected(_:)","title":"func orderWhenConnected((Database) throws -> [SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/reversed()","title":"func reversed() -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/unordered()","title":"func unordered() -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasoneassociation\/orderedrequest-implementations","title":"OrderedRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasoneassociation\/annotatedwhenconnected(with:)","title":"func annotatedWhenConnected(with: (Database) throws -> [SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/select(_:)","title":"func select([SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/select(literal:)","title":"func select(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/select(sql:arguments:)","title":"func select(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/selectwhenconnected(_:)","title":"func selectWhenConnected((Database) throws -> [SQLSelectable]) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasoneassociation\/selectionrequest-implementations","title":"SelectionRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasoneassociation\/databasetablename","title":"var databaseTableName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasoneassociation\/aliased(_:)","title":"func aliased(TableAlias) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/filter(key:)","title":"func filter(key: [String : (DatabaseValueConvertible)?]?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/filter(keys:)","title":"func filter(keys: [[String : (DatabaseValueConvertible)?]]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/groupbyprimarykey()","title":"func groupByPrimaryKey() -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/matching(_:)","title":"func matching(FTS3Pattern?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasoneassociation\/orderbyprimarykey()","title":"func orderByPrimaryKey() -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasoneassociation\/tablerequest-implementations","title":"TableRequest Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasoneassociation\/rowdecoder","title":"HasOneAssociation.RowDecoder","type":"typealias"}],"path":"\/documentation\/grdb\/hasoneassociation\/typedrequest-implementations","title":"TypedRequest Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/hasoneassociation","title":"HasOneAssociation","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/group(_:)","title":"func group([SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/group(literal:)","title":"func group(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/group(sql:arguments:)","title":"func group(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/groupwhenconnected(_:)","title":"func groupWhenConnected((Database) throws -> [SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/having(literal:)","title":"func having(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/having(sql:arguments:)","title":"func having(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/havingwhenconnected(_:)","title":"func havingWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasonethroughassociation\/aggregatingrequest-implementations","title":"AggregatingRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/forkey(_:)","title":"func forKey(String) -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/originrowdecoder","title":"HasOneThroughAssociation.OriginRowDecoder","type":"typealias"}],"path":"\/documentation\/grdb\/hasonethroughassociation\/association-implementations","title":"Association Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/annotated(with:)","title":"func annotated(with: [AssociationAggregate<Self.RowDecoder>]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/distinct()","title":"func distinct() -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/having(_:)","title":"func having(AssociationAggregate<Self.RowDecoder>) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasonethroughassociation\/derivablerequest-implementations","title":"DerivableRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/filter(_:)","title":"func filter(some SQLSpecificExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/filter(literal:)","title":"func filter(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/filter(sql:arguments:)","title":"func filter(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/filterwhenconnected(_:)","title":"func filterWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/none()","title":"func none() -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasonethroughassociation\/filteredrequest-implementations","title":"FilteredRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/annotated(withoptional:)","title":"func annotated<A>(withOptional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/annotated(withrequired:)","title":"func annotated<A>(withRequired: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/including(all:)","title":"func including<A>(all: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/including(optional:)","title":"func including<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/including(required:)","title":"func including<A>(required: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/joining(optional:)","title":"func joining<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/joining(required:)","title":"func joining<A>(required: A) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasonethroughassociation\/joinablerequest-implementations","title":"JoinableRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/order(_:)","title":"func order([SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/order(literal:)","title":"func order(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/order(sql:arguments:)","title":"func order(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/orderwhenconnected(_:)","title":"func orderWhenConnected((Database) throws -> [SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/reversed()","title":"func reversed() -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/unordered()","title":"func unordered() -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasonethroughassociation\/orderedrequest-implementations","title":"OrderedRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/annotatedwhenconnected(with:)","title":"func annotatedWhenConnected(with: (Database) throws -> [SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/select(_:)","title":"func select([SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/select(literal:)","title":"func select(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/select(sql:arguments:)","title":"func select(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/selectwhenconnected(_:)","title":"func selectWhenConnected((Database) throws -> [SQLSelectable]) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasonethroughassociation\/selectionrequest-implementations","title":"SelectionRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/databasetablename","title":"var databaseTableName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/aliased(_:)","title":"func aliased(TableAlias) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/filter(key:)","title":"func filter(key: [String : (DatabaseValueConvertible)?]?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/filter(keys:)","title":"func filter(keys: [[String : (DatabaseValueConvertible)?]]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/groupbyprimarykey()","title":"func groupByPrimaryKey() -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/matching(_:)","title":"func matching(FTS3Pattern?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/orderbyprimarykey()","title":"func orderByPrimaryKey() -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasonethroughassociation\/tablerequest-implementations","title":"TableRequest Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasonethroughassociation\/rowdecoder","title":"HasOneThroughAssociation.RowDecoder","type":"typealias"}],"path":"\/documentation\/grdb\/hasonethroughassociation\/typedrequest-implementations","title":"TypedRequest Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/hasonethroughassociation","title":"HasOneThroughAssociation","type":"struct"},{"path":"\/documentation\/grdb\/associationtoone","title":"AssociationToOne","type":"protocol"},{"title":"Associations To Many","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanyassociation\/group(_:)","title":"func group([SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/group(literal:)","title":"func group(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/group(sql:arguments:)","title":"func group(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/groupwhenconnected(_:)","title":"func groupWhenConnected((Database) throws -> [SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/having(literal:)","title":"func having(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/having(sql:arguments:)","title":"func having(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/havingwhenconnected(_:)","title":"func havingWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasmanyassociation\/aggregatingrequest-implementations","title":"AggregatingRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanyassociation\/forkey(_:)","title":"func forKey(String) -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanyassociation\/originrowdecoder","title":"HasManyAssociation.OriginRowDecoder","type":"typealias"}],"path":"\/documentation\/grdb\/hasmanyassociation\/association-implementations","title":"Association Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanyassociation\/count","title":"var count: AssociationAggregate<Self.OriginRowDecoder>","type":"property"},{"path":"\/documentation\/grdb\/hasmanyassociation\/isempty","title":"var isEmpty: AssociationAggregate<Self.OriginRowDecoder>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanyassociation\/average(_:)","title":"func average(some SQLSpecificExpressible) -> AssociationAggregate<Self.OriginRowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/max(_:)","title":"func max(some SQLSpecificExpressible) -> AssociationAggregate<Self.OriginRowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/min(_:)","title":"func min(some SQLSpecificExpressible) -> AssociationAggregate<Self.OriginRowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/sum(_:)","title":"func sum(some SQLSpecificExpressible) -> AssociationAggregate<Self.OriginRowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/total(_:)","title":"func total(some SQLSpecificExpressible) -> AssociationAggregate<Self.OriginRowDecoder>","type":"method"}],"path":"\/documentation\/grdb\/hasmanyassociation\/associationtomany-implementations","title":"AssociationToMany Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanyassociation\/annotated(with:)","title":"func annotated(with: [AssociationAggregate<Self.RowDecoder>]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/distinct()","title":"func distinct() -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/having(_:)","title":"func having(AssociationAggregate<Self.RowDecoder>) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasmanyassociation\/derivablerequest-implementations","title":"DerivableRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanyassociation\/filter(_:)","title":"func filter(some SQLSpecificExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/filter(literal:)","title":"func filter(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/filter(sql:arguments:)","title":"func filter(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/filterwhenconnected(_:)","title":"func filterWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/none()","title":"func none() -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasmanyassociation\/filteredrequest-implementations","title":"FilteredRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanyassociation\/annotated(withoptional:)","title":"func annotated<A>(withOptional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/annotated(withrequired:)","title":"func annotated<A>(withRequired: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/including(all:)","title":"func including<A>(all: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/including(optional:)","title":"func including<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/including(required:)","title":"func including<A>(required: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/joining(optional:)","title":"func joining<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/joining(required:)","title":"func joining<A>(required: A) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasmanyassociation\/joinablerequest-implementations","title":"JoinableRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanyassociation\/order(_:)","title":"func order([SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/order(literal:)","title":"func order(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/order(sql:arguments:)","title":"func order(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/orderwhenconnected(_:)","title":"func orderWhenConnected((Database) throws -> [SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/reversed()","title":"func reversed() -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/unordered()","title":"func unordered() -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasmanyassociation\/orderedrequest-implementations","title":"OrderedRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanyassociation\/annotatedwhenconnected(with:)","title":"func annotatedWhenConnected(with: (Database) throws -> [SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/select(_:)","title":"func select([SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/select(literal:)","title":"func select(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/select(sql:arguments:)","title":"func select(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/selectwhenconnected(_:)","title":"func selectWhenConnected((Database) throws -> [SQLSelectable]) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasmanyassociation\/selectionrequest-implementations","title":"SelectionRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanyassociation\/databasetablename","title":"var databaseTableName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanyassociation\/aliased(_:)","title":"func aliased(TableAlias) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/filter(key:)","title":"func filter(key: [String : (DatabaseValueConvertible)?]?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/filter(keys:)","title":"func filter(keys: [[String : (DatabaseValueConvertible)?]]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/groupbyprimarykey()","title":"func groupByPrimaryKey() -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/matching(_:)","title":"func matching(FTS3Pattern?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanyassociation\/orderbyprimarykey()","title":"func orderByPrimaryKey() -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasmanyassociation\/tablerequest-implementations","title":"TableRequest Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanyassociation\/rowdecoder","title":"HasManyAssociation.RowDecoder","type":"typealias"}],"path":"\/documentation\/grdb\/hasmanyassociation\/typedrequest-implementations","title":"TypedRequest Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/hasmanyassociation","title":"HasManyAssociation","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/group(_:)","title":"func group([SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/group(literal:)","title":"func group(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/group(sql:arguments:)","title":"func group(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/groupwhenconnected(_:)","title":"func groupWhenConnected((Database) throws -> [SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/having(literal:)","title":"func having(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/having(sql:arguments:)","title":"func having(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/havingwhenconnected(_:)","title":"func havingWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasmanythroughassociation\/aggregatingrequest-implementations","title":"AggregatingRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/forkey(_:)","title":"func forKey(String) -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/originrowdecoder","title":"HasManyThroughAssociation.OriginRowDecoder","type":"typealias"}],"path":"\/documentation\/grdb\/hasmanythroughassociation\/association-implementations","title":"Association Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/count","title":"var count: AssociationAggregate<Self.OriginRowDecoder>","type":"property"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/isempty","title":"var isEmpty: AssociationAggregate<Self.OriginRowDecoder>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/average(_:)","title":"func average(some SQLSpecificExpressible) -> AssociationAggregate<Self.OriginRowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/max(_:)","title":"func max(some SQLSpecificExpressible) -> AssociationAggregate<Self.OriginRowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/min(_:)","title":"func min(some SQLSpecificExpressible) -> AssociationAggregate<Self.OriginRowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/sum(_:)","title":"func sum(some SQLSpecificExpressible) -> AssociationAggregate<Self.OriginRowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/total(_:)","title":"func total(some SQLSpecificExpressible) -> AssociationAggregate<Self.OriginRowDecoder>","type":"method"}],"path":"\/documentation\/grdb\/hasmanythroughassociation\/associationtomany-implementations","title":"AssociationToMany Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/annotated(with:)","title":"func annotated(with: [AssociationAggregate<Self.RowDecoder>]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/distinct()","title":"func distinct() -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/having(_:)","title":"func having(AssociationAggregate<Self.RowDecoder>) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasmanythroughassociation\/derivablerequest-implementations","title":"DerivableRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/filter(_:)","title":"func filter(some SQLSpecificExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/filter(literal:)","title":"func filter(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/filter(sql:arguments:)","title":"func filter(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/filterwhenconnected(_:)","title":"func filterWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/none()","title":"func none() -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasmanythroughassociation\/filteredrequest-implementations","title":"FilteredRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/annotated(withoptional:)","title":"func annotated<A>(withOptional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/annotated(withrequired:)","title":"func annotated<A>(withRequired: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/including(all:)","title":"func including<A>(all: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/including(optional:)","title":"func including<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/including(required:)","title":"func including<A>(required: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/joining(optional:)","title":"func joining<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/joining(required:)","title":"func joining<A>(required: A) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasmanythroughassociation\/joinablerequest-implementations","title":"JoinableRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/order(_:)","title":"func order([SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/order(literal:)","title":"func order(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/order(sql:arguments:)","title":"func order(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/orderwhenconnected(_:)","title":"func orderWhenConnected((Database) throws -> [SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/reversed()","title":"func reversed() -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/unordered()","title":"func unordered() -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasmanythroughassociation\/orderedrequest-implementations","title":"OrderedRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/annotatedwhenconnected(with:)","title":"func annotatedWhenConnected(with: (Database) throws -> [SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/select(_:)","title":"func select([SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/select(literal:)","title":"func select(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/select(sql:arguments:)","title":"func select(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/selectwhenconnected(_:)","title":"func selectWhenConnected((Database) throws -> [SQLSelectable]) -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasmanythroughassociation\/selectionrequest-implementations","title":"SelectionRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/databasetablename","title":"var databaseTableName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/aliased(_:)","title":"func aliased(TableAlias) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/filter(key:)","title":"func filter(key: [String : (DatabaseValueConvertible)?]?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/filter(keys:)","title":"func filter(keys: [[String : (DatabaseValueConvertible)?]]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/groupbyprimarykey()","title":"func groupByPrimaryKey() -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/matching(_:)","title":"func matching(FTS3Pattern?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/orderbyprimarykey()","title":"func orderByPrimaryKey() -> Self","type":"method"}],"path":"\/documentation\/grdb\/hasmanythroughassociation\/tablerequest-implementations","title":"TableRequest Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/hasmanythroughassociation\/rowdecoder","title":"HasManyThroughAssociation.RowDecoder","type":"typealias"}],"path":"\/documentation\/grdb\/hasmanythroughassociation\/typedrequest-implementations","title":"TypedRequest Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/hasmanythroughassociation","title":"HasManyThroughAssociation","type":"struct"},{"children":[{"title":"Building Association Aggregates","type":"groupMarker"},{"path":"\/documentation\/grdb\/associationtomany\/average(_:)","title":"func average(some SQLSpecificExpressible) -> AssociationAggregate<Self.OriginRowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/associationtomany\/count","title":"var count: AssociationAggregate<Self.OriginRowDecoder>","type":"property"},{"path":"\/documentation\/grdb\/associationtomany\/isempty","title":"var isEmpty: AssociationAggregate<Self.OriginRowDecoder>","type":"property"},{"path":"\/documentation\/grdb\/associationtomany\/max(_:)","title":"func max(some SQLSpecificExpressible) -> AssociationAggregate<Self.OriginRowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/associationtomany\/min(_:)","title":"func min(some SQLSpecificExpressible) -> AssociationAggregate<Self.OriginRowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/associationtomany\/sum(_:)","title":"func sum(some SQLSpecificExpressible) -> AssociationAggregate<Self.OriginRowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/associationtomany\/total(_:)","title":"func total(some SQLSpecificExpressible) -> AssociationAggregate<Self.OriginRowDecoder>","type":"method"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/associationaggregate\/forkey(_:)-1rvux","title":"func forKey(String) -> AssociationAggregate<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/associationaggregate\/forkey(_:)-1ua4j","title":"func forKey(some CodingKey) -> AssociationAggregate<RowDecoder>","type":"method"},{"title":"Top-Level Functions","type":"groupMarker"},{"path":"\/documentation\/grdb\/abs(_:)-43n8v","title":"func abs<RowDecoder>(AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"func"},{"path":"\/documentation\/grdb\/length(_:)-9dr2v","title":"func length<RowDecoder>(AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"func"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/associationaggregate\/!(_:)","title":"static func ! (AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/!=(_:_:)-6mcqk","title":"static func != (AssociationAggregate<RowDecoder>, (SQLExpressible)?) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/!=(_:_:)-85lhk","title":"static func != (Bool, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/!=(_:_:)-978el","title":"static func != (AssociationAggregate<RowDecoder>, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/!=(_:_:)-9xkok","title":"static func != (AssociationAggregate<RowDecoder>, Bool) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/!=(_:_:)-9zkh8","title":"static func != ((SQLExpressible)?, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/!==(_:_:)-2tnts","title":"static func !== (AssociationAggregate<RowDecoder>, (SQLExpressible)?) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/!==(_:_:)-4z27v","title":"static func !== ((SQLExpressible)?, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/!==(_:_:)-778pp","title":"static func !== (AssociationAggregate<RowDecoder>, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/&&(_:_:)-539d5","title":"static func && (AssociationAggregate<RowDecoder>, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/&&(_:_:)-6hndi","title":"static func && (some SQLExpressible, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/&&(_:_:)-8pwvv","title":"static func && (AssociationAggregate<RowDecoder>, some SQLExpressible) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/*(_:_:)-1n0bw","title":"static func * (some SQLExpressible, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/*(_:_:)-507nk","title":"static func * (AssociationAggregate<RowDecoder>, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/*(_:_:)-7edi4","title":"static func * (AssociationAggregate<RowDecoder>, some SQLExpressible) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/+(_:_:)-44bhl","title":"static func + (some SQLExpressible, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/+(_:_:)-88l14","title":"static func + (AssociationAggregate<RowDecoder>, some SQLExpressible) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/+(_:_:)-johd","title":"static func + (AssociationAggregate<RowDecoder>, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/-(_:)","title":"static func - (AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/-(_:_:)-3k185","title":"static func - (AssociationAggregate<RowDecoder>, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/-(_:_:)-7hxg3","title":"static func - (some SQLExpressible, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/-(_:_:)-bgdw","title":"static func - (AssociationAggregate<RowDecoder>, some SQLExpressible) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/\/(_:_:)-4p05i","title":"static func \/ (some SQLExpressible, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/\/(_:_:)-8kpkz","title":"static func \/ (AssociationAggregate<RowDecoder>, some SQLExpressible) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/\/(_:_:)-9ydh7","title":"static func \/ (AssociationAggregate<RowDecoder>, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/==(_:_:)-1m0yp","title":"static func == ((SQLExpressible)?, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/==(_:_:)-2h3zq","title":"static func == (AssociationAggregate<RowDecoder>, Bool) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/==(_:_:)-4v13y","title":"static func == (AssociationAggregate<RowDecoder>, (SQLExpressible)?) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/==(_:_:)-60wvl","title":"static func == (Bool, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/==(_:_:)-7t8ac","title":"static func == (AssociationAggregate<RowDecoder>, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/===(_:_:)-40c8k","title":"static func === (AssociationAggregate<RowDecoder>, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/===(_:_:)-4mxd9","title":"static func === (AssociationAggregate<RowDecoder>, (SQLExpressible)?) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/===(_:_:)-8ai4e","title":"static func === ((SQLExpressible)?, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/_(_:_:)-3bi6j","title":"static func > (some SQLExpressible, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/_(_:_:)-3hri2","title":"static func < (AssociationAggregate<RowDecoder>, some SQLExpressible) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/_(_:_:)-4clgq","title":"static func < (some SQLExpressible, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/_(_:_:)-76ktl","title":"static func > (AssociationAggregate<RowDecoder>, some SQLExpressible) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/_(_:_:)-85hp4","title":"static func > (AssociationAggregate<RowDecoder>, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/_(_:_:)-8u8bi","title":"static func < (AssociationAggregate<RowDecoder>, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/_=(_:_:)-7gqxh","title":"static func <= (AssociationAggregate<RowDecoder>, some SQLExpressible) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/_=(_:_:)-85ch8","title":"static func <= (AssociationAggregate<RowDecoder>, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/_=(_:_:)-8f4ta","title":"static func >= (AssociationAggregate<RowDecoder>, some SQLExpressible) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/_=(_:_:)-8flef","title":"static func <= (some SQLExpressible, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/_=(_:_:)-8x4fz","title":"static func >= (AssociationAggregate<RowDecoder>, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/_=(_:_:)-gshv","title":"static func >= (some SQLExpressible, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/__(_:_:)-1weuw","title":"static func || (AssociationAggregate<RowDecoder>, some SQLExpressible) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/__(_:_:)-88z35","title":"static func || (some SQLExpressible, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/__(_:_:)-8gj9v","title":"static func || (AssociationAggregate<RowDecoder>, AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>","type":"op"},{"path":"\/documentation\/grdb\/associationaggregate\/__(_:_:)-8j1nz","title":"static func ?? (AssociationAggregate<RowDecoder>, some SQLExpressible) -> AssociationAggregate<RowDecoder>","type":"op"}],"path":"\/documentation\/grdb\/associationaggregate","title":"AssociationAggregate","type":"struct"}],"path":"\/documentation\/grdb\/associationtomany","title":"AssociationToMany","type":"protocol"},{"title":"Associations to Common Table Expressions","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/joinassociation\/group(_:)","title":"func group([SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/group(literal:)","title":"func group(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/group(sql:arguments:)","title":"func group(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/groupwhenconnected(_:)","title":"func groupWhenConnected((Database) throws -> [SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/having(literal:)","title":"func having(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/having(sql:arguments:)","title":"func having(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/havingwhenconnected(_:)","title":"func havingWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"}],"path":"\/documentation\/grdb\/joinassociation\/aggregatingrequest-implementations","title":"AggregatingRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/joinassociation\/forkey(_:)","title":"func forKey(String) -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/joinassociation\/originrowdecoder","title":"JoinAssociation.OriginRowDecoder","type":"typealias"}],"path":"\/documentation\/grdb\/joinassociation\/association-implementations","title":"Association Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/joinassociation\/annotated(with:)","title":"func annotated(with: [AssociationAggregate<Self.RowDecoder>]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/distinct()","title":"func distinct() -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/having(_:)","title":"func having(AssociationAggregate<Self.RowDecoder>) -> Self","type":"method"}],"path":"\/documentation\/grdb\/joinassociation\/derivablerequest-implementations","title":"DerivableRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/joinassociation\/filter(_:)","title":"func filter(some SQLSpecificExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/filter(literal:)","title":"func filter(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/filter(sql:arguments:)","title":"func filter(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/filterwhenconnected(_:)","title":"func filterWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/none()","title":"func none() -> Self","type":"method"}],"path":"\/documentation\/grdb\/joinassociation\/filteredrequest-implementations","title":"FilteredRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/joinassociation\/annotated(withoptional:)","title":"func annotated<A>(withOptional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/annotated(withrequired:)","title":"func annotated<A>(withRequired: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/including(all:)","title":"func including<A>(all: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/including(optional:)","title":"func including<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/including(required:)","title":"func including<A>(required: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/joining(optional:)","title":"func joining<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/joining(required:)","title":"func joining<A>(required: A) -> Self","type":"method"}],"path":"\/documentation\/grdb\/joinassociation\/joinablerequest-implementations","title":"JoinableRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/joinassociation\/order(_:)","title":"func order([SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/order(literal:)","title":"func order(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/order(sql:arguments:)","title":"func order(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/orderwhenconnected(_:)","title":"func orderWhenConnected((Database) throws -> [SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/reversed()","title":"func reversed() -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/unordered()","title":"func unordered() -> Self","type":"method"}],"path":"\/documentation\/grdb\/joinassociation\/orderedrequest-implementations","title":"OrderedRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/joinassociation\/annotatedwhenconnected(with:)","title":"func annotatedWhenConnected(with: (Database) throws -> [SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/select(_:)","title":"func select([SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/select(literal:)","title":"func select(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/select(sql:arguments:)","title":"func select(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/selectwhenconnected(_:)","title":"func selectWhenConnected((Database) throws -> [SQLSelectable]) -> Self","type":"method"}],"path":"\/documentation\/grdb\/joinassociation\/selectionrequest-implementations","title":"SelectionRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/joinassociation\/databasetablename","title":"var databaseTableName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/joinassociation\/aliased(_:)","title":"func aliased(TableAlias) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/filter(key:)","title":"func filter(key: [String : (DatabaseValueConvertible)?]?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/filter(keys:)","title":"func filter(keys: [[String : (DatabaseValueConvertible)?]]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/groupbyprimarykey()","title":"func groupByPrimaryKey() -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/matching(_:)","title":"func matching(FTS3Pattern?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinassociation\/orderbyprimarykey()","title":"func orderByPrimaryKey() -> Self","type":"method"}],"path":"\/documentation\/grdb\/joinassociation\/tablerequest-implementations","title":"TableRequest Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/joinassociation\/rowdecoder","title":"JoinAssociation.RowDecoder","type":"typealias"}],"path":"\/documentation\/grdb\/joinassociation\/typedrequest-implementations","title":"TypedRequest Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/joinassociation","title":"JoinAssociation","type":"struct"},{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/foreignkey\/init(_:to:)-4wjq3","title":"init([ColumnExpression], to: [ColumnExpression]?)","type":"init"},{"path":"\/documentation\/grdb\/foreignkey\/init(_:to:)-7jskm","title":"init([String], to: [String]?)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/foreignkey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/foreignkey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/foreignkey","title":"ForeignKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/inflections\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/inflections\/irregularsuffix(_:_:)","title":"func irregularSuffix(String, String)","type":"method"},{"path":"\/documentation\/grdb\/inflections\/plural(_:options:_:)","title":"func plural(String, options: NSRegularExpression.Options, String)","type":"method"},{"path":"\/documentation\/grdb\/inflections\/pluralize(_:)","title":"func pluralize(String) -> String","type":"method"},{"path":"\/documentation\/grdb\/inflections\/singular(_:options:_:)","title":"func singular(String, options: NSRegularExpression.Options, String)","type":"method"},{"path":"\/documentation\/grdb\/inflections\/singularize(_:)","title":"func singularize(String) -> String","type":"method"},{"path":"\/documentation\/grdb\/inflections\/uncountablewords(_:)","title":"func uncountableWords([String])","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/inflections\/default","title":"static var `default`: Inflections","type":"property"}],"path":"\/documentation\/grdb\/inflections","title":"Inflections","type":"struct"},{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/grdb\/association\/originrowdecoder","title":"OriginRowDecoder","type":"associatedtype"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/association\/groupwhenconnected(_:)","title":"func groupWhenConnected((Database) throws -> [SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/association\/havingwhenconnected(_:)","title":"func havingWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"}],"path":"\/documentation\/grdb\/association\/aggregatingrequest-implementations","title":"AggregatingRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/association\/filterwhenconnected(_:)","title":"func filterWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"}],"path":"\/documentation\/grdb\/association\/filteredrequest-implementations","title":"FilteredRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/association\/orderwhenconnected(_:)","title":"func orderWhenConnected((Database) throws -> [SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/association\/reversed()","title":"func reversed() -> Self","type":"method"},{"path":"\/documentation\/grdb\/association\/unordered()","title":"func unordered() -> Self","type":"method"}],"path":"\/documentation\/grdb\/association\/orderedrequest-implementations","title":"OrderedRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/association\/annotatedwhenconnected(with:)","title":"func annotatedWhenConnected(with: (Database) throws -> [SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/association\/selectwhenconnected(_:)","title":"func selectWhenConnected((Database) throws -> [SQLSelectable]) -> Self","type":"method"}],"path":"\/documentation\/grdb\/association\/selectionrequest-implementations","title":"SelectionRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/association\/databasetablename","title":"var databaseTableName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/association\/aliased(_:)","title":"func aliased(TableAlias) -> Self","type":"method"}],"path":"\/documentation\/grdb\/association\/tablerequest-implementations","title":"TableRequest Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/association","title":"Association","type":"protocol"},{"title":"Query Interface Requests","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/commontableexpression\/init(recursive:named:columns:literal:)-4nr63","title":"init(recursive: Bool, named: String, columns: [String]?, literal: SQL)","type":"init"},{"path":"\/documentation\/grdb\/commontableexpression\/init(recursive:named:columns:literal:)-7vimx","title":"init(recursive: Bool, named: String, columns: [String]?, literal: SQL)","type":"init"},{"path":"\/documentation\/grdb\/commontableexpression\/init(recursive:named:columns:request:)-35myd","title":"init(recursive: Bool, named: String, columns: [String]?, request: some SQLSubqueryable)","type":"init"},{"path":"\/documentation\/grdb\/commontableexpression\/init(recursive:named:columns:request:)-69rlb","title":"init(recursive: Bool, named: String, columns: [String]?, request: some SQLSubqueryable)","type":"init"},{"path":"\/documentation\/grdb\/commontableexpression\/init(recursive:named:columns:sql:arguments:)-1ft4x","title":"init(recursive: Bool, named: String, columns: [String]?, sql: String, arguments: StatementArguments)","type":"init"},{"path":"\/documentation\/grdb\/commontableexpression\/init(recursive:named:columns:sql:arguments:)-8hnp2","title":"init(recursive: Bool, named: String, columns: [String]?, sql: String, arguments: StatementArguments)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/commontableexpression\/tablename","title":"var tableName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/commontableexpression\/all()","title":"func all() -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/commontableexpression\/association(to:)-6p49n","title":"func association<Destination>(to: Table<Destination>) -> JoinAssociation<RowDecoder, Destination>","type":"method"},{"path":"\/documentation\/grdb\/commontableexpression\/association(to:)-8ymm1","title":"func association<Destination>(to: Destination.Type) -> JoinAssociation<RowDecoder, Destination>","type":"method"},{"path":"\/documentation\/grdb\/commontableexpression\/association(to:)-lpqk","title":"func association<Destination>(to: CommonTableExpression<Destination>) -> JoinAssociation<RowDecoder, Destination>","type":"method"},{"path":"\/documentation\/grdb\/commontableexpression\/association(to:on:)-1gy8c","title":"func association<Destination>(to: Destination.Type, on: (TableAlias, TableAlias) -> SQLExpressible) -> JoinAssociation<RowDecoder, Destination>","type":"method"},{"path":"\/documentation\/grdb\/commontableexpression\/association(to:on:)-3fns2","title":"func association<Destination>(to: Table<Destination>, on: (TableAlias, TableAlias) -> SQLExpressible) -> JoinAssociation<RowDecoder, Destination>","type":"method"},{"path":"\/documentation\/grdb\/commontableexpression\/association(to:on:)-3pqt9","title":"func association<Destination>(to: CommonTableExpression<Destination>, on: (TableAlias, TableAlias) -> SQLExpressible) -> JoinAssociation<RowDecoder, Destination>","type":"method"},{"path":"\/documentation\/grdb\/commontableexpression\/contains(_:)","title":"func contains(some SQLExpressible) -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/commontableexpression","title":"CommonTableExpression","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/isempty(_:)","title":"func isEmpty(Database) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/limit(_:offset:)","title":"func limit(Int, offset: Int?) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"title":"Changing The Type of Fetched Results","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/asrequest(of:)","title":"func asRequest<T>(of: T.Type) -> QueryInterfaceRequest<T>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/select(_:as:)-282xc","title":"func select<T>(SQLSelectable..., as: T.Type) -> QueryInterfaceRequest<T>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/select(_:as:)-3o8qw","title":"func select<T>([SQLSelectable], as: T.Type) -> QueryInterfaceRequest<T>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/select(literal:as:)","title":"func select<T>(literal: SQL, as: T.Type) -> QueryInterfaceRequest<T>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/select(sql:arguments:as:)","title":"func select<T>(sql: String, arguments: StatementArguments, as: T.Type) -> QueryInterfaceRequest<T>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/selectprimarykey(as:)","title":"func selectPrimaryKey<PrimaryKey>(as: PrimaryKey.Type) -> QueryInterfaceRequest<PrimaryKey>","type":"method"},{"title":"Batch Delete","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/deleteall(_:)","title":"func deleteAll(Database) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/deleteandfetchcursor(_:)","title":"func deleteAndFetchCursor(Database) throws -> RecordCursor<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/deleteandfetchall(_:)","title":"func deleteAndFetchAll(Database) throws -> [RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/deleteandfetchset(_:)","title":"func deleteAndFetchSet(Database) throws -> Set<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/deleteandfetchstatement(_:selection:)","title":"func deleteAndFetchStatement(Database, selection: [SQLSelectable]) throws -> Statement","type":"method"},{"title":"Batch Update","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/updateall(_:onconflict:_:)-9r4v","title":"func updateAll(Database, onConflict: Database.ConflictResolution?, ColumnAssignment...) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/updateall(_:onconflict:_:)-49qg8","title":"func updateAll(Database, onConflict: Database.ConflictResolution?, [ColumnAssignment]) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/updateandfetchcursor(_:onconflict:_:)","title":"func updateAndFetchCursor(Database, onConflict: Database.ConflictResolution?, [ColumnAssignment]) throws -> RecordCursor<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/updateandfetchall(_:onconflict:_:)","title":"func updateAndFetchAll(Database, onConflict: Database.ConflictResolution?, [ColumnAssignment]) throws -> [RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/updateandfetchset(_:onconflict:_:)","title":"func updateAndFetchSet(Database, onConflict: Database.ConflictResolution?, [ColumnAssignment]) throws -> Set<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/updateandfetchstatement(_:onconflict:_:selection:)","title":"func updateAndFetchStatement(Database, onConflict: Database.ConflictResolution?, [ColumnAssignment], selection: [SQLSelectable]) throws -> Statement","type":"method"},{"path":"\/documentation\/grdb\/columnassignment","title":"ColumnAssignment","type":"struct"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/group(_:)","title":"func group([SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/group(literal:)","title":"func group(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/group(sql:arguments:)","title":"func group(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/groupwhenconnected(_:)","title":"func groupWhenConnected((Database) throws -> [SQLExpressible]) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/having(literal:)","title":"func having(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/having(sql:arguments:)","title":"func having(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/havingwhenconnected(_:)","title":"func havingWhenConnected((Database) throws -> SQLExpressible) -> QueryInterfaceRequest<RowDecoder>","type":"method"}],"path":"\/documentation\/grdb\/queryinterfacerequest\/aggregatingrequest-implementations","title":"AggregatingRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/annotated(with:)","title":"func annotated(with: [AssociationAggregate<Self.RowDecoder>]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/distinct()","title":"func distinct() -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/having(_:)","title":"func having(AssociationAggregate<Self.RowDecoder>) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/with(_:)","title":"func with<RowDecoder>(CommonTableExpression<RowDecoder>) -> QueryInterfaceRequest<RowDecoder>","type":"method"}],"path":"\/documentation\/grdb\/queryinterfacerequest\/derivablerequest-implementations","title":"DerivableRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/adapted(_:)","title":"func adapted((Database) throws -> RowAdapter) -> AdaptedFetchRequest<Self>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/databaseregion(_:)","title":"func databaseRegion(Database) throws -> DatabaseRegion","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchall(_:)-1v5cg","title":"func fetchAll(Database) throws -> [Row]","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchall(_:)-26euc","title":"func fetchAll(Database) throws -> [Self.RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchall(_:)-3c895","title":"func fetchAll(Database) throws -> [Self.RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchall(_:)-4ojc8","title":"func fetchAll(Database) throws -> [Self.RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchcount(_:)","title":"func fetchCount(Database) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchcursor(_:)-3d8h","title":"func fetchCursor(Database) throws -> RowCursor","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchcursor(_:)-4gp7m","title":"func fetchCursor(Database) throws -> RecordCursor<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchcursor(_:)-7csmn","title":"func fetchCursor(Database) throws -> FastDatabaseValueCursor<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchcursor(_:)-9mtsr","title":"func fetchCursor(Database) throws -> DatabaseValueCursor<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchone(_:)-2xik2","title":"func fetchOne(Database) throws -> Self.RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchone(_:)-449qf","title":"func fetchOne(Database) throws -> Row?","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchone(_:)-4w3oq","title":"func fetchOne(Database) throws -> Self.RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchone(_:)-63ywc","title":"func fetchOne(Database) throws -> Self.RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchset(_:)-1l1mb","title":"func fetchSet(Database) throws -> Set<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchset(_:)-2psbx","title":"func fetchSet(Database) throws -> Set<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchset(_:)-5r77q","title":"func fetchSet(Database) throws -> Set<Row>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchset(_:)-8ig7m","title":"func fetchSet(Database) throws -> Set<Self.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/makepreparedrequest(_:forsingleresult:)","title":"func makePreparedRequest(Database, forSingleResult: Bool) throws -> PreparedRequest","type":"method"}],"path":"\/documentation\/grdb\/queryinterfacerequest\/fetchrequest-implementations","title":"FetchRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/filter(_:)","title":"func filter(some SQLSpecificExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/filter(literal:)","title":"func filter(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/filter(sql:arguments:)","title":"func filter(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/filterwhenconnected(_:)","title":"func filterWhenConnected((Database) throws -> SQLExpressible) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/none()","title":"func none() -> Self","type":"method"}],"path":"\/documentation\/grdb\/queryinterfacerequest\/filteredrequest-implementations","title":"FilteredRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/annotated(withoptional:)","title":"func annotated<A>(withOptional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/annotated(withrequired:)","title":"func annotated<A>(withRequired: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/including(all:)","title":"func including<A>(all: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/including(optional:)","title":"func including<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/including(required:)","title":"func including<A>(required: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/joining(optional:)","title":"func joining<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/joining(required:)","title":"func joining<A>(required: A) -> Self","type":"method"}],"path":"\/documentation\/grdb\/queryinterfacerequest\/joinablerequest-implementations","title":"JoinableRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/order(_:)","title":"func order([SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/order(literal:)","title":"func order(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/order(sql:arguments:)","title":"func order(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/orderwhenconnected(_:)","title":"func orderWhenConnected((Database) throws -> [SQLOrderingTerm]) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/reversed()","title":"func reversed() -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/unordered()","title":"func unordered() -> QueryInterfaceRequest<RowDecoder>","type":"method"}],"path":"\/documentation\/grdb\/queryinterfacerequest\/orderedrequest-implementations","title":"OrderedRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/sqlordering","title":"var sqlOrdering: SQLOrdering","type":"property"}],"path":"\/documentation\/grdb\/queryinterfacerequest\/sqlorderingterm-implementations","title":"SQLOrderingTerm Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/sqlselection","title":"var sqlSelection: SQLSelection","type":"property"}],"path":"\/documentation\/grdb\/queryinterfacerequest\/sqlselectable-implementations","title":"SQLSelectable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/!(_:)","title":"static func ! (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/!=(_:_:)-1c2ri","title":"static func != (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/!=(_:_:)-2swak","title":"static func != (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/!=(_:_:)-2xkw1","title":"static func != (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/!=(_:_:)-6m9tp","title":"static func != ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/!=(_:_:)-hsjk","title":"static func != (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/!==(_:_:)-46b91","title":"static func !== ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/!==(_:_:)-55vs9","title":"static func !== (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/!==(_:_:)-8w2qf","title":"static func !== (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/&&(_:_:)-47cbe","title":"static func && (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/&&(_:_:)-68dvj","title":"static func && (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/&&(_:_:)-6rmdb","title":"static func && (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/*(_:_:)-3e865","title":"static func * (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/*(_:_:)-4ufba","title":"static func * (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/*(_:_:)-56z72","title":"static func * (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/+(_:_:)-285gg","title":"static func + (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/+(_:_:)-3l2td","title":"static func + (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/+(_:_:)-636p7","title":"static func + (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/-(_:)","title":"static func - (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/-(_:_:)-1tur7","title":"static func - (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/-(_:_:)-8ai37","title":"static func - (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/-(_:_:)-f6x9","title":"static func - (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/\/(_:_:)-2larv","title":"static func \/ (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/\/(_:_:)-2wejq","title":"static func \/ (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/\/(_:_:)-7svyr","title":"static func \/ (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/==(_:_:)-2m78l","title":"static func == (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/==(_:_:)-6p401","title":"static func == (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/==(_:_:)-70e3j","title":"static func == (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/==(_:_:)-8h89b","title":"static func == ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/==(_:_:)-sj34","title":"static func == (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/===(_:_:)-3ux8q","title":"static func === ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/===(_:_:)-70974","title":"static func === (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/===(_:_:)-dv44","title":"static func === (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/_(_:_:)-4fbua","title":"static func > (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/_(_:_:)-4ot1s","title":"static func > (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/_(_:_:)-5qd6i","title":"static func > (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/_(_:_:)-7ca6b","title":"static func < (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/_(_:_:)-bvrr","title":"static func < (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/_(_:_:)-ovht","title":"static func < (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/_=(_:_:)-192b6","title":"static func >= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/_=(_:_:)-2yatq","title":"static func <= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/_=(_:_:)-3ssch","title":"static func <= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/_=(_:_:)-41god","title":"static func >= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/_=(_:_:)-5i68c","title":"static func >= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/_=(_:_:)-9nxp","title":"static func <= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/__(_:_:)-1wcx3","title":"static func || (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/__(_:_:)-5kuio","title":"static func || (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/__(_:_:)-8itoe","title":"static func ?? (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/__(_:_:)-8qdqf","title":"static func || (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/asc","title":"var asc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/ascnullslast","title":"var ascNullsLast: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/capitalized","title":"var capitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/desc","title":"var desc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/descnullsfirst","title":"var descNullsFirst: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/localizedcapitalized","title":"var localizedCapitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/localizedlowercased","title":"var localizedLowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/localizeduppercased","title":"var localizedUppercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/lowercased","title":"var lowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/uppercased","title":"var uppercased: SQLExpression","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/collating(_:)-1gega","title":"func collating(Database.CollationName) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/collating(_:)-3axpr","title":"func collating(DatabaseCollation) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/forkey(_:)","title":"func forKey(String) -> SQLSelection","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/like(_:escape:)","title":"func like(some SQLExpressible, escape: (SQLExpressible)?) -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/queryinterfacerequest\/sqlspecificexpressible-implementations","title":"SQLSpecificExpressible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/sqlexpression","title":"var sqlExpression: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/sqlsubquery","title":"var sqlSubquery: SQLSubquery","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/contains(_:)","title":"func contains(some SQLExpressible) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/exists()","title":"func exists() -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/queryinterfacerequest\/sqlsubqueryable-implementations","title":"SQLSubqueryable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/annotatedwhenconnected(with:)","title":"func annotatedWhenConnected(with: (Database) throws -> [SQLSelectable]) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/select(_:)","title":"func select([SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/select(literal:)","title":"func select(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/select(sql:arguments:)","title":"func select(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/selectwhenconnected(_:)","title":"func selectWhenConnected((Database) throws -> [SQLSelectable]) -> QueryInterfaceRequest<RowDecoder>","type":"method"}],"path":"\/documentation\/grdb\/queryinterfacerequest\/selectionrequest-implementations","title":"SelectionRequest Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/databasetablename","title":"var databaseTableName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/aliased(_:)","title":"func aliased(TableAlias) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/filter(key:)","title":"func filter(key: [String : (DatabaseValueConvertible)?]?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/filter(keys:)","title":"func filter(keys: [[String : (DatabaseValueConvertible)?]]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/groupbyprimarykey()","title":"func groupByPrimaryKey() -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/matching(_:)","title":"func matching(FTS3Pattern?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/queryinterfacerequest\/orderbyprimarykey()","title":"func orderByPrimaryKey() -> Self","type":"method"}],"path":"\/documentation\/grdb\/queryinterfacerequest\/tablerequest-implementations","title":"TableRequest Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/queryinterfacerequest","title":"QueryInterfaceRequest","type":"struct"},{"children":[{"title":"Creating a Table","type":"groupMarker"},{"path":"\/documentation\/grdb\/table\/init(_:)-2iz5y","title":"init(String)","type":"init"},{"path":"\/documentation\/grdb\/table\/init(_:)-3mfb8","title":"init(String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/table\/tablename","title":"var tableName: String","type":"property"},{"title":"Counting Rows","type":"groupMarker"},{"path":"\/documentation\/grdb\/table\/fetchcount(_:)","title":"func fetchCount(Database) throws -> Int","type":"method"},{"title":"Testing for Row Existence","type":"groupMarker"},{"path":"\/documentation\/grdb\/table\/exists(_:id:)","title":"func exists(Database, id: RowDecoder.ID) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/table\/exists(_:key:)-4dk7e","title":"func exists(Database, key: some DatabaseValueConvertible) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/table\/exists(_:key:)-36jtu","title":"func exists(Database, key: [String : (DatabaseValueConvertible)?]) throws -> Bool","type":"method"},{"title":"Deleting Rows","type":"groupMarker"},{"path":"\/documentation\/grdb\/table\/deleteall(_:)","title":"func deleteAll(Database) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/table\/deleteall(_:ids:)","title":"func deleteAll<IDS>(Database, ids: IDS) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/table\/deleteall(_:keys:)-5t865","title":"func deleteAll<Keys>(Database, keys: Keys) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/table\/deleteall(_:keys:)-28sff","title":"func deleteAll(Database, keys: [[String : (DatabaseValueConvertible)?]]) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/table\/deleteone(_:id:)","title":"func deleteOne(Database, id: RowDecoder.ID) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/table\/deleteone(_:key:)-404su","title":"func deleteOne(Database, key: some DatabaseValueConvertible) throws -> Bool","type":"method"},{"path":"\/documentation\/grdb\/table\/deleteone(_:key:)-64wmq","title":"func deleteOne(Database, key: [String : (DatabaseValueConvertible)?]) throws -> Bool","type":"method"},{"title":"Updating Rows","type":"groupMarker"},{"path":"\/documentation\/grdb\/table\/updateall(_:onconflict:_:)-4w9b","title":"func updateAll(Database, onConflict: Database.ConflictResolution?, ColumnAssignment...) throws -> Int","type":"method"},{"path":"\/documentation\/grdb\/table\/updateall(_:onconflict:_:)-4cvap","title":"func updateAll(Database, onConflict: Database.ConflictResolution?, [ColumnAssignment]) throws -> Int","type":"method"},{"title":"Building Query Interface Requests","type":"groupMarker"},{"path":"\/documentation\/grdb\/table\/aliased(_:)","title":"func aliased(TableAlias) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/all()","title":"func all() -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/annotated(with:)-6i101","title":"func annotated(with: SQLSelectable...) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/annotated(with:)-6x399","title":"func annotated(with: [SQLSelectable]) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/annotated(with:)-4sbgw","title":"func annotated(with: AssociationAggregate<RowDecoder>...) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/annotated(with:)-98t4p","title":"func annotated(with: [AssociationAggregate<RowDecoder>]) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/annotated(withoptional:)","title":"func annotated<A>(withOptional: A) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/annotated(withrequired:)","title":"func annotated<A>(withRequired: A) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/filter(_:)","title":"func filter(some SQLSpecificExpressible) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/filter(id:)","title":"func filter(id: RowDecoder.ID) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/filter(ids:)","title":"func filter<IDS>(ids: IDS) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/filter(key:)-tw3i","title":"func filter(key: some DatabaseValueConvertible) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/filter(key:)-4sun7","title":"func filter(key: [String : (DatabaseValueConvertible)?]?) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/filter(keys:)-85e0v","title":"func filter<Keys>(keys: Keys) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/filter(keys:)-qqgf","title":"func filter(keys: [[String : (DatabaseValueConvertible)?]]) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/filter(literal:)","title":"func filter(literal: SQL) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/filter(sql:arguments:)","title":"func filter(sql: String, arguments: StatementArguments) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/having(_:)","title":"func having(AssociationAggregate<RowDecoder>) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/including(all:)","title":"func including<A>(all: A) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/including(optional:)","title":"func including<A>(optional: A) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/including(required:)","title":"func including<A>(required: A) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/joining(optional:)","title":"func joining<A>(optional: A) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/joining(required:)","title":"func joining<A>(required: A) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/limit(_:offset:)","title":"func limit(Int, offset: Int?) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/none()","title":"func none() -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/order(_:)-2gvi7","title":"func order(SQLOrderingTerm...) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/order(_:)-9o5bb","title":"func order([SQLOrderingTerm]) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/order(literal:)","title":"func order(literal: SQL) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/order(sql:arguments:)","title":"func order(sql: String, arguments: StatementArguments) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/orderbyprimarykey()","title":"func orderByPrimaryKey() -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/select(_:)-1599q","title":"func select(SQLSelectable...) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/select(_:)-2cnd1","title":"func select([SQLSelectable]) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/select(_:as:)-20ci9","title":"func select<RowDecoder>(SQLSelectable..., as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/select(_:as:)-3pr6x","title":"func select<RowDecoder>([SQLSelectable], as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/select(literal:)","title":"func select(literal: SQL) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/select(literal:as:)","title":"func select<RowDecoder>(literal: SQL, as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/select(sql:arguments:)","title":"func select(sql: String, arguments: StatementArguments) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/select(sql:arguments:as:)","title":"func select<RowDecoder>(sql: String, arguments: StatementArguments, as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/selectprimarykey(as:)","title":"func selectPrimaryKey<PrimaryKey>(as: PrimaryKey.Type) -> QueryInterfaceRequest<PrimaryKey>","type":"method"},{"path":"\/documentation\/grdb\/table\/with(_:)","title":"func with<T>(CommonTableExpression<T>) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"title":"Defining Associations","type":"groupMarker"},{"path":"\/documentation\/grdb\/table\/association(to:)","title":"func association<Destination>(to: CommonTableExpression<Destination>) -> JoinAssociation<RowDecoder, Destination>","type":"method"},{"path":"\/documentation\/grdb\/table\/association(to:on:)","title":"func association<Destination>(to: CommonTableExpression<Destination>, on: (TableAlias, TableAlias) -> SQLExpressible) -> JoinAssociation<RowDecoder, Destination>","type":"method"},{"path":"\/documentation\/grdb\/table\/belongsto(_:key:using:)-8p5xr","title":"func belongsTo<Destination>(Destination.Type, key: String?, using: ForeignKey?) -> BelongsToAssociation<RowDecoder, Destination>","type":"method"},{"path":"\/documentation\/grdb\/table\/belongsto(_:key:using:)-117wr","title":"func belongsTo<Destination>(Table<Destination>, key: String?, using: ForeignKey?) -> BelongsToAssociation<RowDecoder, Destination>","type":"method"},{"path":"\/documentation\/grdb\/table\/hasmany(_:key:using:)-3i6yk","title":"func hasMany<Destination>(Destination.Type, key: String?, using: ForeignKey?) -> HasManyAssociation<RowDecoder, Destination>","type":"method"},{"path":"\/documentation\/grdb\/table\/hasmany(_:key:using:)-57dwf","title":"func hasMany<Destination>(Table<Destination>, key: String?, using: ForeignKey?) -> HasManyAssociation<RowDecoder, Destination>","type":"method"},{"path":"\/documentation\/grdb\/table\/hasmany(_:through:using:key:)","title":"func hasMany<Pivot, Target>(Target.RowDecoder.Type, through: Pivot, using: Target, key: String?) -> HasManyThroughAssociation<RowDecoder, Target.RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/hasone(_:key:using:)-81vqy","title":"func hasOne<Destination>(Destination.Type, key: String?, using: ForeignKey?) -> HasOneAssociation<RowDecoder, Destination>","type":"method"},{"path":"\/documentation\/grdb\/table\/hasone(_:key:using:)-3438j","title":"func hasOne<Destination>(Table<Destination>, key: String?, using: ForeignKey?) -> HasOneAssociation<RowDecoder, Destination>","type":"method"},{"path":"\/documentation\/grdb\/table\/hasone(_:through:using:key:)","title":"func hasOne<Pivot, Target>(Target.RowDecoder.Type, through: Pivot, using: Target, key: String?) -> HasOneThroughAssociation<RowDecoder, Target.RowDecoder>","type":"method"},{"title":"Fetching Database Rows","type":"groupMarker"},{"path":"\/documentation\/grdb\/table\/fetchcursor(_:)-1oqex","title":"func fetchCursor(Database) throws -> RowCursor","type":"method"},{"path":"\/documentation\/grdb\/table\/fetchall(_:)-4s7yn","title":"func fetchAll(Database) throws -> [Row]","type":"method"},{"path":"\/documentation\/grdb\/table\/fetchset(_:)-5lp4s","title":"func fetchSet(Database) throws -> Set<Row>","type":"method"},{"path":"\/documentation\/grdb\/table\/fetchone(_:)-3bduz","title":"func fetchOne(Database) throws -> Row?","type":"method"},{"title":"Fetching Database Values","type":"groupMarker"},{"path":"\/documentation\/grdb\/table\/fetchcursor(_:)-65lci","title":"func fetchCursor(Database) throws -> DatabaseValueCursor<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/fetchcursor(_:)-295uw","title":"func fetchCursor(Database) throws -> FastDatabaseValueCursor<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/fetchall(_:)-6xr01","title":"func fetchAll(Database) throws -> [RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/table\/fetchall(_:)-7tjdp","title":"func fetchAll(Database) throws -> [RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/table\/fetchset(_:)-3mchk","title":"func fetchSet(Database) throws -> Set<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/fetchset(_:)-8k2uk","title":"func fetchSet(Database) throws -> Set<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/fetchone(_:)-infc","title":"func fetchOne(Database) throws -> RowDecoder?","type":"method"},{"path":"\/documentation\/grdb\/table\/fetchone(_:)-71icb","title":"func fetchOne(Database) throws -> RowDecoder?","type":"method"},{"title":"Fetching Records","type":"groupMarker"},{"path":"\/documentation\/grdb\/table\/fetchcursor(_:)-81wuu","title":"func fetchCursor(Database) throws -> RecordCursor<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/fetchall(_:)-3l7ol","title":"func fetchAll(Database) throws -> [RowDecoder]","type":"method"},{"path":"\/documentation\/grdb\/table\/fetchset(_:)-ko77","title":"func fetchSet(Database) throws -> Set<RowDecoder>","type":"method"},{"path":"\/documentation\/grdb\/table\/fetchone(_:)-8n1q","title":"func fetchOne(Database) throws -> RowDecoder?","type":"method"},{"title":"Database Observation Support","type":"groupMarker"},{"path":"\/documentation\/grdb\/table\/databaseregion(_:)","title":"func databaseRegion(Database) throws -> DatabaseRegion","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/table\/databaseregion(_:)","title":"func databaseRegion(Database) throws -> DatabaseRegion","type":"method"}],"path":"\/documentation\/grdb\/table\/databaseregionconvertible-implementations","title":"DatabaseRegionConvertible Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/table","title":"Table","type":"struct"},{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablerequest\/aliased(_:)","title":"func aliased(TableAlias) -> Self","type":"method"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablealias\/init(name:)","title":"init(name: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablealias\/exists","title":"var exists: SQLExpression","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablealias\/subscript(_:)-25sz2","title":"subscript(some SQLOrderingTerm) -> SQLOrdering","type":"subscript"},{"path":"\/documentation\/grdb\/tablealias\/subscript(_:)-5lzgu","title":"subscript(some SQLSpecificExpressible) -> SQLExpression","type":"subscript"},{"path":"\/documentation\/grdb\/tablealias\/subscript(_:)-5oylh","title":"subscript(String) -> SQLExpression","type":"subscript"},{"path":"\/documentation\/grdb\/tablealias\/subscript(_:)-87nuf","title":"subscript(some SQLSelectable) -> SQLSelection","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablealias\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/tablealias\/==(_:_:)","title":"static func == (TableAlias, TableAlias) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/tablealias\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablealias\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/grdb\/tablealias\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/tablealias","title":"TableAlias","type":"class"},{"title":"The WITH Clause","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/association\/with(_:)","title":"func with<RowDecoder>(CommonTableExpression<RowDecoder>) -> Self","type":"method"}],"title":"Association Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/derivablerequest\/with(_:)","title":"func with<RowDecoder>(CommonTableExpression<RowDecoder>) -> Self","type":"method"},{"title":"The SELECT Clause","type":"groupMarker"},{"path":"\/documentation\/grdb\/selectionrequest\/annotated(with:)-4qcem","title":"func annotated(with: [SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/selectionrequest\/annotated(with:)-6ehs4","title":"func annotated(with: SQLSelectable...) -> Self","type":"method"},{"path":"\/documentation\/grdb\/selectionrequest\/annotatedwhenconnected(with:)","title":"func annotatedWhenConnected(with: (Database) throws -> [SQLSelectable]) -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/grdb\/association\/distinct()","title":"func distinct() -> Self","type":"method"}],"title":"Association Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/derivablerequest\/distinct()","title":"func distinct() -> Self","type":"method"},{"path":"\/documentation\/grdb\/selectionrequest\/select(_:)-30yzl","title":"func select(SQLSelectable...) -> Self","type":"method"},{"path":"\/documentation\/grdb\/selectionrequest\/select(_:)-7e2y5","title":"func select([SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/selectionrequest\/select(literal:)","title":"func select(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/selectionrequest\/select(sql:arguments:)","title":"func select(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/selectionrequest\/selectwhenconnected(_:)","title":"func selectWhenConnected((Database) throws -> [SQLSelectable]) -> Self","type":"method"},{"title":"The WHERE Clause","type":"groupMarker"},{"path":"\/documentation\/grdb\/filteredrequest\/filter(_:)","title":"func filter(some SQLSpecificExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tablerequest\/filter(id:)","title":"func filter(id: Self.RowDecoder.ID) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tablerequest\/filter(ids:)","title":"func filter<IDS>(ids: IDS) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tablerequest\/filter(key:)-1p9sq","title":"func filter(key: some DatabaseValueConvertible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tablerequest\/filter(key:)-2te6v","title":"func filter(key: [String : (DatabaseValueConvertible)?]?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tablerequest\/filter(keys:)-6ggt1","title":"func filter<Sequence>(keys: Sequence) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tablerequest\/filter(keys:)-8fbn9","title":"func filter(keys: [[String : (DatabaseValueConvertible)?]]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/filteredrequest\/filter(literal:)","title":"func filter(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/filteredrequest\/filter(sql:arguments:)","title":"func filter(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/filteredrequest\/filterwhenconnected(_:)","title":"func filterWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tablerequest\/matching(_:)","title":"func matching(FTS3Pattern?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/filteredrequest\/none()","title":"func none() -> Self","type":"method"},{"title":"The GROUP BY and HAVING Clauses","type":"groupMarker"},{"path":"\/documentation\/grdb\/aggregatingrequest\/group(_:)-edak","title":"func group(SQLExpressible...) -> Self","type":"method"},{"path":"\/documentation\/grdb\/aggregatingrequest\/group(_:)-4216o","title":"func group([SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/aggregatingrequest\/group(literal:)","title":"func group(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/aggregatingrequest\/group(sql:arguments:)","title":"func group(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tablerequest\/groupbyprimarykey()","title":"func groupByPrimaryKey() -> Self","type":"method"},{"path":"\/documentation\/grdb\/aggregatingrequest\/groupwhenconnected(_:)","title":"func groupWhenConnected((Database) throws -> [SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/aggregatingrequest\/having(_:)","title":"func having(some SQLExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/aggregatingrequest\/having(literal:)","title":"func having(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/aggregatingrequest\/having(sql:arguments:)","title":"func having(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/aggregatingrequest\/havingwhenconnected(_:)","title":"func havingWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"},{"title":"The ORDER BY Clause","type":"groupMarker"},{"path":"\/documentation\/grdb\/orderedrequest\/order(_:)-63rzl","title":"func order(SQLOrderingTerm...) -> Self","type":"method"},{"path":"\/documentation\/grdb\/orderedrequest\/order(_:)-6co0m","title":"func order([SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/orderedrequest\/order(literal:)","title":"func order(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/orderedrequest\/order(sql:arguments:)","title":"func order(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/orderedrequest\/orderwhenconnected(_:)","title":"func orderWhenConnected((Database) throws -> [SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tablerequest\/orderbyprimarykey()","title":"func orderByPrimaryKey() -> Self","type":"method"},{"path":"\/documentation\/grdb\/orderedrequest\/reversed()","title":"func reversed() -> Self","type":"method"},{"path":"\/documentation\/grdb\/orderedrequest\/unordered()","title":"func unordered() -> Self","type":"method"},{"title":"Associations","type":"groupMarker"},{"path":"\/documentation\/grdb\/joinablerequest\/annotated(withoptional:)","title":"func annotated<A>(withOptional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinablerequest\/annotated(withrequired:)","title":"func annotated<A>(withRequired: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/derivablerequest\/annotated(with:)-74xfs","title":"func annotated(with: AssociationAggregate<Self.RowDecoder>...) -> Self","type":"method"},{"path":"\/documentation\/grdb\/derivablerequest\/annotated(with:)-8snn4","title":"func annotated(with: [AssociationAggregate<Self.RowDecoder>]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/derivablerequest\/having(_:)","title":"func having(AssociationAggregate<Self.RowDecoder>) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinablerequest\/including(all:)","title":"func including<A>(all: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinablerequest\/including(optional:)","title":"func including<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinablerequest\/including(required:)","title":"func including<A>(required: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinablerequest\/joining(optional:)","title":"func joining<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinablerequest\/joining(required:)","title":"func joining<A>(required: A) -> Self","type":"method"},{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"The GROUP BY Clause","type":"groupMarker"},{"path":"\/documentation\/grdb\/aggregatingrequest\/group(_:)-edak","title":"func group(SQLExpressible...) -> Self","type":"method"},{"path":"\/documentation\/grdb\/aggregatingrequest\/group(_:)-4216o","title":"func group([SQLExpressible]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/aggregatingrequest\/group(literal:)","title":"func group(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/aggregatingrequest\/group(sql:arguments:)","title":"func group(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/aggregatingrequest\/groupwhenconnected(_:)","title":"func groupWhenConnected((Database) throws -> [SQLExpressible]) -> Self","type":"method"},{"title":"The HAVING Clause","type":"groupMarker"},{"path":"\/documentation\/grdb\/aggregatingrequest\/having(_:)","title":"func having(some SQLExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/aggregatingrequest\/having(literal:)","title":"func having(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/aggregatingrequest\/having(sql:arguments:)","title":"func having(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/aggregatingrequest\/havingwhenconnected(_:)","title":"func havingWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"}],"path":"\/documentation\/grdb\/aggregatingrequest","title":"AggregatingRequest","type":"protocol"},{"children":[{"title":"The WHERE and JOIN ON Clauses","type":"groupMarker"},{"path":"\/documentation\/grdb\/filteredrequest\/filter(_:)","title":"func filter(some SQLSpecificExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/filteredrequest\/filter(literal:)","title":"func filter(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/filteredrequest\/filter(sql:arguments:)","title":"func filter(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/filteredrequest\/filterwhenconnected(_:)","title":"func filterWhenConnected((Database) throws -> SQLExpressible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/filteredrequest\/none()","title":"func none() -> Self","type":"method"}],"path":"\/documentation\/grdb\/filteredrequest","title":"FilteredRequest","type":"protocol"},{"children":[{"title":"Extending the Selection with Columns of Associated Records","type":"groupMarker"},{"path":"\/documentation\/grdb\/joinablerequest\/annotated(withoptional:)","title":"func annotated<A>(withOptional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinablerequest\/annotated(withrequired:)","title":"func annotated<A>(withRequired: A) -> Self","type":"method"},{"title":"Prefetching Associated Records","type":"groupMarker"},{"path":"\/documentation\/grdb\/joinablerequest\/including(all:)","title":"func including<A>(all: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinablerequest\/including(optional:)","title":"func including<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinablerequest\/including(required:)","title":"func including<A>(required: A) -> Self","type":"method"},{"title":"Joining Associated Records","type":"groupMarker"},{"path":"\/documentation\/grdb\/joinablerequest\/joining(optional:)","title":"func joining<A>(optional: A) -> Self","type":"method"},{"path":"\/documentation\/grdb\/joinablerequest\/joining(required:)","title":"func joining<A>(required: A) -> Self","type":"method"}],"path":"\/documentation\/grdb\/joinablerequest","title":"JoinableRequest","type":"protocol"},{"children":[{"title":"The ORDER BY Clause","type":"groupMarker"},{"path":"\/documentation\/grdb\/orderedrequest\/order(_:)-63rzl","title":"func order(SQLOrderingTerm...) -> Self","type":"method"},{"path":"\/documentation\/grdb\/orderedrequest\/order(_:)-6co0m","title":"func order([SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/orderedrequest\/order(literal:)","title":"func order(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/orderedrequest\/order(sql:arguments:)","title":"func order(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/orderedrequest\/orderwhenconnected(_:)","title":"func orderWhenConnected((Database) throws -> [SQLOrderingTerm]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/orderedrequest\/reversed()","title":"func reversed() -> Self","type":"method"},{"path":"\/documentation\/grdb\/orderedrequest\/unordered()","title":"func unordered() -> Self","type":"method"}],"path":"\/documentation\/grdb\/orderedrequest","title":"OrderedRequest","type":"protocol"},{"children":[{"title":"The SELECT Clause","type":"groupMarker"},{"path":"\/documentation\/grdb\/selectionrequest\/annotated(with:)-4qcem","title":"func annotated(with: [SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/selectionrequest\/annotated(with:)-6ehs4","title":"func annotated(with: SQLSelectable...) -> Self","type":"method"},{"path":"\/documentation\/grdb\/selectionrequest\/annotatedwhenconnected(with:)","title":"func annotatedWhenConnected(with: (Database) throws -> [SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/selectionrequest\/select(_:)-30yzl","title":"func select(SQLSelectable...) -> Self","type":"method"},{"path":"\/documentation\/grdb\/selectionrequest\/select(_:)-7e2y5","title":"func select([SQLSelectable]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/selectionrequest\/select(literal:)","title":"func select(literal: SQL) -> Self","type":"method"},{"path":"\/documentation\/grdb\/selectionrequest\/select(sql:arguments:)","title":"func select(sql: String, arguments: StatementArguments) -> Self","type":"method"},{"path":"\/documentation\/grdb\/selectionrequest\/selectwhenconnected(_:)","title":"func selectWhenConnected((Database) throws -> [SQLSelectable]) -> Self","type":"method"}],"path":"\/documentation\/grdb\/selectionrequest","title":"SelectionRequest","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablerequest\/aliased(_:)","title":"func aliased(TableAlias) -> Self","type":"method"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablealias\/init(name:)","title":"init(name: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablealias\/exists","title":"var exists: SQLExpression","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablealias\/subscript(_:)-25sz2","title":"subscript(some SQLOrderingTerm) -> SQLOrdering","type":"subscript"},{"path":"\/documentation\/grdb\/tablealias\/subscript(_:)-5lzgu","title":"subscript(some SQLSpecificExpressible) -> SQLExpression","type":"subscript"},{"path":"\/documentation\/grdb\/tablealias\/subscript(_:)-5oylh","title":"subscript(String) -> SQLExpression","type":"subscript"},{"path":"\/documentation\/grdb\/tablealias\/subscript(_:)-87nuf","title":"subscript(some SQLSelectable) -> SQLSelection","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablealias\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/tablealias\/==(_:_:)","title":"static func == (TableAlias, TableAlias) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/tablealias\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablealias\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/grdb\/tablealias\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/tablealias","title":"TableAlias","type":"class"},{"title":"The WHERE Clause","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablerequest\/filter(id:)","title":"func filter(id: Self.RowDecoder.ID) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tablerequest\/filter(ids:)","title":"func filter<IDS>(ids: IDS) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tablerequest\/filter(key:)-1p9sq","title":"func filter(key: some DatabaseValueConvertible) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tablerequest\/filter(key:)-2te6v","title":"func filter(key: [String : (DatabaseValueConvertible)?]?) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tablerequest\/filter(keys:)-6ggt1","title":"func filter<Sequence>(keys: Sequence) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tablerequest\/filter(keys:)-8fbn9","title":"func filter(keys: [[String : (DatabaseValueConvertible)?]]) -> Self","type":"method"},{"path":"\/documentation\/grdb\/tablerequest\/matching(_:)","title":"func matching(FTS3Pattern?) -> Self","type":"method"},{"title":"The GROUP BY and HAVING Clauses","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablerequest\/groupbyprimarykey()","title":"func groupByPrimaryKey() -> Self","type":"method"},{"title":"The ORDER BY Clause","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablerequest\/orderbyprimarykey()","title":"func orderByPrimaryKey() -> Self","type":"method"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/tablerequest\/databasetablename","title":"var databaseTableName: String","type":"property"}],"path":"\/documentation\/grdb\/tablerequest","title":"TableRequest","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/grdb\/typedrequest\/rowdecoder","title":"RowDecoder","type":"associatedtype"}],"path":"\/documentation\/grdb\/typedrequest","title":"TypedRequest","type":"protocol"}],"path":"\/documentation\/grdb\/derivablerequest","title":"DerivableRequest","type":"protocol"},{"children":[{"title":"Supporting Type","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlexpression\/associativebinaryoperator\/add","title":"static let add: SQLExpression.AssociativeBinaryOperator","type":"property"},{"path":"\/documentation\/grdb\/sqlexpression\/associativebinaryoperator\/and","title":"static let and: SQLExpression.AssociativeBinaryOperator","type":"property"},{"path":"\/documentation\/grdb\/sqlexpression\/associativebinaryoperator\/concat","title":"static let concat: SQLExpression.AssociativeBinaryOperator","type":"property"},{"path":"\/documentation\/grdb\/sqlexpression\/associativebinaryoperator\/multiply","title":"static let multiply: SQLExpression.AssociativeBinaryOperator","type":"property"},{"path":"\/documentation\/grdb\/sqlexpression\/associativebinaryoperator\/or","title":"static let or: SQLExpression.AssociativeBinaryOperator","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlexpression\/associativebinaryoperator\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/sqlexpression\/associativebinaryoperator\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/sqlexpression\/associativebinaryoperator","title":"SQLExpression.AssociativeBinaryOperator","type":"struct"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlexpression\/sqlexpression","title":"var sqlExpression: SQLExpression","type":"property"}],"path":"\/documentation\/grdb\/sqlexpression\/sqlexpressible-implementations","title":"SQLExpressible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlexpression\/sqlordering","title":"var sqlOrdering: SQLOrdering","type":"property"}],"path":"\/documentation\/grdb\/sqlexpression\/sqlorderingterm-implementations","title":"SQLOrderingTerm Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlexpression\/sqlselection","title":"var sqlSelection: SQLSelection","type":"property"}],"path":"\/documentation\/grdb\/sqlexpression\/sqlselectable-implementations","title":"SQLSelectable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlexpression\/!(_:)","title":"static func ! (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/!=(_:_:)-2wtv9","title":"static func != (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/!=(_:_:)-2xtyy","title":"static func != ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/!=(_:_:)-3zj9d","title":"static func != (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/!=(_:_:)-5x24c","title":"static func != (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/!=(_:_:)-6zr2j","title":"static func != (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/!==(_:_:)-1lip3","title":"static func !== (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/!==(_:_:)-4yok1","title":"static func !== (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/!==(_:_:)-8smjh","title":"static func !== ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/&&(_:_:)-31r2j","title":"static func && (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/&&(_:_:)-4zhe2","title":"static func && (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/&&(_:_:)-5jtox","title":"static func && (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/*(_:_:)-5hevq","title":"static func * (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/*(_:_:)-ef9g","title":"static func * (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/*(_:_:)-mxu0","title":"static func * (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/+(_:_:)-7li1n","title":"static func + (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/+(_:_:)-9sgku","title":"static func + (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/+(_:_:)-h8pe","title":"static func + (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/-(_:)","title":"static func - (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/-(_:_:)-47tip","title":"static func - (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/-(_:_:)-88ysr","title":"static func - (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/-(_:_:)-8cl7n","title":"static func - (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/\/(_:_:)-33k0d","title":"static func \/ (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/\/(_:_:)-48puy","title":"static func \/ (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/\/(_:_:)-5wkxq","title":"static func \/ (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/==(_:_:)-19he9","title":"static func == (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/==(_:_:)-1zz7g","title":"static func == (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/==(_:_:)-33lkc","title":"static func == (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/==(_:_:)-3dgn7","title":"static func == (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/==(_:_:)-3w36x","title":"static func == ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/===(_:_:)-5co7w","title":"static func === (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/===(_:_:)-87k07","title":"static func === ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/===(_:_:)-8wclb","title":"static func === (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/_(_:_:)-4g1el","title":"static func > (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/_(_:_:)-4knxu","title":"static func < (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/_(_:_:)-4n4rs","title":"static func > (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/_(_:_:)-4z74o","title":"static func < (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/_(_:_:)-5fpzn","title":"static func < (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/_(_:_:)-7fiij","title":"static func > (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/_=(_:_:)-5t0op","title":"static func <= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/_=(_:_:)-6aunr","title":"static func >= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/_=(_:_:)-6nc2q","title":"static func <= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/_=(_:_:)-8vdl4","title":"static func >= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/_=(_:_:)-939r4","title":"static func >= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/_=(_:_:)-9a0ro","title":"static func <= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/__(_:_:)-5mz8m","title":"static func || (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/__(_:_:)-8n3g4","title":"static func || (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/__(_:_:)-8v1tp","title":"static func ?? (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlexpression\/__(_:_:)-grt8","title":"static func || (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlexpression\/asc","title":"var asc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqlexpression\/ascnullslast","title":"var ascNullsLast: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqlexpression\/capitalized","title":"var capitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlexpression\/desc","title":"var desc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqlexpression\/descnullsfirst","title":"var descNullsFirst: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqlexpression\/localizedcapitalized","title":"var localizedCapitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlexpression\/localizedlowercased","title":"var localizedLowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlexpression\/localizeduppercased","title":"var localizedUppercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlexpression\/lowercased","title":"var lowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlexpression\/uppercased","title":"var uppercased: SQLExpression","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlexpression\/collating(_:)-5kgrg","title":"func collating(DatabaseCollation) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/sqlexpression\/collating(_:)-8rbqu","title":"func collating(Database.CollationName) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/sqlexpression\/forkey(_:)","title":"func forKey(String) -> SQLSelection","type":"method"},{"path":"\/documentation\/grdb\/sqlexpression\/like(_:escape:)","title":"func like(some SQLExpressible, escape: (SQLExpressible)?) -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/sqlexpression\/sqlspecificexpressible-implementations","title":"SQLSpecificExpressible Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/sqlexpression","title":"SQLExpression","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/databasevalueconvertible\/sqlexpression","title":"var sqlExpression: SQLExpression","type":"property"}],"title":"DatabaseValueConvertible Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/grdb\/sqlexpressible\/sqlexpression-8cuhg","title":"var sqlExpression: SQLExpression","type":"property"}],"title":"SQLExpressible Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/sqlexpressible\/sqlexpression-1vqsd","title":"var sqlExpression: SQLExpression","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlexpressible\/rowid","title":"static var rowID: Column","type":"property"}],"path":"\/documentation\/grdb\/sqlexpressible","title":"SQLExpressible","type":"protocol"},{"children":[{"title":"Column Expressions","type":"groupMarker"},{"children":[{"title":"Standard Columns","type":"groupMarker"},{"path":"\/documentation\/grdb\/column\/rowid-3bn70","title":"static let rowID: Column","type":"property"},{"title":"Creating A Column","type":"groupMarker"},{"path":"\/documentation\/grdb\/column\/init(_:)-5grmu","title":"init(String)","type":"init"},{"path":"\/documentation\/grdb\/column\/init(_:)-7xc4z","title":"init(some CodingKey)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/column\/name","title":"var name: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/column\/*=(_:_:)","title":"static func *= (Self, some SQLExpressible) -> ColumnAssignment","type":"op"},{"path":"\/documentation\/grdb\/column\/+=(_:_:)","title":"static func += (Self, some SQLExpressible) -> ColumnAssignment","type":"op"},{"path":"\/documentation\/grdb\/column\/-=(_:_:)","title":"static func -= (Self, some SQLExpressible) -> ColumnAssignment","type":"op"},{"path":"\/documentation\/grdb\/column\/\/=(_:_:)","title":"static func \/= (Self, some SQLExpressible) -> ColumnAssignment","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/column\/detached","title":"var detached: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/column\/nooverwrite","title":"var noOverwrite: ColumnAssignment","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/column\/match(_:)","title":"func match(FTS3Pattern?) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/column\/set(to:)","title":"func set(to: (SQLExpressible)?) -> ColumnAssignment","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/column\/rowid-5trxi","title":"static var rowID: Column","type":"property"}],"path":"\/documentation\/grdb\/column\/columnexpression-implementations","title":"ColumnExpression Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/column\/sqlexpression","title":"var sqlExpression: SQLExpression","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/column\/rowid-msvj","title":"static var rowID: Column","type":"property"}],"path":"\/documentation\/grdb\/column\/sqlexpressible-implementations","title":"SQLExpressible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/column\/sqlordering","title":"var sqlOrdering: SQLOrdering","type":"property"}],"path":"\/documentation\/grdb\/column\/sqlorderingterm-implementations","title":"SQLOrderingTerm Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/column\/sqlselection","title":"var sqlSelection: SQLSelection","type":"property"}],"path":"\/documentation\/grdb\/column\/sqlselectable-implementations","title":"SQLSelectable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/column\/!(_:)","title":"static func ! (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/!=(_:_:)-26vx3","title":"static func != (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/!=(_:_:)-34om8","title":"static func != ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/!=(_:_:)-3r2wk","title":"static func != (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/!=(_:_:)-83r3m","title":"static func != (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/!=(_:_:)-9mvmu","title":"static func != (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/!==(_:_:)-3c4e4","title":"static func !== ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/!==(_:_:)-4art4","title":"static func !== (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/!==(_:_:)-82mi1","title":"static func !== (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/&&(_:_:)-2z9bo","title":"static func && (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/&&(_:_:)-4gfos","title":"static func && (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/&&(_:_:)-lws4","title":"static func && (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/*(_:_:)-36tt2","title":"static func * (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/*(_:_:)-702kb","title":"static func * (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/*(_:_:)-9rrnx","title":"static func * (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/+(_:_:)-2xj0u","title":"static func + (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/+(_:_:)-62n0u","title":"static func + (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/+(_:_:)-6erpf","title":"static func + (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/-(_:)","title":"static func - (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/-(_:_:)-1nj7u","title":"static func - (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/-(_:_:)-227kz","title":"static func - (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/-(_:_:)-3mjn5","title":"static func - (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/\/(_:_:)-71wsf","title":"static func \/ (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/\/(_:_:)-72pu4","title":"static func \/ (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/\/(_:_:)-8rzn8","title":"static func \/ (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/==(_:_:)-1ktvm","title":"static func == (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/==(_:_:)-33gyk","title":"static func == (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/==(_:_:)-6aabe","title":"static func == (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/==(_:_:)-9dwia","title":"static func == (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/==(_:_:)-9tw5k","title":"static func == ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/===(_:_:)-1j1ub","title":"static func === (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/===(_:_:)-8oix","title":"static func === ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/===(_:_:)-90w69","title":"static func === (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/_(_:_:)-22ld8","title":"static func > (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/_(_:_:)-3vzq4","title":"static func < (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/_(_:_:)-3w2ti","title":"static func < (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/_(_:_:)-4a8xg","title":"static func > (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/_(_:_:)-5jocl","title":"static func < (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/_(_:_:)-8bwbo","title":"static func > (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/_=(_:_:)-27qk7","title":"static func >= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/_=(_:_:)-30xsw","title":"static func <= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/_=(_:_:)-5gam6","title":"static func <= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/_=(_:_:)-8lt8u","title":"static func >= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/_=(_:_:)-c1o3","title":"static func <= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/_=(_:_:)-cz5l","title":"static func >= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/__(_:_:)-26dmq","title":"static func || (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/__(_:_:)-4pzv8","title":"static func || (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/__(_:_:)-72acx","title":"static func ?? (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/column\/__(_:_:)-e5w7","title":"static func || (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/column\/asc","title":"var asc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/column\/ascnullslast","title":"var ascNullsLast: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/column\/capitalized","title":"var capitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/column\/desc","title":"var desc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/column\/descnullsfirst","title":"var descNullsFirst: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/column\/localizedcapitalized","title":"var localizedCapitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/column\/localizedlowercased","title":"var localizedLowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/column\/localizeduppercased","title":"var localizedUppercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/column\/lowercased","title":"var lowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/column\/uppercased","title":"var uppercased: SQLExpression","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/column\/collating(_:)-2qq8y","title":"func collating(DatabaseCollation) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/column\/collating(_:)-6arrp","title":"func collating(Database.CollationName) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/column\/forkey(_:)","title":"func forKey(String) -> SQLSelection","type":"method"},{"path":"\/documentation\/grdb\/column\/like(_:escape:)","title":"func like(some SQLExpressible, escape: (SQLExpressible)?) -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/column\/sqlspecificexpressible-implementations","title":"SQLSpecificExpressible Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/column","title":"Column","type":"struct"},{"children":[{"title":"Standard Columns","type":"groupMarker"},{"path":"\/documentation\/grdb\/columnexpression\/rowid","title":"static var rowID: Column","type":"property"},{"title":"Deriving SQL Expressions","type":"groupMarker"},{"path":"\/documentation\/grdb\/columnexpression\/detached","title":"var detached: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/columnexpression\/match(_:)","title":"func match(FTS3Pattern?) -> SQLExpression","type":"method"},{"title":"Creating Column Assignments","type":"groupMarker"},{"path":"\/documentation\/grdb\/columnexpression\/nooverwrite","title":"var noOverwrite: ColumnAssignment","type":"property"},{"path":"\/documentation\/grdb\/columnexpression\/set(to:)","title":"func set(to: (SQLExpressible)?) -> ColumnAssignment","type":"method"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/columnexpression\/*=(_:_:)","title":"static func *= (Self, some SQLExpressible) -> ColumnAssignment","type":"op"},{"path":"\/documentation\/grdb\/columnexpression\/+=(_:_:)","title":"static func += (Self, some SQLExpressible) -> ColumnAssignment","type":"op"},{"path":"\/documentation\/grdb\/columnexpression\/-=(_:_:)","title":"static func -= (Self, some SQLExpressible) -> ColumnAssignment","type":"op"},{"path":"\/documentation\/grdb\/columnexpression\/\/=(_:_:)","title":"static func \/= (Self, some SQLExpressible) -> ColumnAssignment","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/columnexpression\/name-159px","title":"var name: String","type":"property"}],"title":"ColumnExpression Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/columnexpression\/name-20ow6","title":"var name: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/columnexpression\/sqlexpression","title":"var sqlExpression: SQLExpression","type":"property"}],"path":"\/documentation\/grdb\/columnexpression\/sqlexpressible-implementations","title":"SQLExpressible Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/columnexpression","title":"ColumnExpression","type":"protocol"},{"title":"Applying a Collation","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/collating(_:)-2mr78","title":"func collating(Database.CollationName) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/collating(_:)-10dk1","title":"func collating(DatabaseCollation) -> SQLExpression","type":"method"},{"title":"SQL Functions & Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/abs(_:)-5l6xp","title":"func abs(some SQLSpecificExpressible) -> SQLExpression","type":"func"},{"path":"\/documentation\/grdb\/average(_:)","title":"func average(some SQLSpecificExpressible) -> SQLExpression","type":"func"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/capitalized","title":"var capitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/count(_:)","title":"func count(some SQLSpecificExpressible) -> SQLExpression","type":"func"},{"path":"\/documentation\/grdb\/count(distinct:)","title":"func count(distinct: some SQLSpecificExpressible) -> SQLExpression","type":"func"},{"path":"\/documentation\/grdb\/datetime(_:_:)","title":"func dateTime(some SQLSpecificExpressible, SQLDateModifier...) -> SQLExpression","type":"func"},{"path":"\/documentation\/grdb\/julianday(_:_:)","title":"func julianDay(some SQLSpecificExpressible, SQLDateModifier...) -> SQLExpression","type":"func"},{"path":"\/documentation\/grdb\/length(_:)-41me0","title":"func length(some SQLSpecificExpressible) -> SQLExpression","type":"func"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/like(_:escape:)","title":"func like(some SQLExpressible, escape: (SQLExpressible)?) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/localizedcapitalized","title":"var localizedCapitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/localizedlowercased","title":"var localizedLowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/localizeduppercased","title":"var localizedUppercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/lowercased","title":"var lowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/min(_:)","title":"func min(some SQLSpecificExpressible) -> SQLExpression","type":"func"},{"path":"\/documentation\/grdb\/max(_:)","title":"func max(some SQLSpecificExpressible) -> SQLExpression","type":"func"},{"path":"\/documentation\/grdb\/sum(_:)","title":"func sum(some SQLSpecificExpressible) -> SQLExpression","type":"func"},{"path":"\/documentation\/grdb\/total(_:)","title":"func total(some SQLSpecificExpressible) -> SQLExpression","type":"func"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/uppercased","title":"var uppercased: SQLExpression","type":"property"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqldatemodifier\/day(_:)","title":"case day(Int)","type":"case"},{"path":"\/documentation\/grdb\/sqldatemodifier\/hour(_:)","title":"case hour(Int)","type":"case"},{"path":"\/documentation\/grdb\/sqldatemodifier\/localtime","title":"case localTime","type":"case"},{"path":"\/documentation\/grdb\/sqldatemodifier\/minute(_:)","title":"case minute(Int)","type":"case"},{"path":"\/documentation\/grdb\/sqldatemodifier\/month(_:)","title":"case month(Int)","type":"case"},{"path":"\/documentation\/grdb\/sqldatemodifier\/second(_:)","title":"case second(Double)","type":"case"},{"path":"\/documentation\/grdb\/sqldatemodifier\/startofday","title":"case startOfDay","type":"case"},{"path":"\/documentation\/grdb\/sqldatemodifier\/startofmonth","title":"case startOfMonth","type":"case"},{"path":"\/documentation\/grdb\/sqldatemodifier\/startofyear","title":"case startOfYear","type":"case"},{"path":"\/documentation\/grdb\/sqldatemodifier\/unixepoch","title":"case unixEpoch","type":"case"},{"path":"\/documentation\/grdb\/sqldatemodifier\/utc","title":"case utc","type":"case"},{"path":"\/documentation\/grdb\/sqldatemodifier\/weekday(_:)","title":"case weekday(Int)","type":"case"},{"path":"\/documentation\/grdb\/sqldatemodifier\/year(_:)","title":"case year(Int)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqldatemodifier\/sqlexpression","title":"var sqlExpression: SQLExpression","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqldatemodifier\/sqlordering","title":"var sqlOrdering: SQLOrdering","type":"property"}],"path":"\/documentation\/grdb\/sqldatemodifier\/sqlorderingterm-implementations","title":"SQLOrderingTerm Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqldatemodifier\/sqlselection","title":"var sqlSelection: SQLSelection","type":"property"}],"path":"\/documentation\/grdb\/sqldatemodifier\/sqlselectable-implementations","title":"SQLSelectable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqldatemodifier\/!(_:)","title":"static func ! (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/!=(_:_:)-14t09","title":"static func != (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/!=(_:_:)-1ddcw","title":"static func != (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/!=(_:_:)-3dvjm","title":"static func != (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/!=(_:_:)-4ho4b","title":"static func != ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/!=(_:_:)-749jt","title":"static func != (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/!==(_:_:)-1otgs","title":"static func !== (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/!==(_:_:)-76n3o","title":"static func !== (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/!==(_:_:)-j8qn","title":"static func !== ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/&&(_:_:)-3v2av","title":"static func && (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/&&(_:_:)-57fxc","title":"static func && (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/&&(_:_:)-shd9","title":"static func && (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/*(_:_:)-1u8e9","title":"static func * (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/*(_:_:)-2gnd8","title":"static func * (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/*(_:_:)-66t48","title":"static func * (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/+(_:_:)-47mgi","title":"static func + (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/+(_:_:)-7w932","title":"static func + (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/+(_:_:)-ahky","title":"static func + (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/-(_:)","title":"static func - (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/-(_:_:)-448mx","title":"static func - (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/-(_:_:)-73whd","title":"static func - (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/-(_:_:)-9ws3k","title":"static func - (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/\/(_:_:)-1dcvw","title":"static func \/ (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/\/(_:_:)-6li2j","title":"static func \/ (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/\/(_:_:)-8qadk","title":"static func \/ (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/==(_:_:)-1shea","title":"static func == (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/==(_:_:)-3dg4z","title":"static func == (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/==(_:_:)-4af59","title":"static func == (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/==(_:_:)-8bym1","title":"static func == (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/==(_:_:)-8hx3h","title":"static func == ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/===(_:_:)-2gcxg","title":"static func === (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/===(_:_:)-7yrvp","title":"static func === ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/===(_:_:)-8lbmg","title":"static func === (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/_(_:_:)-1p4nj","title":"static func > (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/_(_:_:)-2i5df","title":"static func > (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/_(_:_:)-4rh3d","title":"static func < (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/_(_:_:)-8cs6n","title":"static func < (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/_(_:_:)-macp","title":"static func < (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/_(_:_:)-weqk","title":"static func > (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/_=(_:_:)-2ud7","title":"static func >= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/_=(_:_:)-40ji8","title":"static func <= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/_=(_:_:)-429zl","title":"static func <= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/_=(_:_:)-6z3gn","title":"static func <= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/_=(_:_:)-8apdl","title":"static func >= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/_=(_:_:)-bdyy","title":"static func >= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/__(_:_:)-6noh9","title":"static func || (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/__(_:_:)-7kp7k","title":"static func ?? (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/__(_:_:)-87zvm","title":"static func || (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqldatemodifier\/__(_:_:)-94jmk","title":"static func || (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqldatemodifier\/asc","title":"var asc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqldatemodifier\/ascnullslast","title":"var ascNullsLast: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqldatemodifier\/capitalized","title":"var capitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqldatemodifier\/desc","title":"var desc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqldatemodifier\/descnullsfirst","title":"var descNullsFirst: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqldatemodifier\/localizedcapitalized","title":"var localizedCapitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqldatemodifier\/localizedlowercased","title":"var localizedLowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqldatemodifier\/localizeduppercased","title":"var localizedUppercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqldatemodifier\/lowercased","title":"var lowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqldatemodifier\/uppercased","title":"var uppercased: SQLExpression","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqldatemodifier\/collating(_:)-400js","title":"func collating(DatabaseCollation) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/sqldatemodifier\/collating(_:)-9f3r2","title":"func collating(Database.CollationName) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/sqldatemodifier\/forkey(_:)","title":"func forKey(String) -> SQLSelection","type":"method"},{"path":"\/documentation\/grdb\/sqldatemodifier\/like(_:escape:)","title":"func like(some SQLExpressible, escape: (SQLExpressible)?) -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/sqldatemodifier\/sqlspecificexpressible-implementations","title":"SQLSpecificExpressible Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/sqldatemodifier","title":"SQLDateModifier","type":"enum"},{"title":"Creating Ordering Terms","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/asc","title":"var asc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/ascnullslast","title":"var ascNullsLast: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/desc","title":"var desc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/descnullsfirst","title":"var descNullsFirst: SQLOrdering","type":"property"},{"title":"Creating Result Columns","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/forkey(_:)-3xk0","title":"func forKey(String) -> SQLSelection","type":"method"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/forkey(_:)-3egx6","title":"func forKey(some CodingKey) -> SQLSelection","type":"method"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/!(_:)","title":"static func ! (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/!=(_:_:)-42uj4","title":"static func != (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/!=(_:_:)-6osow","title":"static func != ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/!=(_:_:)-6ves3","title":"static func != (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/!=(_:_:)-8wexw","title":"static func != (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/!=(_:_:)-9ll23","title":"static func != (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/!==(_:_:)-13wf4","title":"static func !== ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/!==(_:_:)-3z3wx","title":"static func !== (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/!==(_:_:)-47tus","title":"static func !== (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/&&(_:_:)-2l3vh","title":"static func && (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/&&(_:_:)-7dikc","title":"static func && (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/&&(_:_:)-9ej1o","title":"static func && (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/*(_:_:)-42pxr","title":"static func * (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/*(_:_:)-52twp","title":"static func * (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/*(_:_:)-5ma1p","title":"static func * (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/+(_:_:)-2umho","title":"static func + (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/+(_:_:)-3xbc4","title":"static func + (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/+(_:_:)-8ftf3","title":"static func + (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/-(_:)","title":"static func - (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/-(_:_:)-3web8","title":"static func - (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/-(_:_:)-8ntck","title":"static func - (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/-(_:_:)-hjzq","title":"static func - (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/\/(_:_:)-173cc","title":"static func \/ (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/\/(_:_:)-1bokp","title":"static func \/ (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/\/(_:_:)-1p9ik","title":"static func \/ (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/==(_:_:)-4i8xg","title":"static func == (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/==(_:_:)-51cm6","title":"static func == (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/==(_:_:)-5uvt2","title":"static func == ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/==(_:_:)-790eb","title":"static func == (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/==(_:_:)-9c8qz","title":"static func == (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/===(_:_:)-3fx9i","title":"static func === (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/===(_:_:)-4r6wn","title":"static func === (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/===(_:_:)-5dhg5","title":"static func === ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/_(_:_:)-10jvh","title":"static func > (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/_(_:_:)-25mu5","title":"static func < (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/_(_:_:)-2j5zi","title":"static func > (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/_(_:_:)-4kc62","title":"static func > (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/_(_:_:)-77h5e","title":"static func < (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/_(_:_:)-7y6op","title":"static func < (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/_=(_:_:)-22i87","title":"static func >= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/_=(_:_:)-3dcbl","title":"static func <= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/_=(_:_:)-41nsr","title":"static func >= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/_=(_:_:)-4lexa","title":"static func <= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/_=(_:_:)-6684l","title":"static func <= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/_=(_:_:)-97hhu","title":"static func >= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/__(_:_:)-4axwc","title":"static func || (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/__(_:_:)-7shbp","title":"static func || (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/__(_:_:)-9d0yb","title":"static func ?? (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlspecificexpressible\/__(_:_:)-9pr7j","title":"static func || (some SQLExpressible, Self) -> SQLExpression","type":"op"}],"path":"\/documentation\/grdb\/sqlspecificexpressible","title":"SQLSpecificExpressible","type":"protocol"},{"children":[{"title":"Supporting Type","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlordering\/sqlordering","title":"var sqlOrdering: SQLOrdering","type":"property"}],"path":"\/documentation\/grdb\/sqlordering\/sqlorderingterm-implementations","title":"SQLOrderingTerm Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/sqlordering","title":"SQLOrdering","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/sqlorderingterm\/sqlordering-q9za","title":"var sqlOrdering: SQLOrdering","type":"property"}],"title":"SQLOrderingTerm Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/grdb\/sqlspecificexpressible\/sqlordering","title":"var sqlOrdering: SQLOrdering","type":"property"}],"title":"SQLSpecificExpressible Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/sqlorderingterm\/sqlordering-5prkr","title":"var sqlOrdering: SQLOrdering","type":"property"}],"path":"\/documentation\/grdb\/sqlorderingterm","title":"SQLOrderingTerm","type":"protocol"},{"children":[{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/allcolumns\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/allcolumns\/sqlselection","title":"var sqlSelection: SQLSelection","type":"property"}],"path":"\/documentation\/grdb\/allcolumns\/sqlselectable-implementations","title":"SQLSelectable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/allcolumns","title":"AllColumns","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlselection\/sqlselection","title":"var sqlSelection: SQLSelection","type":"property"}],"path":"\/documentation\/grdb\/sqlselection\/sqlselectable-implementations","title":"SQLSelectable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/sqlselection","title":"SQLSelection","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/sqlselectable\/sqlselection-2f9mk","title":"var sqlSelection: SQLSelection","type":"property"}],"title":"SQLSelectable Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/grdb\/sqlspecificexpressible\/sqlselection","title":"var sqlSelection: SQLSelection","type":"property"}],"title":"SQLSpecificExpressible Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/sqlselectable\/sqlselection-4rpo4","title":"var sqlSelection: SQLSelection","type":"property"}],"path":"\/documentation\/grdb\/sqlselectable","title":"SQLSelectable","type":"protocol"},{"children":[{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlsubquery\/sqlordering","title":"var sqlOrdering: SQLOrdering","type":"property"}],"path":"\/documentation\/grdb\/sqlsubquery\/sqlorderingterm-implementations","title":"SQLOrderingTerm Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlsubquery\/sqlselection","title":"var sqlSelection: SQLSelection","type":"property"}],"path":"\/documentation\/grdb\/sqlsubquery\/sqlselectable-implementations","title":"SQLSelectable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlsubquery\/!(_:)","title":"static func ! (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/!=(_:_:)-2cv7e","title":"static func != ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/!=(_:_:)-2k3ah","title":"static func != (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/!=(_:_:)-31pni","title":"static func != (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/!=(_:_:)-3fr1","title":"static func != (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/!=(_:_:)-5gyzd","title":"static func != (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/!==(_:_:)-20ncj","title":"static func !== (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/!==(_:_:)-63ug6","title":"static func !== (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/!==(_:_:)-8riyz","title":"static func !== ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/&&(_:_:)-4nxx9","title":"static func && (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/&&(_:_:)-70aqc","title":"static func && (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/&&(_:_:)-dl8i","title":"static func && (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/*(_:_:)-2cu4a","title":"static func * (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/*(_:_:)-31arw","title":"static func * (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/*(_:_:)-9yvsl","title":"static func * (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/+(_:_:)-2ympl","title":"static func + (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/+(_:_:)-38z4r","title":"static func + (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/+(_:_:)-5p0me","title":"static func + (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/-(_:)","title":"static func - (Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/-(_:_:)-2iuuq","title":"static func - (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/-(_:_:)-2laor","title":"static func - (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/-(_:_:)-9m56d","title":"static func - (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/\/(_:_:)-3bdfx","title":"static func \/ (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/\/(_:_:)-3d2s6","title":"static func \/ (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/\/(_:_:)-w8dx","title":"static func \/ (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/==(_:_:)-32k2i","title":"static func == (Bool, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/==(_:_:)-58jgh","title":"static func == ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/==(_:_:)-5wuyx","title":"static func == (Self, Bool) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/==(_:_:)-6eoq8","title":"static func == (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/==(_:_:)-7in4x","title":"static func == (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/===(_:_:)-4vam","title":"static func === ((SQLExpressible)?, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/===(_:_:)-872t1","title":"static func === (Self, (SQLExpressible)?) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/===(_:_:)-9xhw1","title":"static func === (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/_(_:_:)-2pln2","title":"static func < (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/_(_:_:)-2rce3","title":"static func > (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/_(_:_:)-2z0kd","title":"static func < (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/_(_:_:)-3om00","title":"static func > (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/_(_:_:)-5z9et","title":"static func > (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/_(_:_:)-61q5m","title":"static func < (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/_=(_:_:)-11gw3","title":"static func <= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/_=(_:_:)-279cc","title":"static func >= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/_=(_:_:)-2tqzv","title":"static func >= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/_=(_:_:)-3rzgw","title":"static func <= (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/_=(_:_:)-7bdsr","title":"static func >= (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/_=(_:_:)-wwo4","title":"static func <= (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/__(_:_:)-1kme","title":"static func ?? (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/__(_:_:)-2epss","title":"static func || (Self, some SQLExpressible) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/__(_:_:)-5dmca","title":"static func || (some SQLExpressible, Self) -> SQLExpression","type":"op"},{"path":"\/documentation\/grdb\/sqlsubquery\/__(_:_:)-9nxom","title":"static func || (Self, some SQLSpecificExpressible) -> SQLExpression","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlsubquery\/asc","title":"var asc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqlsubquery\/ascnullslast","title":"var ascNullsLast: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqlsubquery\/capitalized","title":"var capitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlsubquery\/desc","title":"var desc: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqlsubquery\/descnullsfirst","title":"var descNullsFirst: SQLOrdering","type":"property"},{"path":"\/documentation\/grdb\/sqlsubquery\/localizedcapitalized","title":"var localizedCapitalized: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlsubquery\/localizedlowercased","title":"var localizedLowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlsubquery\/localizeduppercased","title":"var localizedUppercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlsubquery\/lowercased","title":"var lowercased: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlsubquery\/uppercased","title":"var uppercased: SQLExpression","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlsubquery\/collating(_:)-2k6kv","title":"func collating(Database.CollationName) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/sqlsubquery\/collating(_:)-9bqbj","title":"func collating(DatabaseCollation) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/sqlsubquery\/forkey(_:)","title":"func forKey(String) -> SQLSelection","type":"method"},{"path":"\/documentation\/grdb\/sqlsubquery\/like(_:escape:)","title":"func like(some SQLExpressible, escape: (SQLExpressible)?) -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/sqlsubquery\/sqlspecificexpressible-implementations","title":"SQLSpecificExpressible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlsubquery\/sqlexpression","title":"var sqlExpression: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlsubquery\/sqlsubquery","title":"var sqlSubquery: SQLSubquery","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlsubquery\/contains(_:)","title":"func contains(some SQLExpressible) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/sqlsubquery\/exists()","title":"func exists() -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/sqlsubquery\/sqlsubqueryable-implementations","title":"SQLSubqueryable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/sqlsubquery","title":"SQLSubquery","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlsubqueryable\/sqlexpression","title":"var sqlExpression: SQLExpression","type":"property"},{"path":"\/documentation\/grdb\/sqlsubqueryable\/sqlsubquery","title":"var sqlSubquery: SQLSubquery","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/sqlsubqueryable\/contains(_:)","title":"func contains(some SQLExpressible) -> SQLExpression","type":"method"},{"path":"\/documentation\/grdb\/sqlsubqueryable\/exists()","title":"func exists() -> SQLExpression","type":"method"}],"path":"\/documentation\/grdb\/sqlsubqueryable","title":"SQLSubqueryable","type":"protocol"}],"path":"\/documentation\/grdb\/queryinterface","title":"Record Types and the Query Interface","type":"symbol"},{"title":"Database Observation","type":"groupMarker"},{"children":[{"title":"Observing Database Values","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/iterator\/next()","title":"func next() async throws -> Element?","type":"method"}],"path":"\/documentation\/grdb\/asyncvalueobservation\/iterator","title":"AsyncValueObservation.Iterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncValueObservation<Element>.Iterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/asynciterator","title":"AsyncValueObservation.AsyncIterator","type":"typealias"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/bufferingpolicy","title":"AsyncValueObservation.BufferingPolicy","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/compactmap(_:)-25ou7","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/compactmap(_:)-7qh78","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/flatmap(_:)-180ab","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/flatmap(_:)-6grlk","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/map(_:)-6jgpd","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/map(_:)-9p6ja","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/grdb\/asyncvalueobservation\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/grdb\/asyncvalueobservation\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/asyncvalueobservation","title":"AsyncValueObservation","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/sharedvalueobservation\/publisher()","title":"func publisher() -> DatabasePublishers.Value<Element>","type":"method"},{"path":"\/documentation\/grdb\/sharedvalueobservation\/start(onerror:onchange:)","title":"func start(onError: (Error) -> Void, onChange: (Element) -> Void) -> AnyDatabaseCancellable","type":"method"},{"path":"\/documentation\/grdb\/sharedvalueobservation\/values(bufferingpolicy:)","title":"func values(bufferingPolicy: AsyncValueObservation<Element>.BufferingPolicy) -> AsyncValueObservation<Element>","type":"method"}],"path":"\/documentation\/grdb\/sharedvalueobservation","title":"SharedValueObservation","type":"class"},{"children":[{"title":"Creating a ValueObservation","type":"groupMarker"},{"path":"\/documentation\/grdb\/valueobservation\/tracking(_:)","title":"static func tracking<Value>((Database) throws -> Value) -> ValueObservation<ValueReducers.Fetch<Value>>","type":"method"},{"path":"\/documentation\/grdb\/valueobservation\/trackingconstantregion(_:)","title":"static func trackingConstantRegion<Value>((Database) throws -> Value) -> ValueObservation<ValueReducers.Fetch<Value>>","type":"method"},{"path":"\/documentation\/grdb\/valueobservation\/tracking(region:fetch:)","title":"static func tracking<Value>(region: DatabaseRegionConvertible..., fetch: (Database) throws -> Value) -> ValueObservation<ValueReducers.Fetch<Value>>","type":"method"},{"path":"\/documentation\/grdb\/valueobservation\/tracking(regions:fetch:)","title":"static func tracking<Value>(regions: [DatabaseRegionConvertible], fetch: (Database) throws -> Value) -> ValueObservation<ValueReducers.Fetch<Value>>","type":"method"},{"title":"Creating A Shared Observation","type":"groupMarker"},{"path":"\/documentation\/grdb\/valueobservation\/shared(in:scheduling:extent:)","title":"func shared(in: some DatabaseReader, scheduling: ValueObservationScheduler, extent: SharedValueObservationExtent) -> SharedValueObservation<Reducer.Value>","type":"method"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/sharedvalueobservationextent\/observationlifetime","title":"case observationLifetime","type":"case"},{"path":"\/documentation\/grdb\/sharedvalueobservationextent\/whileobserved","title":"case whileObserved","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/sharedvalueobservationextent\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/sharedvalueobservationextent\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/sharedvalueobservationextent","title":"SharedValueObservationExtent","type":"enum"},{"title":"Accessing Observed Values","type":"groupMarker"},{"path":"\/documentation\/grdb\/valueobservation\/publisher(in:scheduling:)","title":"func publisher(in: some DatabaseReader, scheduling: ValueObservationScheduler) -> DatabasePublishers.Value<Reducer.Value>","type":"method"},{"path":"\/documentation\/grdb\/valueobservation\/start(in:scheduling:onerror:onchange:)","title":"func start(in: some DatabaseReader, scheduling: ValueObservationScheduler, onError: (Error) -> Void, onChange: (Reducer.Value) -> Void) -> AnyDatabaseCancellable","type":"method"},{"path":"\/documentation\/grdb\/valueobservation\/values(in:scheduling:bufferingpolicy:)","title":"func values(in: some DatabaseReader, scheduling: ValueObservationScheduler, bufferingPolicy: AsyncValueObservation<Reducer.Value>.BufferingPolicy) -> AsyncValueObservation<Reducer.Value>","type":"method"},{"children":[{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/anydatabasecancellable\/init(_:)","title":"convenience init(some DatabaseCancellable)","type":"init"},{"path":"\/documentation\/grdb\/anydatabasecancellable\/init(cancel:)","title":"init(cancel: () -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/anydatabasecancellable\/cancel()","title":"func cancel()","type":"method"}],"path":"\/documentation\/grdb\/anydatabasecancellable","title":"AnyDatabaseCancellable","type":"class"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasecancellable\/cancel()","title":"func cancel()","type":"method"}],"path":"\/documentation\/grdb\/databasecancellable","title":"DatabaseCancellable","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/valueobservationscheduler\/immediate","title":"static let immediate: ValueObservationScheduler","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/valueobservationscheduler\/async(onqueue:)","title":"static func async(onQueue: DispatchQueue) -> ValueObservationScheduler","type":"method"}],"path":"\/documentation\/grdb\/valueobservationscheduler","title":"ValueObservationScheduler","type":"class"},{"title":"Mapping Values","type":"groupMarker"},{"path":"\/documentation\/grdb\/valueobservation\/map(_:)","title":"func map<T>((Reducer.Value) throws -> T) -> ValueObservation<ValueReducers.Map<Reducer, T>>","type":"method"},{"title":"Filtering Values","type":"groupMarker"},{"path":"\/documentation\/grdb\/valueobservation\/removeduplicates()","title":"func removeDuplicates() -> ValueObservation<ValueReducers.RemoveDuplicates<Reducer>>","type":"method"},{"path":"\/documentation\/grdb\/valueobservation\/removeduplicates(by:)","title":"func removeDuplicates(by: (Reducer.Value, Reducer.Value) -> Bool) -> ValueObservation<ValueReducers.RemoveDuplicates<Reducer>>","type":"method"},{"title":"Requiring Write Access","type":"groupMarker"},{"path":"\/documentation\/grdb\/valueobservation\/requireswriteaccess","title":"var requiresWriteAccess: Bool","type":"property"},{"title":"Debugging","type":"groupMarker"},{"path":"\/documentation\/grdb\/valueobservation\/handleevents(willstart:willfetch:willtrackregion:databasedidchange:didreceivevalue:didfail:didcancel:)","title":"func handleEvents(willStart: (() -> Void)?, willFetch: (() -> Void)?, willTrackRegion: ((DatabaseRegion) -> Void)?, databaseDidChange: (() -> Void)?, didReceiveValue: ((Reducer.Value) -> Void)?, didFail: ((Error) -> Void)?, didCancel: (() -> Void)?) -> ValueObservation<ValueReducers.Trace<Reducer>>","type":"method"},{"path":"\/documentation\/grdb\/valueobservation\/print(_:to:)","title":"func print(String, to: TextOutputStream?) -> ValueObservation<ValueReducers.Trace<Reducer>>","type":"method"},{"title":"Support","type":"groupMarker"},{"children":[{"title":"Support","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/grdb\/valuereducers\/fetch","title":"ValueReducers.Fetch","type":"struct"},{"path":"\/documentation\/grdb\/valuereducers\/map","title":"ValueReducers.Map","type":"struct"},{"path":"\/documentation\/grdb\/valuereducers\/removeduplicates","title":"ValueReducers.RemoveDuplicates","type":"struct"},{"path":"\/documentation\/grdb\/valuereducers\/trace","title":"ValueReducers.Trace","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"path":"\/documentation\/grdb\/valuereducers\/auto","title":"ValueReducers.Auto","type":"enum"}],"path":"\/documentation\/grdb\/valuereducers","title":"ValueReducers","type":"enum"}],"path":"\/documentation\/grdb\/valuereducer","title":"ValueReducer","type":"typealias"}],"path":"\/documentation\/grdb\/valueobservation","title":"ValueObservation","type":"struct"},{"title":"Observing Database Transactions","type":"groupMarker"},{"children":[{"title":"Creating Regions","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseregion\/fulldatabase-3ir3p","title":"static let fullDatabase: DatabaseRegion","type":"property"},{"path":"\/documentation\/grdb\/databaseregion\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseregion\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/grdb\/databaseregion\/isfulldatabase","title":"var isFullDatabase: Bool","type":"property"},{"title":"Combining Regions","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseregion\/formunion(_:)","title":"func formUnion(DatabaseRegion)","type":"method"},{"path":"\/documentation\/grdb\/databaseregion\/union(_:)","title":"func union(DatabaseRegion) -> DatabaseRegion","type":"method"},{"title":"Detecting Database Changes","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseregion\/ismodified(byeventsofkind:)","title":"func isModified(byEventsOfKind: DatabaseEventKind) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/databaseregion\/ismodified(by:)","title":"func isModified(by: DatabaseEvent) -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseregion\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/grdb\/databaseregion\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseregion\/databaseregion(_:)","title":"func databaseRegion(Database) throws -> DatabaseRegion","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseregion\/fulldatabase-4ei0v","title":"static var fullDatabase: DatabaseRegion","type":"property"}],"path":"\/documentation\/grdb\/databaseregion\/databaseregionconvertible-implementations","title":"DatabaseRegionConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseregion\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/grdb\/databaseregion\/==(_:_:)","title":"static func == (DatabaseRegion, DatabaseRegion) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/databaseregion\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databaseregion","title":"DatabaseRegion","type":"struct"},{"children":[{"title":"Creating DatabaseRegionObservation","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseregionobservation\/init(tracking:)-5ldbe","title":"init(tracking: DatabaseRegionConvertible...)","type":"init"},{"path":"\/documentation\/grdb\/databaseregionobservation\/init(tracking:)-2nqjd","title":"init(tracking: [DatabaseRegionConvertible])","type":"init"},{"title":"Observing Database Transactions","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseregionobservation\/publisher(in:)","title":"func publisher(in: some DatabaseWriter) -> DatabasePublishers.DatabaseRegion","type":"method"},{"path":"\/documentation\/grdb\/databaseregionobservation\/start(in:onerror:onchange:)","title":"func start(in: some DatabaseWriter, onError: (Error) -> Void, onChange: (Database) -> Void) -> AnyDatabaseCancellable","type":"method"}],"path":"\/documentation\/grdb\/databaseregionobservation","title":"DatabaseRegionObservation","type":"struct"},{"children":[{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/anydatabaseregionconvertible\/init(_:)-56gqt","title":"init(some DatabaseRegionConvertible)","type":"init"},{"path":"\/documentation\/grdb\/anydatabaseregionconvertible\/init(_:)-9r9im","title":"init((Database) throws -> DatabaseRegion)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/anydatabaseregionconvertible\/databaseregion(_:)","title":"func databaseRegion(Database) throws -> DatabaseRegion","type":"method"}],"path":"\/documentation\/grdb\/anydatabaseregionconvertible","title":"AnyDatabaseRegionConvertible","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/fetchrequest\/databaseregion(_:)","title":"func databaseRegion(Database) throws -> DatabaseRegion","type":"method"}],"title":"FetchRequest Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/databaseregionconvertible\/databaseregion(_:)","title":"func databaseRegion(Database) throws -> DatabaseRegion","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseregionconvertible\/fulldatabase","title":"static var fullDatabase: DatabaseRegion","type":"property"}],"path":"\/documentation\/grdb\/databaseregionconvertible","title":"DatabaseRegionConvertible","type":"protocol"},{"children":[{"title":"Handling Database Changes","type":"groupMarker"},{"path":"\/documentation\/grdb\/transactionobserver\/observes(eventsofkind:)","title":"func observes(eventsOfKind: DatabaseEventKind) -> Bool","type":"method"},{"path":"\/documentation\/grdb\/transactionobserver\/databasedidchange(with:)","title":"func databaseDidChange(with: DatabaseEvent)","type":"method"},{"path":"\/documentation\/grdb\/transactionobserver\/stopobservingdatabasechangesuntilnexttransaction()","title":"func stopObservingDatabaseChangesUntilNextTransaction()","type":"method"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseevent\/databasename","title":"var databaseName: String","type":"property"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.property","title":"let kind: DatabaseEvent.Kind","type":"property"},{"path":"\/documentation\/grdb\/databaseevent\/rowid","title":"let rowID: Int64","type":"property"},{"path":"\/documentation\/grdb\/databaseevent\/tablename","title":"var tableName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseevent\/copy()","title":"func copy() -> DatabaseEvent","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/delete","title":"case delete","type":"case"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/insert","title":"case insert","type":"case"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/update","title":"case update","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/init(rawvalue:)","title":"init?(rawValue: CInt)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databaseevent\/kind-swift.enum","title":"DatabaseEvent.Kind","type":"enum"}],"path":"\/documentation\/grdb\/databaseevent","title":"DatabaseEvent","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseeventkind\/delete(tablename:)","title":"case delete(tableName: String)","type":"case"},{"path":"\/documentation\/grdb\/databaseeventkind\/insert(tablename:)","title":"case insert(tableName: String)","type":"case"},{"path":"\/documentation\/grdb\/databaseeventkind\/update(tablename:columnnames:)","title":"case update(tableName: String, columnNames: Set<String>)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databaseeventkind\/tablename","title":"var tableName: String","type":"property"}],"path":"\/documentation\/grdb\/databaseeventkind","title":"DatabaseEventKind","type":"enum"},{"title":"Handling Transactions","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/grdb\/transactionobserver\/databasewillcommit()-6qfsx","title":"func databaseWillCommit() throws","type":"method"}],"title":"TransactionObserver Implementations","type":"groupMarker"}],"path":"\/documentation\/grdb\/transactionobserver\/databasewillcommit()-7mksu","title":"func databaseWillCommit() throws","type":"method"},{"path":"\/documentation\/grdb\/transactionobserver\/databasedidcommit(_:)","title":"func databaseDidCommit(Database)","type":"method"},{"path":"\/documentation\/grdb\/transactionobserver\/databasedidrollback(_:)","title":"func databaseDidRollback(Database)","type":"method"}],"path":"\/documentation\/grdb\/transactionobserver","title":"TransactionObserver","type":"protocol"}],"path":"\/documentation\/grdb\/databaseobservation","title":"Database Observation","type":"symbol"},{"title":"Full-Text Search","type":"groupMarker"},{"children":[{"title":"The FTS3 Module","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3\/init()","title":"init()","type":"init"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3tabledefinition\/tokenizer","title":"var tokenizer: FTS3TokenizerDescriptor?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3tabledefinition\/column(_:)","title":"func column(String)","type":"method"}],"path":"\/documentation\/grdb\/fts3tabledefinition","title":"FTS3TableDefinition","type":"class"},{"children":[{"title":"Creating Tokenizers","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3tokenizerdescriptor\/porter","title":"static let porter: FTS3TokenizerDescriptor","type":"property"},{"path":"\/documentation\/grdb\/fts3tokenizerdescriptor\/simple","title":"static let simple: FTS3TokenizerDescriptor","type":"property"},{"path":"\/documentation\/grdb\/fts3tokenizerdescriptor\/unicode61(diacritics:separators:tokencharacters:)","title":"static func unicode61(diacritics: FTS3.Diacritics, separators: Set<Character>, tokenCharacters: Set<Character>) -> FTS3TokenizerDescriptor","type":"method"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3\/diacritics\/keep","title":"case keep","type":"case"},{"path":"\/documentation\/grdb\/fts3\/diacritics\/remove","title":"case remove","type":"case"},{"path":"\/documentation\/grdb\/fts3\/diacritics\/removelegacy","title":"case removeLegacy","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3\/diacritics\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/grdb\/fts3\/diacritics\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/fts3\/diacritics","title":"FTS3.Diacritics","type":"enum"}],"path":"\/documentation\/grdb\/fts3tokenizerdescriptor","title":"FTS3TokenizerDescriptor","type":"struct"},{"title":"Full-Text Search Pattern","type":"groupMarker"},{"children":[{"title":"Creating Raw FTS3 Patterns","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3pattern\/init(rawpattern:)","title":"init(rawPattern: String) throws","type":"init"},{"title":"Creating FTS3 Patterns from User Input","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3pattern\/init(matchingallprefixesin:)","title":"init?(matchingAllPrefixesIn: String)","type":"init"},{"path":"\/documentation\/grdb\/fts3pattern\/init(matchingalltokensin:)","title":"init?(matchingAllTokensIn: String)","type":"init"},{"path":"\/documentation\/grdb\/fts3pattern\/init(matchinganytokenin:)","title":"init?(matchingAnyTokenIn: String)","type":"init"},{"path":"\/documentation\/grdb\/fts3pattern\/init(matchingphrase:)","title":"init?(matchingPhrase: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3pattern\/rawpattern","title":"let rawPattern: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3pattern\/databasevalue","title":"var databaseValue: DatabaseValue","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3pattern\/fetchall(_:_:)","title":"static func fetchAll(Database, some FetchRequest) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/fts3pattern\/fetchall(_:arguments:adapter:)","title":"static func fetchAll(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/fts3pattern\/fetchall(_:sql:arguments:adapter:)","title":"static func fetchAll(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/grdb\/fts3pattern\/fetchcursor(_:_:)","title":"static func fetchCursor(Database, some FetchRequest) throws -> DatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fts3pattern\/fetchcursor(_:arguments:adapter:)","title":"static func fetchCursor(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> DatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fts3pattern\/fetchcursor(_:sql:arguments:adapter:)","title":"static func fetchCursor(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> DatabaseValueCursor<Self>","type":"method"},{"path":"\/documentation\/grdb\/fts3pattern\/fetchone(_:_:)","title":"static func fetchOne(Database, some FetchRequest) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/fts3pattern\/fetchone(_:arguments:adapter:)","title":"static func fetchOne(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/fts3pattern\/fetchone(_:sql:arguments:adapter:)","title":"static func fetchOne(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"path":"\/documentation\/grdb\/fts3pattern\/fromdatabasevalue(_:)","title":"static func fromDatabaseValue(DatabaseValue) -> FTS3Pattern?","type":"method"},{"path":"\/documentation\/grdb\/fts3pattern\/frommissingcolumn()","title":"static func fromMissingColumn() -> Self?","type":"method"}],"path":"\/documentation\/grdb\/fts3pattern\/databasevalueconvertible-implementations","title":"DatabaseValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3pattern\/sqlexpression","title":"var sqlExpression: SQLExpression","type":"property"}],"path":"\/documentation\/grdb\/fts3pattern\/sqlexpressible-implementations","title":"SQLExpressible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3pattern\/bind(to:at:)","title":"func bind(to: SQLiteStatement, at: CInt) -> CInt","type":"method"}],"path":"\/documentation\/grdb\/fts3pattern\/statementbinding-implementations","title":"StatementBinding Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/fts3pattern","title":"FTS3Pattern","type":"struct"},{"title":"Tokenizing Strings","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3\/tokenize(_:withtokenizer:)","title":"static func tokenize(String, withTokenizer: FTS3TokenizerDescriptor) throws -> [String]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3\/modulename","title":"var moduleName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts3\/database(_:didcreate:using:)","title":"func database(Database, didCreate: String, using: FTS3TableDefinition)","type":"method"},{"path":"\/documentation\/grdb\/fts3\/maketabledefinition(configuration:)","title":"func makeTableDefinition(configuration: VirtualTableConfiguration) -> FTS3TableDefinition","type":"method"},{"path":"\/documentation\/grdb\/fts3\/modulearguments(for:in:)","title":"func moduleArguments(for: FTS3TableDefinition, in: Database) -> [String]","type":"method"}],"path":"\/documentation\/grdb\/fts3\/virtualtablemodule-implementations","title":"VirtualTableModule Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/fts3","title":"FTS3","type":"struct"},{"children":[{"title":"The FTS4 Module","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts4\/init()","title":"init()","type":"init"},{"children":[{"title":"Define Columns","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts4tabledefinition\/column(_:)","title":"func column(String) -> FTS4ColumnDefinition","type":"method"},{"title":"External Content Tables","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts4tabledefinition\/synchronize(withtable:)","title":"func synchronize(withTable: String)","type":"method"},{"title":"FTS4 Options","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts4tabledefinition\/compress","title":"var compress: String?","type":"property"},{"path":"\/documentation\/grdb\/fts4tabledefinition\/content","title":"var content: String?","type":"property"},{"path":"\/documentation\/grdb\/fts4tabledefinition\/matchinfo","title":"var matchinfo: String?","type":"property"},{"path":"\/documentation\/grdb\/fts4tabledefinition\/prefixes","title":"var prefixes: Set<Int>?","type":"property"},{"path":"\/documentation\/grdb\/fts4tabledefinition\/tokenizer","title":"var tokenizer: FTS3TokenizerDescriptor?","type":"property"},{"path":"\/documentation\/grdb\/fts4tabledefinition\/uncompress","title":"var uncompress: String?","type":"property"}],"path":"\/documentation\/grdb\/fts4tabledefinition","title":"FTS4TableDefinition","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts4columndefinition\/aslanguageid()","title":"func asLanguageId() -> Self","type":"method"},{"path":"\/documentation\/grdb\/fts4columndefinition\/notindexed()","title":"func notIndexed() -> Self","type":"method"}],"path":"\/documentation\/grdb\/fts4columndefinition","title":"FTS4ColumnDefinition","type":"class"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts4\/modulename","title":"var moduleName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/fts4\/database(_:didcreate:using:)","title":"func database(Database, didCreate: String, using: FTS4TableDefinition) throws","type":"method"},{"path":"\/documentation\/grdb\/fts4\/maketabledefinition(configuration:)","title":"func makeTableDefinition(configuration: VirtualTableConfiguration) -> FTS4TableDefinition","type":"method"},{"path":"\/documentation\/grdb\/fts4\/modulearguments(for:in:)","title":"func moduleArguments(for: FTS4TableDefinition, in: Database) -> [String]","type":"method"}],"path":"\/documentation\/grdb\/fts4\/virtualtablemodule-implementations","title":"VirtualTableModule Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/fts4","title":"FTS4","type":"struct"},{"title":"Combine Publishers","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/receive(subscriber:)","title":"func receive<S>(subscriber: S)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/failure","title":"DatabasePublishers.DatabaseRegion.Failure","type":"typealias"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/output","title":"DatabasePublishers.DatabaseRegion.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/values","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/append(_:)","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/combinelatest(_:_:)-78k7n","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/combinelatest(_:_:)-90d4n","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/combinelatest(_:_:_:)-21dj6","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/combinelatest(_:_:_:)-6nlp","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/flatmap(maxpublishers:_:)-1q71n","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/flatmap(maxpublishers:_:)-9lrms","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/map(_:)-2zhpr","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/map(_:)-827an","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/merge(with:)","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/prepend(_:)","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/print(_:to:)","title":"func print(String, to: TextOutputStream?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/subscribe(_:)-1oo3l","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/subscribe(_:)-6n0bm","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/zip(_:_:)-4sqbi","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/zip(_:_:)-9h472","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/zip(_:_:_:)-8hqo5","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/zip(_:_:_:)-8of7f","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/grdb\/databasepublishers\/databaseregion\/publisher-implementations","title":"Publisher Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasepublishers\/databaseregion","title":"DatabasePublishers.DatabaseRegion","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/receive(subscriber:)","title":"func receive<S>(subscriber: S)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/failure","title":"DatabasePublishers.Migrate.Failure","type":"typealias"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/output","title":"DatabasePublishers.Migrate.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/values","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/append(_:)","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/combinelatest(_:_:)-63k66","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/combinelatest(_:_:)-6dioz","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/combinelatest(_:_:_:)-7bg68","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/combinelatest(_:_:_:)-9fkuw","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/flatmap(maxpublishers:_:)-4j5z5","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/flatmap(maxpublishers:_:)-712pm","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/map(_:)-31szk","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/map(_:)-39eka","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/merge(with:)","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/prepend(_:)","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/print(_:to:)","title":"func print(String, to: TextOutputStream?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/subscribe(_:)-5w6x1","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/subscribe(_:)-7as9b","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/zip(_:_:)-6id4","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/zip(_:_:)-8vw4w","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/zip(_:_:_:)-9d4t8","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/zip(_:_:_:)-vw9t","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/migrate\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/grdb\/databasepublishers\/migrate\/publisher-implementations","title":"Publisher Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasepublishers\/migrate","title":"DatabasePublishers.Migrate","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/receive(subscriber:)","title":"func receive<S>(subscriber: S)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/failure","title":"DatabasePublishers.Read.Failure","type":"typealias"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/output","title":"DatabasePublishers.Read.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/values","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/append(_:)","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/combinelatest(_:_:)-4c8hl","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/combinelatest(_:_:)-81u1f","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/combinelatest(_:_:_:)-318fa","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/combinelatest(_:_:_:)-8bwn3","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/contains(_:)","title":"func contains(Self.Output) -> Publishers.Contains<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/encode(encoder:)","title":"func encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/flatmap(maxpublishers:_:)-94mcz","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/flatmap(maxpublishers:_:)-9ncxn","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/map(_:)-6exy7","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/map(_:)-8wbo6","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/max()","title":"func max() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/merge(with:)","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/min()","title":"func min() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/prepend(_:)","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/print(_:to:)","title":"func print(String, to: TextOutputStream?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/removeduplicates()","title":"func removeDuplicates() -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/subscribe(_:)-2vnnz","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/subscribe(_:)-6u5lb","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/zip(_:_:)-1mvvg","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/zip(_:_:)-7ku4z","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/zip(_:_:_:)-2qj99","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/zip(_:_:_:)-4qzif","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/read\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/grdb\/databasepublishers\/read\/publisher-implementations","title":"Publisher Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasepublishers\/read","title":"DatabasePublishers.Read","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/receive(subscriber:)","title":"func receive<S>(subscriber: S)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/failure","title":"DatabasePublishers.Value.Failure","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/values","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/append(_:)","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/combinelatest(_:_:)-4fh0z","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/combinelatest(_:_:)-6i9lq","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/combinelatest(_:_:_:)-5dxdf","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/combinelatest(_:_:_:)-6zmy0","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/contains(_:)","title":"func contains(Self.Output) -> Publishers.Contains<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/encode(encoder:)","title":"func encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/flatmap(maxpublishers:_:)-35f6i","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/flatmap(maxpublishers:_:)-7w3pn","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/map(_:)-9dlxz","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/map(_:)-9qrgc","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/max()","title":"func max() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/merge(with:)","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/min()","title":"func min() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/prepend(_:)","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/print(_:to:)","title":"func print(String, to: TextOutputStream?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/removeduplicates()","title":"func removeDuplicates() -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/subscribe(_:)-369ob","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/subscribe(_:)-7a4q7","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/zip(_:_:)-1330b","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/zip(_:_:)-1y2uk","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/zip(_:_:_:)-3j186","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/zip(_:_:_:)-9a2e7","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/value\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/grdb\/databasepublishers\/value\/publisher-implementations","title":"Publisher Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasepublishers\/value","title":"DatabasePublishers.Value","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/receive(subscriber:)","title":"func receive<S>(subscriber: S)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/failure","title":"DatabasePublishers.Write.Failure","type":"typealias"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/output","title":"DatabasePublishers.Write.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/values","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/append(_:)","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/combinelatest(_:_:)-3z6il","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/combinelatest(_:_:)-4kfg0","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/combinelatest(_:_:_:)-3mr11","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/combinelatest(_:_:_:)-8gvt5","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/contains(_:)","title":"func contains(Self.Output) -> Publishers.Contains<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/encode(encoder:)","title":"func encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/flatmap(maxpublishers:_:)-433al","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/flatmap(maxpublishers:_:)-4phhi","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/map(_:)-3gta9","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/map(_:)-6cl4j","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/max()","title":"func max() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/merge(with:)","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/min()","title":"func min() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/prepend(_:)","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/print(_:to:)","title":"func print(String, to: TextOutputStream?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/removeduplicates()","title":"func removeDuplicates() -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/subscribe(_:)-17ivx","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/subscribe(_:)-4r1fm","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/zip(_:_:)-204x8","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/zip(_:_:)-2vfm7","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/zip(_:_:_:)-2wvcs","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/zip(_:_:_:)-525ez","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/grdb\/databasepublishers\/write\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/grdb\/databasepublishers\/write\/publisher-implementations","title":"Publisher Implementations","type":"symbol"}],"path":"\/documentation\/grdb\/databasepublishers\/write","title":"DatabasePublishers.Write","type":"struct"}],"path":"\/documentation\/grdb\/databasepublishers","title":"DatabasePublishers","type":"enum"}],"path":"\/documentation\/grdb","title":"GRDB","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}